const micro = @import("microzig");
const mmio = micro.mmio;

pub const devices = struct {
    ///  STM32L562
    pub const STM32L562 = struct {
        pub const peripherals = struct {
            ///  General-purpose-timers
            pub const TIM2 = @as(*volatile types.peripherals.TIM2, @ptrFromInt(0x40000000));
            ///  General-purpose-timers
            pub const TIM3 = @as(*volatile types.peripherals.TIM3, @ptrFromInt(0x40000400));
            ///  General-purpose-timers
            pub const TIM4 = @as(*volatile types.peripherals.TIM4, @ptrFromInt(0x40000800));
            ///  General-purpose-timers
            pub const TIM5 = @as(*volatile types.peripherals.TIM4, @ptrFromInt(0x40000c00));
            ///  General-purpose-timers
            pub const TIM6 = @as(*volatile types.peripherals.TIM6, @ptrFromInt(0x40001000));
            ///  General-purpose-timers
            pub const TIM7 = @as(*volatile types.peripherals.TIM7, @ptrFromInt(0x40001400));
            ///  Real-time clock
            pub const RTC = @as(*volatile types.peripherals.RTC, @ptrFromInt(0x40002800));
            ///  System window watchdog
            pub const WWDG = @as(*volatile types.peripherals.WWDG, @ptrFromInt(0x40002c00));
            ///  Independent watchdog
            pub const IWDG = @as(*volatile types.peripherals.IWDG, @ptrFromInt(0x40003000));
            ///  Tamper and backup registers
            pub const TAMP = @as(*volatile types.peripherals.TAMP, @ptrFromInt(0x40003400));
            ///  Serial peripheral interface
            pub const SPI2 = @as(*volatile types.peripherals.SPI1, @ptrFromInt(0x40003800));
            ///  Serial peripheral interface
            pub const SPI3 = @as(*volatile types.peripherals.SPI1, @ptrFromInt(0x40003c00));
            ///  Universal synchronous asynchronous receiver transmitter
            pub const USART2 = @as(*volatile types.peripherals.USART1, @ptrFromInt(0x40004400));
            ///  Universal synchronous asynchronous receiver transmitter
            pub const USART3 = @as(*volatile types.peripherals.USART1, @ptrFromInt(0x40004800));
            ///  Universal synchronous asynchronous receiver transmitter
            pub const UART4 = @as(*volatile types.peripherals.USART1, @ptrFromInt(0x40004c00));
            ///  Universal synchronous asynchronous receiver transmitter
            pub const UART5 = @as(*volatile types.peripherals.USART1, @ptrFromInt(0x40005000));
            ///  Inter-integrated circuit
            pub const I2C1 = @as(*volatile types.peripherals.I2C1, @ptrFromInt(0x40005400));
            ///  Inter-integrated circuit
            pub const I2C2 = @as(*volatile types.peripherals.I2C1, @ptrFromInt(0x40005800));
            ///  Inter-integrated circuit
            pub const I2C3 = @as(*volatile types.peripherals.I2C1, @ptrFromInt(0x40005c00));
            ///  Clock recovery system
            pub const CRS = @as(*volatile types.peripherals.CRS, @ptrFromInt(0x40006000));
            ///  Power control
            pub const PWR = @as(*volatile types.peripherals.PWR, @ptrFromInt(0x40007000));
            ///  DAC
            pub const DAC = @as(*volatile types.peripherals.DAC, @ptrFromInt(0x40007400));
            ///  Operational amplifiers
            pub const OPAMP = @as(*volatile types.peripherals.OPAMP, @ptrFromInt(0x40007800));
            ///  Low power timer
            pub const LPTIM1 = @as(*volatile types.peripherals.LPTIM1, @ptrFromInt(0x40007c00));
            ///  Universal synchronous asynchronous receiver transmitter
            pub const LPUART1 = @as(*volatile types.peripherals.LPUART1, @ptrFromInt(0x40008000));
            ///  Inter-integrated circuit
            pub const I2C4 = @as(*volatile types.peripherals.I2C1, @ptrFromInt(0x40008400));
            ///  Low power timer
            pub const LPTIM2 = @as(*volatile types.peripherals.LPTIM1, @ptrFromInt(0x40009400));
            ///  Low power timer
            pub const LPTIM3 = @as(*volatile types.peripherals.LPTIM1, @ptrFromInt(0x40009800));
            ///  FDCAN1
            pub const FDCAN1 = @as(*volatile types.peripherals.FDCAN1, @ptrFromInt(0x4000a400));
            ///  Universal serial bus full-speed device interface
            pub const USB = @as(*volatile types.peripherals.USB, @ptrFromInt(0x4000d400));
            ///  USB Power Delivery interface
            pub const UCPD1 = @as(*volatile types.peripherals.UCPD1, @ptrFromInt(0x4000dc00));
            ///  System configuration controller
            pub const SYSCFG = @as(*volatile types.peripherals.SYSCFG, @ptrFromInt(0x40010000));
            ///  Voltage reference buffer
            pub const VREFBUF = @as(*volatile types.peripherals.VREFBUF, @ptrFromInt(0x40010030));
            ///  Comparator
            pub const COMP = @as(*volatile types.peripherals.COMP, @ptrFromInt(0x40010200));
            ///  Advanced-timers
            pub const TIM1 = @as(*volatile types.peripherals.TIM1, @ptrFromInt(0x40012c00));
            ///  Serial peripheral interface
            pub const SPI1 = @as(*volatile types.peripherals.SPI1, @ptrFromInt(0x40013000));
            ///  Advanced-timers
            pub const TIM8 = @as(*volatile types.peripherals.TIM8, @ptrFromInt(0x40013400));
            ///  Universal synchronous asynchronous receiver transmitter
            pub const USART1 = @as(*volatile types.peripherals.USART1, @ptrFromInt(0x40013800));
            ///  General purpose timers
            pub const TIM15 = @as(*volatile types.peripherals.TIM15, @ptrFromInt(0x40014000));
            ///  General purpose timers
            pub const TIM16 = @as(*volatile types.peripherals.TIM16, @ptrFromInt(0x40014400));
            ///  General purpose timers
            pub const TIM17 = @as(*volatile types.peripherals.TIM17, @ptrFromInt(0x40014800));
            ///  Serial audio interface
            pub const SAI1 = @as(*volatile types.peripherals.SAI1, @ptrFromInt(0x40015400));
            ///  Serial audio interface
            pub const SAI2 = @as(*volatile types.peripherals.SAI1, @ptrFromInt(0x40015800));
            ///  Digital filter for sigma delta modulators
            pub const DFSDM1 = @as(*volatile types.peripherals.DFSDM1, @ptrFromInt(0x40016000));
            ///  Direct memory access controller
            pub const DMA1 = @as(*volatile types.peripherals.DMA1, @ptrFromInt(0x40020000));
            ///  Direct memory access controller
            pub const DMA2 = @as(*volatile types.peripherals.DMA1, @ptrFromInt(0x40020400));
            ///  Direct memory access Multiplexer
            pub const DMAMUX1 = @as(*volatile types.peripherals.DMAMUX1, @ptrFromInt(0x40020800));
            ///  Reset and clock control
            pub const RCC = @as(*volatile types.peripherals.RCC, @ptrFromInt(0x40021000));
            ///  Flash
            pub const FLASH = @as(*volatile types.peripherals.FLASH, @ptrFromInt(0x40022000));
            ///  Cyclic redundancy check calculation unit
            pub const CRC = @as(*volatile types.peripherals.CRC, @ptrFromInt(0x40023000));
            ///  Touch sensing controller
            pub const TSC = @as(*volatile types.peripherals.TSC, @ptrFromInt(0x40024000));
            ///  External interrupt/event controller
            pub const EXTI = @as(*volatile types.peripherals.EXTI, @ptrFromInt(0x4002f400));
            ///  ICache
            pub const ICache = @as(*volatile types.peripherals.ICache, @ptrFromInt(0x40030400));
            ///  GTZC_TZSC
            pub const GTZC_TZSC = @as(*volatile types.peripherals.GTZC_TZSC, @ptrFromInt(0x40032400));
            ///  GTZC_TZIC
            pub const GTZC_TZIC = @as(*volatile types.peripherals.GTZC_TZIC, @ptrFromInt(0x40032800));
            ///  GTZC_MPCBB1
            pub const GTZC_MPCBB1 = @as(*volatile types.peripherals.GTZC_MPCBB1, @ptrFromInt(0x40032c00));
            ///  GTZC_MPCBB2
            pub const GTZC_MPCBB2 = @as(*volatile types.peripherals.GTZC_MPCBB2, @ptrFromInt(0x40033000));
            ///  General-purpose I/Os
            pub const GPIOA = @as(*volatile types.peripherals.GPIOA, @ptrFromInt(0x42020000));
            ///  General-purpose I/Os
            pub const GPIOB = @as(*volatile types.peripherals.GPIOB, @ptrFromInt(0x42020400));
            ///  General-purpose I/Os
            pub const GPIOC = @as(*volatile types.peripherals.GPIOC, @ptrFromInt(0x42020800));
            ///  General-purpose I/Os
            pub const GPIOD = @as(*volatile types.peripherals.GPIOC, @ptrFromInt(0x42020c00));
            ///  General-purpose I/Os
            pub const GPIOE = @as(*volatile types.peripherals.GPIOC, @ptrFromInt(0x42021000));
            ///  General-purpose I/Os
            pub const GPIOF = @as(*volatile types.peripherals.GPIOC, @ptrFromInt(0x42021400));
            ///  General-purpose I/Os
            pub const GPIOG = @as(*volatile types.peripherals.GPIOC, @ptrFromInt(0x42021800));
            ///  General-purpose I/Os
            pub const GPIOH = @as(*volatile types.peripherals.GPIOH, @ptrFromInt(0x42021c00));
            ///  Analog-to-Digital Converter
            pub const ADC1 = @as(*volatile types.peripherals.ADC1, @ptrFromInt(0x42028000));
            ///  Analog-to-Digital Converter
            pub const ADC2 = @as(*volatile types.peripherals.ADC2, @ptrFromInt(0x42028100));
            ///  Analog-to-Digital Converter
            pub const ADC_Common = @as(*volatile types.peripherals.ADC_Common, @ptrFromInt(0x42028300));
            ///  Advanced encryption standard hardware accelerator 1
            pub const AES = @as(*volatile types.peripherals.AES, @ptrFromInt(0x420c0000));
            ///  Hash processor
            pub const HASH = @as(*volatile types.peripherals.HASH, @ptrFromInt(0x420c0400));
            ///  RNG
            pub const RNG = @as(*volatile types.peripherals.RNG, @ptrFromInt(0x420c0800));
            ///  PKA
            pub const PKA = @as(*volatile types.peripherals.PKA, @ptrFromInt(0x420c2000));
            ///  On-The-Fly Decryption engine
            pub const OTFDEC1 = @as(*volatile types.peripherals.OTFDEC1, @ptrFromInt(0x420c5000));
            ///  SDMMC1
            pub const SDMMC1 = @as(*volatile types.peripherals.SDMMC1, @ptrFromInt(0x420c8000));
            ///  FMC
            pub const FMC = @as(*volatile types.peripherals.FMC, @ptrFromInt(0x44020000));
            ///  OctoSPI
            pub const OCTOSPI1 = @as(*volatile types.peripherals.OCTOSPI1, @ptrFromInt(0x44021000));
            ///  General-purpose-timers
            pub const SEC_TIM2 = @as(*volatile types.peripherals.TIM2, @ptrFromInt(0x50000000));
            ///  General-purpose-timers
            pub const SEC_TIM3 = @as(*volatile types.peripherals.TIM3, @ptrFromInt(0x50000400));
            ///  General-purpose-timers
            pub const SEC_TIM4 = @as(*volatile types.peripherals.TIM4, @ptrFromInt(0x50000800));
            ///  General-purpose-timers
            pub const SEC_TIM5 = @as(*volatile types.peripherals.TIM4, @ptrFromInt(0x50000c00));
            ///  General-purpose-timers
            pub const SEC_TIM6 = @as(*volatile types.peripherals.TIM6, @ptrFromInt(0x50001000));
            ///  General-purpose-timers
            pub const SEC_TIM7 = @as(*volatile types.peripherals.TIM7, @ptrFromInt(0x50001400));
            ///  Real-time clock
            pub const SEC_RTC = @as(*volatile types.peripherals.RTC, @ptrFromInt(0x50002800));
            ///  System window watchdog
            pub const SEC_WWDG = @as(*volatile types.peripherals.WWDG, @ptrFromInt(0x50002c00));
            ///  Independent watchdog
            pub const SEC_IWDG = @as(*volatile types.peripherals.IWDG, @ptrFromInt(0x50003000));
            ///  Tamper and backup registers
            pub const SEC_TAMP = @as(*volatile types.peripherals.TAMP, @ptrFromInt(0x50003400));
            ///  Serial peripheral interface
            pub const SEC_SPI2 = @as(*volatile types.peripherals.SPI1, @ptrFromInt(0x50003800));
            ///  Serial peripheral interface
            pub const SEC_SPI3 = @as(*volatile types.peripherals.SPI1, @ptrFromInt(0x50003c00));
            ///  Universal synchronous asynchronous receiver transmitter
            pub const SEC_USART2 = @as(*volatile types.peripherals.USART1, @ptrFromInt(0x50004400));
            ///  Universal synchronous asynchronous receiver transmitter
            pub const SEC_USART3 = @as(*volatile types.peripherals.USART1, @ptrFromInt(0x50004800));
            ///  Universal synchronous asynchronous receiver transmitter
            pub const SEC_UART4 = @as(*volatile types.peripherals.USART1, @ptrFromInt(0x50004c00));
            ///  Universal synchronous asynchronous receiver transmitter
            pub const SEC_UART5 = @as(*volatile types.peripherals.USART1, @ptrFromInt(0x50005000));
            ///  Inter-integrated circuit
            pub const SEC_I2C1 = @as(*volatile types.peripherals.I2C1, @ptrFromInt(0x50005400));
            ///  Inter-integrated circuit
            pub const SEC_I2C2 = @as(*volatile types.peripherals.I2C1, @ptrFromInt(0x50005800));
            ///  Inter-integrated circuit
            pub const SEC_I2C3 = @as(*volatile types.peripherals.I2C1, @ptrFromInt(0x50005c00));
            ///  Clock recovery system
            pub const SEC_CRS = @as(*volatile types.peripherals.CRS, @ptrFromInt(0x50006000));
            ///  Power control
            pub const SEC_PWR = @as(*volatile types.peripherals.PWR, @ptrFromInt(0x50007000));
            ///  DAC
            pub const SEC_DAC = @as(*volatile types.peripherals.DAC, @ptrFromInt(0x50007400));
            ///  Operational amplifiers
            pub const SEC_OPAMP = @as(*volatile types.peripherals.OPAMP, @ptrFromInt(0x50007800));
            ///  Low power timer
            pub const SEC_LPTIM1 = @as(*volatile types.peripherals.LPTIM1, @ptrFromInt(0x50007c00));
            ///  Universal synchronous asynchronous receiver transmitter
            pub const SEC_LPUART1 = @as(*volatile types.peripherals.LPUART1, @ptrFromInt(0x50008000));
            ///  Inter-integrated circuit
            pub const SEC_I2C4 = @as(*volatile types.peripherals.I2C1, @ptrFromInt(0x50008400));
            ///  Low power timer
            pub const SEC_LPTIM2 = @as(*volatile types.peripherals.LPTIM1, @ptrFromInt(0x50009400));
            ///  Low power timer
            pub const SEC_LPTIM3 = @as(*volatile types.peripherals.LPTIM1, @ptrFromInt(0x50009800));
            ///  FDCAN1
            pub const SEC_FDCAN1 = @as(*volatile types.peripherals.FDCAN1, @ptrFromInt(0x5000a400));
            ///  Universal serial bus full-speed device interface
            pub const SEC_USB = @as(*volatile types.peripherals.USB, @ptrFromInt(0x5000d400));
            ///  USB Power Delivery interface
            pub const SEC_UCPD1 = @as(*volatile types.peripherals.UCPD1, @ptrFromInt(0x5000dc00));
            ///  System configuration controller
            pub const SEC_SYSCFG = @as(*volatile types.peripherals.SYSCFG, @ptrFromInt(0x50010000));
            ///  Voltage reference buffer
            pub const SEC_VREFBUF = @as(*volatile types.peripherals.VREFBUF, @ptrFromInt(0x50010030));
            ///  Comparator
            pub const SEC_COMP = @as(*volatile types.peripherals.COMP, @ptrFromInt(0x50010200));
            ///  Advanced-timers
            pub const SEC_TIM1 = @as(*volatile types.peripherals.TIM1, @ptrFromInt(0x50012c00));
            ///  Serial peripheral interface
            pub const SEC_SPI1 = @as(*volatile types.peripherals.SPI1, @ptrFromInt(0x50013000));
            ///  Advanced-timers
            pub const SEC_TIM8 = @as(*volatile types.peripherals.TIM8, @ptrFromInt(0x50013400));
            ///  Universal synchronous asynchronous receiver transmitter
            pub const SEC_USART1 = @as(*volatile types.peripherals.USART1, @ptrFromInt(0x50013800));
            ///  General purpose timers
            pub const SEC_TIM15 = @as(*volatile types.peripherals.TIM15, @ptrFromInt(0x50014000));
            ///  General purpose timers
            pub const SEC_TIM16 = @as(*volatile types.peripherals.TIM16, @ptrFromInt(0x50014400));
            ///  General purpose timers
            pub const SEC_TIM17 = @as(*volatile types.peripherals.TIM17, @ptrFromInt(0x50014800));
            ///  Serial audio interface
            pub const SEC_SAI1 = @as(*volatile types.peripherals.SAI1, @ptrFromInt(0x50015400));
            ///  Serial audio interface
            pub const SEC_SAI2 = @as(*volatile types.peripherals.SAI1, @ptrFromInt(0x50015800));
            ///  Digital filter for sigma delta modulators
            pub const SEC_DFSDM1 = @as(*volatile types.peripherals.DFSDM1, @ptrFromInt(0x50016000));
            ///  Direct memory access controller
            pub const SEC_DMA1 = @as(*volatile types.peripherals.DMA1, @ptrFromInt(0x50020000));
            ///  Direct memory access controller
            pub const SEC_DMA2 = @as(*volatile types.peripherals.DMA1, @ptrFromInt(0x50020400));
            ///  Direct memory access Multiplexer
            pub const SEC_DMAMUX1 = @as(*volatile types.peripherals.DMAMUX1, @ptrFromInt(0x50020800));
            ///  Reset and clock control
            pub const SEC_RCC = @as(*volatile types.peripherals.RCC, @ptrFromInt(0x50021000));
            ///  Flash
            pub const SEC_FLASH = @as(*volatile types.peripherals.FLASH, @ptrFromInt(0x50022000));
            ///  Cyclic redundancy check calculation unit
            pub const SEC_CRC = @as(*volatile types.peripherals.CRC, @ptrFromInt(0x50023000));
            ///  Touch sensing controller
            pub const SEC_TSC = @as(*volatile types.peripherals.TSC, @ptrFromInt(0x50024000));
            ///  External interrupt/event controller
            pub const SEC_EXTI = @as(*volatile types.peripherals.EXTI, @ptrFromInt(0x5002f400));
            ///  ICache
            pub const SEC_ICache = @as(*volatile types.peripherals.ICache, @ptrFromInt(0x50030400));
            ///  GTZC_TZSC
            pub const SEC_GTZC_TZSC = @as(*volatile types.peripherals.GTZC_TZSC, @ptrFromInt(0x50032400));
            ///  GTZC_TZIC
            pub const SEC_GTZC_TZIC = @as(*volatile types.peripherals.GTZC_TZIC, @ptrFromInt(0x50032800));
            ///  SEC_GTZC_MPCBB1
            pub const SEC_GTZC_MPCBB1 = @as(*volatile types.peripherals.SEC_GTZC_MPCBB1, @ptrFromInt(0x50032c00));
            ///  SEC_GTZC_MPCBB2
            pub const SEC_GTZC_MPCBB2 = @as(*volatile types.peripherals.SEC_GTZC_MPCBB2, @ptrFromInt(0x50033000));
            ///  General-purpose I/Os
            pub const SEC_GPIOA = @as(*volatile types.peripherals.GPIOA, @ptrFromInt(0x52020000));
            ///  General-purpose I/Os
            pub const SEC_GPIOB = @as(*volatile types.peripherals.GPIOB, @ptrFromInt(0x52020400));
            ///  General-purpose I/Os
            pub const SEC_GPIOC = @as(*volatile types.peripherals.GPIOC, @ptrFromInt(0x52020800));
            ///  General-purpose I/Os
            pub const SEC_GPIOD = @as(*volatile types.peripherals.GPIOC, @ptrFromInt(0x52020c00));
            ///  General-purpose I/Os
            pub const SEC_GPIOE = @as(*volatile types.peripherals.GPIOC, @ptrFromInt(0x52021000));
            ///  General-purpose I/Os
            pub const SEC_GPIOF = @as(*volatile types.peripherals.GPIOC, @ptrFromInt(0x52021400));
            ///  General-purpose I/Os
            pub const SEC_GPIOG = @as(*volatile types.peripherals.GPIOC, @ptrFromInt(0x52021800));
            ///  General-purpose I/Os
            pub const SEC_GPIOH = @as(*volatile types.peripherals.GPIOH, @ptrFromInt(0x52021c00));
            ///  Analog-to-Digital Converter
            pub const SEC_ADC1 = @as(*volatile types.peripherals.ADC1, @ptrFromInt(0x52028000));
            ///  Analog-to-Digital Converter
            pub const SEC_ADC2 = @as(*volatile types.peripherals.ADC2, @ptrFromInt(0x52028100));
            ///  Analog-to-Digital Converter
            pub const SEC_ADC_Common = @as(*volatile types.peripherals.ADC_Common, @ptrFromInt(0x52028300));
            ///  Advanced encryption standard hardware accelerator 1
            pub const SEC_AES = @as(*volatile types.peripherals.AES, @ptrFromInt(0x520c0000));
            ///  Hash processor
            pub const SEC_HASH = @as(*volatile types.peripherals.HASH, @ptrFromInt(0x520c0400));
            ///  RNG
            pub const SEC_RNG = @as(*volatile types.peripherals.RNG, @ptrFromInt(0x520c0800));
            ///  PKA
            pub const SEC_PKA = @as(*volatile types.peripherals.PKA, @ptrFromInt(0x520c2000));
            ///  On-The-Fly Decryption engine
            pub const SEC_OTFDEC1 = @as(*volatile types.peripherals.OTFDEC1, @ptrFromInt(0x520c5000));
            ///  SDMMC1
            pub const SEC_SDMMC1 = @as(*volatile types.peripherals.SDMMC1, @ptrFromInt(0x520c8000));
            ///  FMC
            pub const SEC_FMC = @as(*volatile types.peripherals.FMC, @ptrFromInt(0x54020000));
            ///  OctoSPI
            pub const SEC_OCTOSPI1 = @as(*volatile types.peripherals.OCTOSPI1, @ptrFromInt(0x54021000));
            ///  Nested Vectored Interrupt Controller
            pub const NVIC = @as(*volatile types.peripherals.NVIC, @ptrFromInt(0xe000e100));
            ///  Debug Control Block
            pub const DCB = @as(*volatile types.peripherals.DCB, @ptrFromInt(0xe000ee08));
            ///  Nested vectored interrupt controller
            pub const NVIC_STIR = @as(*volatile types.peripherals.NVIC_STIR, @ptrFromInt(0xe000ef00));
            ///  MCU debug component
            pub const DBGMCU = @as(*volatile types.peripherals.DBGMCU, @ptrFromInt(0xe0044000));
        };
    };
};

pub const types = struct {
    pub const peripherals = struct {
        ///  Digital filter for sigma delta modulators
        pub const DFSDM1 = extern struct {
            ///  channel configuration y register
            CH0CFGR1: mmio.Mmio(packed struct(u32) {
                ///  SITP
                SITP: u2,
                ///  SPICKSEL
                SPICKSEL: u2,
                reserved5: u1,
                ///  SCDEN
                SCDEN: u1,
                ///  CKABEN
                CKABEN: u1,
                ///  CHEN
                CHEN: u1,
                ///  CHINSEL
                CHINSEL: u1,
                reserved12: u3,
                ///  DATMPX
                DATMPX: u2,
                ///  DATPACK
                DATPACK: u2,
                ///  CKOUTDIV
                CKOUTDIV: u8,
                reserved30: u6,
                ///  CKOUTSRC
                CKOUTSRC: u1,
                ///  DFSDMEN
                DFSDMEN: u1,
            }),
            ///  channel configuration y register
            CH0CFGR2: mmio.Mmio(packed struct(u32) {
                reserved3: u3,
                ///  DTRBS
                DTRBS: u5,
                ///  OFFSET
                OFFSET: u24,
            }),
            ///  analog watchdog and short-circuit detector register
            CH0AWSCDR: mmio.Mmio(packed struct(u32) {
                ///  SCDT
                SCDT: u8,
                reserved12: u4,
                ///  BKSCD
                BKSCD: u4,
                ///  AWFOSR
                AWFOSR: u5,
                reserved22: u1,
                ///  AWFORD
                AWFORD: u2,
                padding: u8,
            }),
            ///  channel watchdog filter data register
            CH0WDATR: mmio.Mmio(packed struct(u32) {
                ///  WDATA
                WDATA: u16,
                padding: u16,
            }),
            ///  channel data input register
            CH0DATINR: mmio.Mmio(packed struct(u32) {
                ///  INDAT0
                INDAT0: u16,
                ///  INDAT1
                INDAT1: u16,
            }),
            ///  DFSDM channel y delay register
            CH0DLYR: mmio.Mmio(packed struct(u32) {
                ///  Pulses to skip for input data skipping function
                PLSSKP: u6,
                padding: u26,
            }),
            reserved32: [8]u8,
            ///  CHCFG1R1
            CH1CFGR1: mmio.Mmio(packed struct(u32) {
                ///  SITP
                SITP: u2,
                ///  SPICKSEL
                SPICKSEL: u2,
                reserved5: u1,
                ///  SCDEN
                SCDEN: u1,
                ///  CKABEN
                CKABEN: u1,
                ///  CHEN
                CHEN: u1,
                ///  CHINSEL
                CHINSEL: u1,
                reserved12: u3,
                ///  DATMPX
                DATMPX: u2,
                ///  DATPACK
                DATPACK: u2,
                ///  Output serial clock divider
                CKOUTDIV: u8,
                reserved30: u6,
                ///  Output serial clock source selection
                CKOUTSRC: u1,
                ///  Global enable for DFSDM interface
                DFSDMEN: u1,
            }),
            ///  CHCFG1R2
            CH1CFGR2: mmio.Mmio(packed struct(u32) {
                reserved3: u3,
                ///  DTRBS
                DTRBS: u5,
                ///  OFFSET
                OFFSET: u24,
            }),
            ///  AWSCD1R
            CH1AWSCDR: mmio.Mmio(packed struct(u32) {
                ///  SCDT
                SCDT: u8,
                reserved12: u4,
                ///  BKSCD
                BKSCD: u4,
                ///  AWFOSR
                AWFOSR: u5,
                reserved22: u1,
                ///  AWFORD
                AWFORD: u2,
                padding: u8,
            }),
            ///  CHWDAT1R
            CH1WDATR: mmio.Mmio(packed struct(u32) {
                ///  WDATA
                WDATA: u16,
                padding: u16,
            }),
            ///  CHDATIN1R
            CH1DATINR: mmio.Mmio(packed struct(u32) {
                ///  INDAT0
                INDAT0: u16,
                ///  INDAT1
                INDAT1: u16,
            }),
            ///  DFSDM channel y delay register
            CH1DLYR: mmio.Mmio(packed struct(u32) {
                ///  PLSSKP
                PLSSKP: u6,
                padding: u26,
            }),
            reserved64: [8]u8,
            ///  CHCFG2R1
            CH2CFGR1: mmio.Mmio(packed struct(u32) {
                ///  SITP
                SITP: u2,
                ///  SPICKSEL
                SPICKSEL: u2,
                reserved5: u1,
                ///  SCDEN
                SCDEN: u1,
                ///  CKABEN
                CKABEN: u1,
                ///  CHEN
                CHEN: u1,
                ///  CHINSEL
                CHINSEL: u1,
                reserved12: u3,
                ///  DATMPX
                DATMPX: u2,
                ///  DATPACK
                DATPACK: u2,
                ///  Output serial clock divider
                CKOUTDIV: u8,
                reserved30: u6,
                ///  Output serial clock source selection
                CKOUTSRC: u1,
                ///  Global enable for DFSDM interface
                DFSDMEN: u1,
            }),
            ///  CHCFG2R2
            CH2CFGR2: mmio.Mmio(packed struct(u32) {
                reserved3: u3,
                ///  DTRBS
                DTRBS: u5,
                ///  OFFSET
                OFFSET: u24,
            }),
            ///  AWSCD2R
            CH2AWSCDR: mmio.Mmio(packed struct(u32) {
                ///  SCDT
                SCDT: u8,
                reserved12: u4,
                ///  BKSCD
                BKSCD: u4,
                ///  AWFOSR
                AWFOSR: u5,
                reserved22: u1,
                ///  AWFORD
                AWFORD: u2,
                padding: u8,
            }),
            ///  CHWDAT2R
            CH2WDATR: mmio.Mmio(packed struct(u32) {
                ///  WDATA
                WDATA: u16,
                padding: u16,
            }),
            ///  CHDATIN2R
            CH2DATINR: mmio.Mmio(packed struct(u32) {
                ///  INDAT0
                INDAT0: u16,
                ///  INDAT1
                INDAT1: u16,
            }),
            ///  DFSDM channel y delay register
            CH2DLYR: mmio.Mmio(packed struct(u32) {
                ///  PLSSKP
                PLSSKP: u6,
                padding: u26,
            }),
            reserved96: [8]u8,
            ///  CHCFG3R1
            CH3CFGR1: mmio.Mmio(packed struct(u32) {
                ///  SITP
                SITP: u2,
                ///  SPICKSEL
                SPICKSEL: u2,
                reserved5: u1,
                ///  SCDEN
                SCDEN: u1,
                ///  CKABEN
                CKABEN: u1,
                ///  CHEN
                CHEN: u1,
                ///  CHINSEL
                CHINSEL: u1,
                reserved12: u3,
                ///  DATMPX
                DATMPX: u2,
                ///  DATPACK
                DATPACK: u2,
                ///  Output serial clock divider
                CKOUTDIV: u8,
                reserved30: u6,
                ///  Output serial clock source selection
                CKOUTSRC: u1,
                ///  Global enable for DFSDM interface
                DFSDMEN: u1,
            }),
            ///  CHCFG3R2
            CH3CFGR2: mmio.Mmio(packed struct(u32) {
                reserved3: u3,
                ///  DTRBS
                DTRBS: u5,
                ///  OFFSET
                OFFSET: u24,
            }),
            ///  AWSCD3R
            CH3AWSCDR: mmio.Mmio(packed struct(u32) {
                ///  SCDT
                SCDT: u8,
                reserved12: u4,
                ///  BKSCD
                BKSCD: u4,
                ///  AWFOSR
                AWFOSR: u5,
                reserved22: u1,
                ///  AWFORD
                AWFORD: u2,
                padding: u8,
            }),
            ///  CHWDAT3R
            CH3WDATR: mmio.Mmio(packed struct(u32) {
                ///  WDATA
                WDATA: u16,
                padding: u16,
            }),
            ///  CHDATIN3R
            CH3DATINR: mmio.Mmio(packed struct(u32) {
                ///  INDAT0
                INDAT0: u16,
                ///  INDAT1
                INDAT1: u16,
            }),
            ///  DFSDM channel y delay register
            CH3DLYR: mmio.Mmio(packed struct(u32) {
                ///  PLSSKP
                PLSSKP: u6,
                padding: u26,
            }),
            reserved128: [8]u8,
            ///  CHCFG4R1
            CH4CFGR1: mmio.Mmio(packed struct(u32) {
                ///  SITP
                SITP: u2,
                ///  SPICKSEL
                SPICKSEL: u2,
                reserved5: u1,
                ///  SCDEN
                SCDEN: u1,
                ///  CKABEN
                CKABEN: u1,
                ///  CHEN
                CHEN: u1,
                ///  CHINSEL
                CHINSEL: u1,
                reserved12: u3,
                ///  DATMPX
                DATMPX: u2,
                ///  DATPACK
                DATPACK: u2,
                ///  Output serial clock divider
                CKOUTDIV: u8,
                reserved30: u6,
                ///  Output serial clock source selection
                CKOUTSRC: u1,
                ///  Global enable for DFSDM interface
                DFSDMEN: u1,
            }),
            ///  CHCFG4R2
            CH4CFGR2: mmio.Mmio(packed struct(u32) {
                reserved3: u3,
                ///  DTRBS
                DTRBS: u5,
                ///  OFFSET
                OFFSET: u24,
            }),
            ///  AWSCD4R
            CH4AWSCDR: mmio.Mmio(packed struct(u32) {
                ///  SCDT
                SCDT: u8,
                reserved12: u4,
                ///  BKSCD
                BKSCD: u4,
                ///  AWFOSR
                AWFOSR: u5,
                reserved22: u1,
                ///  AWFORD
                AWFORD: u2,
                padding: u8,
            }),
            ///  CHWDAT4R
            CH4WDATR: mmio.Mmio(packed struct(u32) {
                ///  WDATA
                WDATA: u16,
                padding: u16,
            }),
            ///  CHDATIN4R
            CH4DATINR: mmio.Mmio(packed struct(u32) {
                ///  INDAT0
                INDAT0: u16,
                ///  INDAT1
                INDAT1: u16,
            }),
            ///  DFSDM channel y delay register
            CH4DLYR: mmio.Mmio(packed struct(u32) {
                ///  PLSSKP
                PLSSKP: u6,
                padding: u26,
            }),
            reserved160: [8]u8,
            ///  CHCFG5R1
            CH5CFGR1: mmio.Mmio(packed struct(u32) {
                ///  SITP
                SITP: u2,
                ///  SPICKSEL
                SPICKSEL: u2,
                reserved5: u1,
                ///  SCDEN
                SCDEN: u1,
                ///  CKABEN
                CKABEN: u1,
                ///  CHEN
                CHEN: u1,
                ///  CHINSEL
                CHINSEL: u1,
                reserved12: u3,
                ///  DATMPX
                DATMPX: u2,
                ///  DATPACK
                DATPACK: u2,
                ///  Output serial clock divider
                CKOUTDIV: u8,
                reserved30: u6,
                ///  Output serial clock source selection
                CKOUTSRC: u1,
                ///  Global enable for DFSDM interface
                DFSDMEN: u1,
            }),
            ///  CHCFG5R2
            CH5CFGR2: mmio.Mmio(packed struct(u32) {
                reserved3: u3,
                ///  DTRBS
                DTRBS: u5,
                ///  OFFSET
                OFFSET: u24,
            }),
            ///  AWSCD5R
            CH5AWSCDR: mmio.Mmio(packed struct(u32) {
                ///  SCDT
                SCDT: u8,
                reserved12: u4,
                ///  BKSCD
                BKSCD: u4,
                ///  AWFOSR
                AWFOSR: u5,
                reserved22: u1,
                ///  AWFORD
                AWFORD: u2,
                padding: u8,
            }),
            ///  CHWDAT5R
            CH5WDATR: mmio.Mmio(packed struct(u32) {
                ///  WDATA
                WDATA: u16,
                padding: u16,
            }),
            ///  CHDATIN5R
            CH5DATINR: mmio.Mmio(packed struct(u32) {
                ///  INDAT0
                INDAT0: u16,
                ///  INDAT1
                INDAT1: u16,
            }),
            ///  DFSDM channel y delay register
            CH5DLYR: mmio.Mmio(packed struct(u32) {
                ///  read-only
                PLSSKP: u6,
                padding: u26,
            }),
            reserved192: [8]u8,
            ///  CHCFG6R1
            CH6CFGR1: mmio.Mmio(packed struct(u32) {
                ///  SITP
                SITP: u2,
                ///  SPICKSEL
                SPICKSEL: u2,
                reserved5: u1,
                ///  SCDEN
                SCDEN: u1,
                ///  CKABEN
                CKABEN: u1,
                ///  CHEN
                CHEN: u1,
                ///  CHINSEL
                CHINSEL: u1,
                reserved12: u3,
                ///  DATMPX
                DATMPX: u2,
                ///  DATPACK
                DATPACK: u2,
                ///  Output serial clock divider
                CKOUTDIV: u8,
                reserved30: u6,
                ///  Output serial clock source selection
                CKOUTSRC: u1,
                ///  Global enable for DFSDM interface
                DFSDMEN: u1,
            }),
            ///  CH6CFGR2
            CH6CFGR2: mmio.Mmio(packed struct(u32) {
                reserved3: u3,
                ///  DTRBS
                DTRBS: u5,
                ///  OFFSET
                OFFSET: u24,
            }),
            ///  AWSCD6R
            CH6AWSCDR: mmio.Mmio(packed struct(u32) {
                ///  SCDT
                SCDT: u8,
                reserved12: u4,
                ///  BKSCD
                BKSCD: u4,
                ///  AWFOSR
                AWFOSR: u5,
                reserved22: u1,
                ///  AWFORD
                AWFORD: u2,
                padding: u8,
            }),
            ///  CHWDAT6R
            CH6WDATR: mmio.Mmio(packed struct(u32) {
                ///  WDATA
                WDATA: u16,
                padding: u16,
            }),
            ///  CHDATIN6R
            CH6DATINR: mmio.Mmio(packed struct(u32) {
                ///  INDAT0
                INDAT0: u16,
                ///  INDAT1
                INDAT1: u16,
            }),
            ///  DFSDM channel y delay register
            CH6DLYR: mmio.Mmio(packed struct(u32) {
                ///  PLSSKP
                PLSSKP: u6,
                padding: u26,
            }),
            reserved224: [8]u8,
            ///  CHCFG7R1
            CH7CFGR1: mmio.Mmio(packed struct(u32) {
                ///  SITP
                SITP: u2,
                ///  SPICKSEL
                SPICKSEL: u2,
                reserved5: u1,
                ///  SCDEN
                SCDEN: u1,
                ///  CKABEN
                CKABEN: u1,
                ///  CHEN
                CHEN: u1,
                ///  CHINSEL
                CHINSEL: u1,
                reserved12: u3,
                ///  DATMPX
                DATMPX: u2,
                ///  DATPACK
                DATPACK: u2,
                ///  Output serial clock divider
                CKOUTDIV: u8,
                reserved30: u6,
                ///  Output serial clock source selection
                CKOUTSRC: u1,
                ///  Global enable for DFSDM interface
                DFSDMEN: u1,
            }),
            ///  CHCFG7R2
            CH7CFGR2: mmio.Mmio(packed struct(u32) {
                reserved3: u3,
                ///  DTRBS
                DTRBS: u5,
                ///  OFFSET
                OFFSET: u24,
            }),
            ///  AWSCD7R
            CH7AWSCDR: mmio.Mmio(packed struct(u32) {
                ///  SCDT
                SCDT: u8,
                reserved12: u4,
                ///  BKSCD
                BKSCD: u4,
                ///  AWFOSR
                AWFOSR: u5,
                reserved22: u1,
                ///  AWFORD
                AWFORD: u2,
                padding: u8,
            }),
            ///  CHWDAT7R
            CH7WDATR: mmio.Mmio(packed struct(u32) {
                ///  WDATA
                WDATA: u16,
                padding: u16,
            }),
            ///  CHDATIN7R
            CH7DATINR: mmio.Mmio(packed struct(u32) {
                ///  INDAT0
                INDAT0: u16,
                ///  INDAT1
                INDAT1: u16,
            }),
            ///  DFSDM channel y delay register
            CH7DLYR: mmio.Mmio(packed struct(u32) {
                ///  PLSSKP
                PLSSKP: u6,
                padding: u26,
            }),
            reserved256: [8]u8,
            ///  control register 1
            FLT0CR1: mmio.Mmio(packed struct(u32) {
                ///  DFSDM enable
                DFEN: u1,
                ///  Start a conversion of the injected group of channels
                JSWSTART: u1,
                reserved3: u1,
                ///  Launch an injected conversion synchronously with the DFSDM0 JSWSTART trigger
                JSYNC: u1,
                ///  Scanning conversion mode for injected conversions
                JSCAN: u1,
                ///  DMA channel enabled to read data for the injected channel group
                JDMAEN: u1,
                reserved8: u2,
                ///  Trigger signal selection for launching injected conversions
                JEXTSEL: u3,
                reserved13: u2,
                ///  Trigger enable and trigger edge selection for injected conversions
                JEXTEN: u2,
                reserved17: u2,
                ///  Software start of a conversion on the regular channel
                RSWSTART: u1,
                ///  Continuous mode selection for regular conversions
                RCONT: u1,
                ///  Launch regular conversion synchronously with DFSDM0
                RSYNC: u1,
                reserved21: u1,
                ///  DMA channel enabled to read data for the regular conversion
                RDMAEN: u1,
                reserved24: u2,
                ///  Regular channel selection
                RCH: u3,
                reserved29: u2,
                ///  Fast conversion mode selection for regular conversions
                FAST: u1,
                ///  Analog watchdog fast mode select
                AWFSEL: u1,
                padding: u1,
            }),
            ///  control register 2
            FLT0CR2: mmio.Mmio(packed struct(u32) {
                ///  Injected end of conversion interrupt enable
                JEOCIE: u1,
                ///  Regular end of conversion interrupt enable
                REOCIE: u1,
                ///  Injected data overrun interrupt enable
                JOVRIE: u1,
                ///  Regular data overrun interrupt enable
                ROVRIE: u1,
                ///  Analog watchdog interrupt enable
                AWDIE: u1,
                ///  Short-circuit detector interrupt enable
                SCDIE: u1,
                ///  Clock absence interrupt enable
                CKABIE: u1,
                reserved8: u1,
                ///  Extremes detector channel selection
                EXCH: u8,
                ///  Analog watchdog channel selection
                AWDCH: u8,
                padding: u8,
            }),
            ///  interrupt and status register
            FLT0ISR: mmio.Mmio(packed struct(u32) {
                ///  End of injected conversion flag
                JEOCF: u1,
                ///  End of regular conversion flag
                REOCF: u1,
                ///  Injected conversion overrun flag
                JOVRF: u1,
                ///  Regular conversion overrun flag
                ROVRF: u1,
                ///  Analog watchdog
                AWDF: u1,
                reserved13: u8,
                ///  Injected conversion in progress status
                JCIP: u1,
                ///  Regular conversion in progress status
                RCIP: u1,
                reserved16: u1,
                ///  Clock absence flag
                CKABF: u8,
                ///  short-circuit detector flag
                SCDF: u8,
            }),
            ///  interrupt flag clear register
            FLT0ICR: mmio.Mmio(packed struct(u32) {
                reserved2: u2,
                ///  Clear the injected conversion overrun flag
                CLRJOVRF: u1,
                ///  Clear the regular conversion overrun flag
                CLRROVRF: u1,
                reserved16: u12,
                ///  Clear the clock absence flag
                CLRCKABF: u8,
                ///  Clear the short-circuit detector flag
                CLRSCDF: u8,
            }),
            ///  injected channel group selection register
            FLT0JCHGR: mmio.Mmio(packed struct(u32) {
                ///  Injected channel group selection
                JCHG: u8,
                padding: u24,
            }),
            ///  filter control register
            FLT0FCR: mmio.Mmio(packed struct(u32) {
                ///  Integrator oversampling ratio (averaging length)
                IOSR: u8,
                reserved16: u8,
                ///  Sinc filter oversampling ratio (decimation rate)
                FOSR: u10,
                reserved29: u3,
                ///  Sinc filter order
                FORD: u3,
            }),
            ///  data register for injected group
            FLT0JDATAR: mmio.Mmio(packed struct(u32) {
                ///  Injected channel most recently converted
                JDATACH: u3,
                reserved8: u5,
                ///  Injected group conversion data
                JDATA: u24,
            }),
            ///  data register for the regular channel
            FLT0RDATAR: mmio.Mmio(packed struct(u32) {
                ///  Regular channel most recently converted
                RDATACH: u3,
                reserved4: u1,
                ///  Regular channel pending data
                RPEND: u1,
                reserved8: u3,
                ///  Regular channel conversion data
                RDATA: u24,
            }),
            ///  analog watchdog high threshold register
            FLT0AWHTR: mmio.Mmio(packed struct(u32) {
                ///  Break signal assignment to analog watchdog high threshold event
                BKAWH: u4,
                reserved8: u4,
                ///  Analog watchdog high threshold
                AWHT: u24,
            }),
            ///  analog watchdog low threshold register
            FLT0AWLTR: mmio.Mmio(packed struct(u32) {
                ///  Break signal assignment to analog watchdog low threshold event
                BKAWL: u4,
                reserved8: u4,
                ///  Analog watchdog low threshold
                AWLT: u24,
            }),
            ///  analog watchdog status register
            FLT0AWSR: mmio.Mmio(packed struct(u32) {
                ///  Analog watchdog low threshold flag
                AWLTF: u8,
                ///  Analog watchdog high threshold flag
                AWHTF: u8,
                padding: u16,
            }),
            ///  analog watchdog clear flag register
            FLT0AWCFR: mmio.Mmio(packed struct(u32) {
                ///  Clear the analog watchdog low threshold flag
                CLRAWLTF: u8,
                ///  Clear the analog watchdog high threshold flag
                CLRAWHTF: u8,
                padding: u16,
            }),
            ///  Extremes detector maximum register
            FLT0EXMAX: mmio.Mmio(packed struct(u32) {
                ///  Extremes detector maximum data channel
                EXMAXCH: u3,
                reserved8: u5,
                ///  Extremes detector maximum value
                EXMAX: u24,
            }),
            ///  Extremes detector minimum register
            FLT0EXMIN: mmio.Mmio(packed struct(u32) {
                ///  Extremes detector minimum data channel
                EXMINCH: u3,
                reserved8: u5,
                ///  EXMIN
                EXMIN: u24,
            }),
            ///  conversion timer register
            FLT0CNVTIMR: mmio.Mmio(packed struct(u32) {
                reserved4: u4,
                ///  28-bit timer counting conversion time t = CNVCNT[27:0] / fDFSDM_CKIN
                CNVCNT: u28,
            }),
            reserved384: [68]u8,
            ///  control register 1
            FLT1CR1: mmio.Mmio(packed struct(u32) {
                ///  DFSDM enable
                DFEN: u1,
                ///  Start a conversion of the injected group of channels
                JSWSTART: u1,
                reserved3: u1,
                ///  Launch an injected conversion synchronously with the DFSDM0 JSWSTART trigger
                JSYNC: u1,
                ///  Scanning conversion mode for injected conversions
                JSCAN: u1,
                ///  DMA channel enabled to read data for the injected channel group
                JDMAEN: u1,
                reserved8: u2,
                ///  Trigger signal selection for launching injected conversions
                JEXTSEL: u3,
                reserved13: u2,
                ///  Trigger enable and trigger edge selection for injected conversions
                JEXTEN: u2,
                reserved17: u2,
                ///  Software start of a conversion on the regular channel
                RSWSTART: u1,
                ///  Continuous mode selection for regular conversions
                RCONT: u1,
                ///  Launch regular conversion synchronously with DFSDM0
                RSYNC: u1,
                reserved21: u1,
                ///  DMA channel enabled to read data for the regular conversion
                RDMAEN: u1,
                reserved24: u2,
                ///  Regular channel selection
                RCH: u3,
                reserved29: u2,
                ///  Fast conversion mode selection for regular conversions
                FAST: u1,
                ///  Analog watchdog fast mode select
                AWFSEL: u1,
                padding: u1,
            }),
            ///  control register 2
            FLT1CR2: mmio.Mmio(packed struct(u32) {
                ///  Injected end of conversion interrupt enable
                JEOCIE: u1,
                ///  Regular end of conversion interrupt enable
                REOCIE: u1,
                ///  Injected data overrun interrupt enable
                JOVRIE: u1,
                ///  Regular data overrun interrupt enable
                ROVRIE: u1,
                ///  Analog watchdog interrupt enable
                AWDIE: u1,
                ///  Short-circuit detector interrupt enable
                SCDIE: u1,
                ///  Clock absence interrupt enable
                CKABIE: u1,
                reserved8: u1,
                ///  Extremes detector channel selection
                EXCH: u8,
                ///  Analog watchdog channel selection
                AWDCH: u8,
                padding: u8,
            }),
            ///  interrupt and status register
            FLT1ISR: mmio.Mmio(packed struct(u32) {
                ///  End of injected conversion flag
                JEOCF: u1,
                ///  End of regular conversion flag
                REOCF: u1,
                ///  Injected conversion overrun flag
                JOVRF: u1,
                ///  Regular conversion overrun flag
                ROVRF: u1,
                ///  Analog watchdog
                AWDF: u1,
                reserved13: u8,
                ///  Injected conversion in progress status
                JCIP: u1,
                ///  Regular conversion in progress status
                RCIP: u1,
                reserved16: u1,
                ///  Clock absence flag
                CKABF: u8,
                ///  short-circuit detector flag
                SCDF: u8,
            }),
            ///  interrupt flag clear register
            FLT1ICR: mmio.Mmio(packed struct(u32) {
                reserved2: u2,
                ///  Clear the injected conversion overrun flag
                CLRJOVRF: u1,
                ///  Clear the regular conversion overrun flag
                CLRROVRF: u1,
                reserved16: u12,
                ///  Clear the clock absence flag
                CLRCKABF: u8,
                ///  Clear the short-circuit detector flag
                CLRSCDF: u8,
            }),
            ///  injected channel group selection register
            FLT1JCHGR: mmio.Mmio(packed struct(u32) {
                ///  Injected channel group selection
                JCHG: u8,
                padding: u24,
            }),
            ///  filter control register
            FLT1FCR: mmio.Mmio(packed struct(u32) {
                ///  Integrator oversampling ratio (averaging length)
                IOSR: u8,
                reserved16: u8,
                ///  Sinc filter oversampling ratio (decimation rate)
                FOSR: u10,
                reserved29: u3,
                ///  Sinc filter order
                FORD: u3,
            }),
            ///  data register for injected group
            FLT1JDATAR: mmio.Mmio(packed struct(u32) {
                ///  Injected channel most recently converted
                JDATACH: u3,
                reserved8: u5,
                ///  Injected group conversion data
                JDATA: u24,
            }),
            ///  data register for the regular channel
            FLT1RDATAR: mmio.Mmio(packed struct(u32) {
                ///  Regular channel most recently converted
                RDATACH: u3,
                reserved4: u1,
                ///  Regular channel pending data
                RPEND: u1,
                reserved8: u3,
                ///  Regular channel conversion data
                RDATA: u24,
            }),
            reserved420: [4]u8,
            ///  analog watchdog low threshold register
            FLT1AWLTR: mmio.Mmio(packed struct(u32) {
                ///  Break signal assignment to analog watchdog low threshold event
                BKAWL: u4,
                reserved8: u4,
                ///  Analog watchdog low threshold
                AWLT: u24,
            }),
            ///  analog watchdog status register
            FLT1AWSR: mmio.Mmio(packed struct(u32) {
                ///  Analog watchdog low threshold flag
                AWLTF: u8,
                ///  Analog watchdog high threshold flag
                AWHTF: u8,
                padding: u16,
            }),
            ///  analog watchdog high threshold register
            FLT1AWHTR: mmio.Mmio(packed struct(u32) {
                ///  Break signal assignment to analog watchdog high threshold event
                BKAWH: u4,
                reserved8: u4,
                ///  Analog watchdog high threshold
                AWHT: u24,
            }),
            ///  Extremes detector maximum register
            FLT1EXMAX: mmio.Mmio(packed struct(u32) {
                ///  Extremes detector maximum data channel
                EXMAXCH: u3,
                reserved8: u5,
                ///  Extremes detector maximum value
                EXMAX: u24,
            }),
            ///  Extremes detector minimum register
            FLT1EXMIN: mmio.Mmio(packed struct(u32) {
                ///  Extremes detector minimum data channel
                EXMINCH: u3,
                reserved8: u5,
                ///  EXMIN
                EXMIN: u24,
            }),
            ///  conversion timer register
            FLT1CNVTIMR: mmio.Mmio(packed struct(u32) {
                reserved4: u4,
                ///  28-bit timer counting conversion time t = CNVCNT[27:0] / fDFSDM_CKIN
                CNVCNT: u28,
            }),
            reserved512: [68]u8,
            ///  control register 1
            FLT2CR1: mmio.Mmio(packed struct(u32) {
                ///  DFSDM enable
                DFEN: u1,
                ///  Start a conversion of the injected group of channels
                JSWSTART: u1,
                reserved3: u1,
                ///  Launch an injected conversion synchronously with the DFSDM0 JSWSTART trigger
                JSYNC: u1,
                ///  Scanning conversion mode for injected conversions
                JSCAN: u1,
                ///  DMA channel enabled to read data for the injected channel group
                JDMAEN: u1,
                reserved8: u2,
                ///  Trigger signal selection for launching injected conversions
                JEXTSEL: u3,
                reserved13: u2,
                ///  Trigger enable and trigger edge selection for injected conversions
                JEXTEN: u2,
                reserved17: u2,
                ///  Software start of a conversion on the regular channel
                RSWSTART: u1,
                ///  Continuous mode selection for regular conversions
                RCONT: u1,
                ///  Launch regular conversion synchronously with DFSDM0
                RSYNC: u1,
                reserved21: u1,
                ///  DMA channel enabled to read data for the regular conversion
                RDMAEN: u1,
                reserved24: u2,
                ///  Regular channel selection
                RCH: u3,
                reserved29: u2,
                ///  Fast conversion mode selection for regular conversions
                FAST: u1,
                ///  Analog watchdog fast mode select
                AWFSEL: u1,
                padding: u1,
            }),
            ///  control register 2
            FLT2CR2: mmio.Mmio(packed struct(u32) {
                ///  Injected end of conversion interrupt enable
                JEOCIE: u1,
                ///  Regular end of conversion interrupt enable
                REOCIE: u1,
                ///  Injected data overrun interrupt enable
                JOVRIE: u1,
                ///  Regular data overrun interrupt enable
                ROVRIE: u1,
                ///  Analog watchdog interrupt enable
                AWDIE: u1,
                ///  Short-circuit detector interrupt enable
                SCDIE: u1,
                ///  Clock absence interrupt enable
                CKABIE: u1,
                reserved8: u1,
                ///  Extremes detector channel selection
                EXCH: u8,
                ///  Analog watchdog channel selection
                AWDCH: u8,
                padding: u8,
            }),
            ///  interrupt and status register
            FLT2ISR: mmio.Mmio(packed struct(u32) {
                ///  End of injected conversion flag
                JEOCF: u1,
                ///  End of regular conversion flag
                REOCF: u1,
                ///  Injected conversion overrun flag
                JOVRF: u1,
                ///  Regular conversion overrun flag
                ROVRF: u1,
                ///  Analog watchdog
                AWDF: u1,
                reserved13: u8,
                ///  Injected conversion in progress status
                JCIP: u1,
                ///  Regular conversion in progress status
                RCIP: u1,
                reserved16: u1,
                ///  Clock absence flag
                CKABF: u8,
                ///  short-circuit detector flag
                SCDF: u8,
            }),
            ///  interrupt flag clear register
            FLT2ICR: mmio.Mmio(packed struct(u32) {
                reserved2: u2,
                ///  Clear the injected conversion overrun flag
                CLRJOVRF: u1,
                ///  Clear the regular conversion overrun flag
                CLRROVRF: u1,
                reserved16: u12,
                ///  Clear the clock absence flag
                CLRCKABF: u8,
                ///  Clear the short-circuit detector flag
                CLRSCDF: u8,
            }),
            ///  injected channel group selection register
            FLT2JCHGR: mmio.Mmio(packed struct(u32) {
                ///  Injected channel group selection
                JCHG: u8,
                padding: u24,
            }),
            ///  filter control register
            FLT2FCR: mmio.Mmio(packed struct(u32) {
                ///  Integrator oversampling ratio (averaging length)
                IOSR: u8,
                reserved16: u8,
                ///  Sinc filter oversampling ratio (decimation rate)
                FOSR: u10,
                reserved29: u3,
                ///  Sinc filter order
                FORD: u3,
            }),
            ///  data register for injected group
            FLT2JDATAR: mmio.Mmio(packed struct(u32) {
                ///  Injected channel most recently converted
                JDATACH: u3,
                reserved8: u5,
                ///  Injected group conversion data
                JDATA: u24,
            }),
            ///  data register for the regular channel
            FLT2RDATAR: mmio.Mmio(packed struct(u32) {
                ///  Regular channel most recently converted
                RDATACH: u3,
                reserved4: u1,
                ///  Regular channel pending data
                RPEND: u1,
                reserved8: u3,
                ///  Regular channel conversion data
                RDATA: u24,
            }),
            ///  analog watchdog high threshold register
            FLT2AWHTR: mmio.Mmio(packed struct(u32) {
                ///  Break signal assignment to analog watchdog high threshold event
                BKAWH: u4,
                reserved8: u4,
                ///  Analog watchdog high threshold
                AWHT: u24,
            }),
            ///  analog watchdog low threshold register
            FLT2AWLTR: mmio.Mmio(packed struct(u32) {
                ///  Break signal assignment to analog watchdog low threshold event
                BKAWL: u4,
                reserved8: u4,
                ///  Analog watchdog low threshold
                AWLT: u24,
            }),
            ///  analog watchdog status register
            FLT2AWSR: mmio.Mmio(packed struct(u32) {
                ///  Analog watchdog low threshold flag
                AWLTF: u8,
                ///  Analog watchdog high threshold flag
                AWHTF: u8,
                padding: u16,
            }),
            ///  analog watchdog clear flag register
            FLT2AWCFR: mmio.Mmio(packed struct(u32) {
                ///  Clear the analog watchdog low threshold flag
                CLRAWLTF: u8,
                ///  Clear the analog watchdog high threshold flag
                CLRAWHTF: u8,
                padding: u16,
            }),
            ///  Extremes detector maximum register
            FLT2EXMAX: mmio.Mmio(packed struct(u32) {
                ///  Extremes detector maximum data channel
                EXMAXCH: u3,
                reserved8: u5,
                ///  Extremes detector maximum value
                EXMAX: u24,
            }),
            ///  Extremes detector minimum register
            FLT2EXMIN: mmio.Mmio(packed struct(u32) {
                ///  Extremes detector minimum data channel
                EXMINCH: u3,
                reserved8: u5,
                ///  EXMIN
                EXMIN: u24,
            }),
            ///  conversion timer register
            FLT2CNVTIMR: mmio.Mmio(packed struct(u32) {
                reserved4: u4,
                ///  28-bit timer counting conversion time t = CNVCNT[27:0] / fDFSDM_CKIN
                CNVCNT: u28,
            }),
            reserved640: [68]u8,
            ///  control register 1
            FLT3CR1: mmio.Mmio(packed struct(u32) {
                ///  DFSDM enable
                DFEN: u1,
                ///  Start a conversion of the injected group of channels
                JSWSTART: u1,
                reserved3: u1,
                ///  Launch an injected conversion synchronously with the DFSDM0 JSWSTART trigger
                JSYNC: u1,
                ///  Scanning conversion mode for injected conversions
                JSCAN: u1,
                ///  DMA channel enabled to read data for the injected channel group
                JDMAEN: u1,
                reserved8: u2,
                ///  Trigger signal selection for launching injected conversions
                JEXTSEL: u3,
                reserved13: u2,
                ///  Trigger enable and trigger edge selection for injected conversions
                JEXTEN: u2,
                reserved17: u2,
                ///  Software start of a conversion on the regular channel
                RSWSTART: u1,
                ///  Continuous mode selection for regular conversions
                RCONT: u1,
                ///  Launch regular conversion synchronously with DFSDM0
                RSYNC: u1,
                reserved21: u1,
                ///  DMA channel enabled to read data for the regular conversion
                RDMAEN: u1,
                reserved24: u2,
                ///  Regular channel selection
                RCH: u3,
                reserved29: u2,
                ///  Fast conversion mode selection for regular conversions
                FAST: u1,
                ///  Analog watchdog fast mode select
                AWFSEL: u1,
                padding: u1,
            }),
            ///  control register 2
            FLT3CR2: mmio.Mmio(packed struct(u32) {
                ///  Injected end of conversion interrupt enable
                JEOCIE: u1,
                ///  Regular end of conversion interrupt enable
                REOCIE: u1,
                ///  Injected data overrun interrupt enable
                JOVRIE: u1,
                ///  Regular data overrun interrupt enable
                ROVRIE: u1,
                ///  Analog watchdog interrupt enable
                AWDIE: u1,
                ///  Short-circuit detector interrupt enable
                SCDIE: u1,
                ///  Clock absence interrupt enable
                CKABIE: u1,
                reserved8: u1,
                ///  Extremes detector channel selection
                EXCH: u8,
                ///  Analog watchdog channel selection
                AWDCH: u8,
                padding: u8,
            }),
            ///  interrupt and status register
            FLT3ISR: mmio.Mmio(packed struct(u32) {
                ///  End of injected conversion flag
                JEOCF: u1,
                ///  End of regular conversion flag
                REOCF: u1,
                ///  Injected conversion overrun flag
                JOVRF: u1,
                ///  Regular conversion overrun flag
                ROVRF: u1,
                ///  Analog watchdog
                AWDF: u1,
                reserved13: u8,
                ///  Injected conversion in progress status
                JCIP: u1,
                ///  Regular conversion in progress status
                RCIP: u1,
                reserved16: u1,
                ///  Clock absence flag
                CKABF: u8,
                ///  short-circuit detector flag
                SCDF: u8,
            }),
            ///  interrupt flag clear register
            FLT3ICR: mmio.Mmio(packed struct(u32) {
                reserved2: u2,
                ///  Clear the injected conversion overrun flag
                CLRJOVRF: u1,
                ///  Clear the regular conversion overrun flag
                CLRROVRF: u1,
                reserved16: u12,
                ///  Clear the clock absence flag
                CLRCKABF: u8,
                ///  Clear the short-circuit detector flag
                CLRSCDF: u8,
            }),
            ///  injected channel group selection register
            FLT3JCHGR: mmio.Mmio(packed struct(u32) {
                ///  Injected channel group selection
                JCHG: u8,
                padding: u24,
            }),
            ///  filter control register
            FLT3FCR: mmio.Mmio(packed struct(u32) {
                ///  Integrator oversampling ratio (averaging length)
                IOSR: u8,
                reserved16: u8,
                ///  Sinc filter oversampling ratio (decimation rate)
                FOSR: u10,
                reserved29: u3,
                ///  Sinc filter order
                FORD: u3,
            }),
            ///  data register for injected group
            FLT3JDATAR: mmio.Mmio(packed struct(u32) {
                ///  Injected channel most recently converted
                JDATACH: u3,
                reserved8: u5,
                ///  Injected group conversion data
                JDATA: u24,
            }),
            ///  data register for the regular channel
            FLT3RDATAR: mmio.Mmio(packed struct(u32) {
                ///  Regular channel most recently converted
                RDATACH: u3,
                reserved4: u1,
                ///  Regular channel pending data
                RPEND: u1,
                reserved8: u3,
                ///  Regular channel conversion data
                RDATA: u24,
            }),
            ///  analog watchdog high threshold register
            FLT3AWHTR: mmio.Mmio(packed struct(u32) {
                ///  Break signal assignment to analog watchdog high threshold event
                BKAWH: u4,
                reserved8: u4,
                ///  Analog watchdog high threshold
                AWHT: u24,
            }),
            ///  analog watchdog low threshold register
            FLT3AWLTR: mmio.Mmio(packed struct(u32) {
                ///  Break signal assignment to analog watchdog low threshold event
                BKAWL: u4,
                reserved8: u4,
                ///  Analog watchdog low threshold
                AWLT: u24,
            }),
            ///  analog watchdog status register
            FLT3AWSR: mmio.Mmio(packed struct(u32) {
                ///  Analog watchdog low threshold flag
                AWLTF: u8,
                ///  Analog watchdog high threshold flag
                AWHTF: u8,
                padding: u16,
            }),
            ///  analog watchdog clear flag register
            FLT3AWCFR: mmio.Mmio(packed struct(u32) {
                ///  Clear the analog watchdog low threshold flag
                CLRAWLTF: u8,
                ///  Clear the analog watchdog high threshold flag
                CLRAWHTF: u8,
                padding: u16,
            }),
            ///  Extremes detector maximum register
            FLT3EXMAX: mmio.Mmio(packed struct(u32) {
                ///  Extremes detector maximum data channel
                EXMAXCH: u3,
                reserved8: u5,
                ///  Extremes detector maximum value
                EXMAX: u24,
            }),
            ///  Extremes detector minimum register
            FLT3EXMIN: mmio.Mmio(packed struct(u32) {
                ///  Extremes detector minimum data channel
                EXMINCH: u3,
                reserved8: u5,
                ///  EXMIN
                EXMIN: u24,
            }),
            ///  conversion timer register
            FLT3CNVTIMR: mmio.Mmio(packed struct(u32) {
                reserved4: u4,
                ///  28-bit timer counting conversion time t = CNVCNT[27:0] / fDFSDM_CKIN
                CNVCNT: u28,
            }),
        };

        ///  GTZC_TZIC
        pub const GTZC_TZIC = extern struct {
            ///  TZIC interrupt enable register 1
            IER1: mmio.Mmio(packed struct(u32) {
                ///  TIM2IE
                TIM2IE: u1,
                ///  TIM3IE
                TIM3IE: u1,
                ///  TIM4IE
                TIM4IE: u1,
                ///  TIM5IE
                TIM5IE: u1,
                ///  TIM6IE
                TIM6IE: u1,
                ///  TIM7IE
                TIM7IE: u1,
                ///  WWDGIE
                WWDGIE: u1,
                ///  IWDGIE
                IWDGIE: u1,
                ///  SPI2IE
                SPI2IE: u1,
                ///  SPI3IE
                SPI3IE: u1,
                ///  USART2IE
                USART2IE: u1,
                ///  USART3IE
                USART3IE: u1,
                ///  UART4IE
                UART4IE: u1,
                ///  UART5IE
                UART5IE: u1,
                ///  I2C1IE
                I2C1IE: u1,
                ///  I2C2IE
                I2C2IE: u1,
                ///  I2C3IE
                I2C3IE: u1,
                ///  CRSIE
                CRSIE: u1,
                ///  DACIE
                DACIE: u1,
                ///  OPAMPIE
                OPAMPIE: u1,
                ///  LPTIM1IE
                LPTIM1IE: u1,
                ///  LPUART1IE
                LPUART1IE: u1,
                ///  I2C4IE
                I2C4IE: u1,
                ///  LPTIM2IE
                LPTIM2IE: u1,
                ///  LPTIM3IE
                LPTIM3IE: u1,
                ///  FDCAN1IE
                FDCAN1IE: u1,
                ///  USBFSIE
                USBFSIE: u1,
                ///  UCPD1IE
                UCPD1IE: u1,
                ///  VREFBUFIE
                VREFBUFIE: u1,
                ///  COMPIE
                COMPIE: u1,
                ///  TIM1IE
                TIM1IE: u1,
                ///  SPI1IE
                SPI1IE: u1,
            }),
            ///  TZIC interrupt enable register 2
            IER2: mmio.Mmio(packed struct(u32) {
                ///  TIM8IE
                TIM8IE: u1,
                ///  USART1IE
                USART1IE: u1,
                ///  TIM15IE
                TIM15IE: u1,
                ///  TIM16IE
                TIM16IE: u1,
                ///  TIM17IE
                TIM17IE: u1,
                ///  SAI1IE
                SAI1IE: u1,
                ///  SAI2IE
                SAI2IE: u1,
                ///  DFSDM1IE
                DFSDM1IE: u1,
                ///  CRCIE
                CRCIE: u1,
                ///  TSCIE
                TSCIE: u1,
                ///  ICACHEIE
                ICACHEIE: u1,
                ///  ADCIE
                ADCIE: u1,
                ///  AESIE
                AESIE: u1,
                ///  HASHIE
                HASHIE: u1,
                ///  RNGIE
                RNGIE: u1,
                ///  PKAIE
                PKAIE: u1,
                ///  SDMMC1IE
                SDMMC1IE: u1,
                ///  FMC_REGIE
                FMC_REGIE: u1,
                ///  OCTOSPI1_REGIE
                OCTOSPI1_REGIE: u1,
                ///  RTCIE
                RTCIE: u1,
                ///  PWRIE
                PWRIE: u1,
                ///  SYSCFGIE
                SYSCFGIE: u1,
                ///  DMA1IE
                DMA1IE: u1,
                ///  DMA2IE
                DMA2IE: u1,
                ///  DMAMUX1IE
                DMAMUX1IE: u1,
                ///  RCCIE
                RCCIE: u1,
                ///  FLASHIE
                FLASHIE: u1,
                ///  FLASH_REGIE
                FLASH_REGIE: u1,
                ///  EXTIIE
                EXTIIE: u1,
                ///  OTFDEC1IE
                OTFDEC1IE: u1,
                padding: u2,
            }),
            ///  TZIC interrupt enable register 3
            IER3: mmio.Mmio(packed struct(u32) {
                ///  TZSCIE
                TZSCIE: u1,
                ///  TZICIE
                TZICIE: u1,
                ///  MPCWM1IE
                MPCWM1IE: u1,
                ///  MPCWM2IE
                MPCWM2IE: u1,
                ///  MPCBB1IE
                MPCBB1IE: u1,
                ///  MPCBB1_REGIE
                MPCBB1_REGIE: u1,
                ///  MPCBB2IE
                MPCBB2IE: u1,
                ///  MPCBB2_REGIE
                MPCBB2_REGIE: u1,
                padding: u24,
            }),
            reserved16: [4]u8,
            ///  TZIC interrupt status register 1
            SR1: mmio.Mmio(packed struct(u32) {
                ///  TIM2F
                TIM2F: u1,
                ///  TIM3F
                TIM3F: u1,
                ///  TIM4F
                TIM4F: u1,
                ///  TIM5F
                TIM5F: u1,
                ///  TIM6F
                TIM6F: u1,
                ///  TIM7F
                TIM7F: u1,
                ///  WWDGF
                WWDGF: u1,
                ///  IWDGF
                IWDGF: u1,
                ///  SPI2F
                SPI2F: u1,
                ///  SPI3F
                SPI3F: u1,
                ///  USART2F
                USART2F: u1,
                ///  USART3F
                USART3F: u1,
                ///  UART4F
                UART4F: u1,
                ///  UART5F
                UART5F: u1,
                ///  I2C1F
                I2C1F: u1,
                ///  I2C2F
                I2C2F: u1,
                ///  I2C3F
                I2C3F: u1,
                ///  CRSF
                CRSF: u1,
                ///  DACF
                DACF: u1,
                ///  OPAMPF
                OPAMPF: u1,
                ///  LPTIM1F
                LPTIM1F: u1,
                ///  LPUART1F
                LPUART1F: u1,
                ///  I2C4F
                I2C4F: u1,
                ///  LPTIM2F
                LPTIM2F: u1,
                ///  LPTIM3F
                LPTIM3F: u1,
                ///  FDCAN1F
                FDCAN1F: u1,
                ///  USBFSF
                USBFSF: u1,
                ///  UCPD1F
                UCPD1F: u1,
                ///  VREFBUFF
                VREFBUFF: u1,
                ///  COMPF
                COMPF: u1,
                ///  TIM1F
                TIM1F: u1,
                ///  SPI1F
                SPI1F: u1,
            }),
            ///  TZIC interrupt status register 2
            SR2: mmio.Mmio(packed struct(u32) {
                ///  TIM8F
                TIM8F: u1,
                ///  USART1F
                USART1F: u1,
                ///  TIM15F
                TIM15F: u1,
                ///  TIM16F
                TIM16F: u1,
                ///  TIM17F
                TIM17F: u1,
                ///  SAI1F
                SAI1F: u1,
                ///  SAI2F
                SAI2F: u1,
                ///  DFSDM1F
                DFSDM1F: u1,
                ///  CRCF
                CRCF: u1,
                ///  TSCF
                TSCF: u1,
                ///  ICACHEF
                ICACHEF: u1,
                ///  ADCF
                ADCF: u1,
                ///  AESF
                AESF: u1,
                ///  HASHF
                HASHF: u1,
                ///  RNGF
                RNGF: u1,
                ///  PKAF
                PKAF: u1,
                ///  SDMMC1F
                SDMMC1F: u1,
                ///  FMC_REGF
                FMC_REGF: u1,
                ///  OCTOSPI1_REGF
                OCTOSPI1_REGF: u1,
                ///  RTCF
                RTCF: u1,
                ///  PWRF
                PWRF: u1,
                ///  SYSCFGF
                SYSCFGF: u1,
                ///  DMA1F
                DMA1F: u1,
                ///  DMA2F
                DMA2F: u1,
                ///  DMAMUX1F
                DMAMUX1F: u1,
                ///  RCCF
                RCCF: u1,
                ///  FLASHF
                FLASHF: u1,
                ///  FLASH_REGF
                FLASH_REGF: u1,
                ///  EXTIF
                EXTIF: u1,
                ///  OTFDEC1F
                OTFDEC1F: u1,
                padding: u2,
            }),
            ///  TZIC interrupt status register 3
            SR3: mmio.Mmio(packed struct(u32) {
                ///  TZSCF
                TZSCF: u1,
                ///  TZICF
                TZICF: u1,
                ///  MPCWM1F
                MPCWM1F: u1,
                ///  MPCWM2F
                MPCWM2F: u1,
                ///  MPCBB1F
                MPCBB1F: u1,
                ///  MPCBB1_REGF
                MPCBB1_REGF: u1,
                ///  MPCBB2F
                MPCBB2F: u1,
                ///  MPCBB2_REGF
                MPCBB2_REGF: u1,
                padding: u24,
            }),
            reserved32: [4]u8,
            ///  TZIC interrupt clear register 1
            FCR1: mmio.Mmio(packed struct(u32) {
                ///  TIM2FC
                TIM2FC: u1,
                ///  TIM3FC
                TIM3FC: u1,
                ///  TIM4FC
                TIM4FC: u1,
                ///  TIM5FC
                TIM5FC: u1,
                ///  TIM6FC
                TIM6FC: u1,
                ///  TIM7FC
                TIM7FC: u1,
                ///  WWDGFC
                WWDGFC: u1,
                ///  IWDGFC
                IWDGFC: u1,
                ///  SPI2FC
                SPI2FC: u1,
                ///  SPI3FC
                SPI3FC: u1,
                ///  USART2FC
                USART2FC: u1,
                ///  USART3FC
                USART3FC: u1,
                ///  UART4FC
                UART4FC: u1,
                ///  UART5FC
                UART5FC: u1,
                ///  I2C1FC
                I2C1FC: u1,
                ///  I2C2FC
                I2C2FC: u1,
                ///  I2C3FC
                I2C3FC: u1,
                ///  CRSFC
                CRSFC: u1,
                ///  DACFC
                DACFC: u1,
                ///  OPAMPFC
                OPAMPFC: u1,
                ///  LPTIM1FC
                LPTIM1FC: u1,
                ///  LPUART1FC
                LPUART1FC: u1,
                ///  I2C4FC
                I2C4FC: u1,
                ///  LPTIM2FC
                LPTIM2FC: u1,
                ///  LPTIM3FC
                LPTIM3FC: u1,
                ///  FDCAN1FC
                FDCAN1FC: u1,
                ///  USBFSFC
                USBFSFC: u1,
                ///  UCPD1FC
                UCPD1FC: u1,
                ///  VREFBUFFC
                VREFBUFFC: u1,
                ///  COMPFC
                COMPFC: u1,
                ///  TIM1FC
                TIM1FC: u1,
                ///  SPI1FC
                SPI1FC: u1,
            }),
            ///  TZIC interrupt clear register 2
            FCR2: mmio.Mmio(packed struct(u32) {
                ///  TIM8FC
                TIM8FC: u1,
                ///  USART1FC
                USART1FC: u1,
                ///  TIM15FC
                TIM15FC: u1,
                ///  TIM16FC
                TIM16FC: u1,
                ///  TIM17FC
                TIM17FC: u1,
                ///  SAI1FC
                SAI1FC: u1,
                ///  SAI2FC
                SAI2FC: u1,
                ///  DFSDM1FC
                DFSDM1FC: u1,
                ///  CRCFC
                CRCFC: u1,
                ///  TSCFC
                TSCFC: u1,
                ///  ICACHEFC
                ICACHEFC: u1,
                ///  ADCFC
                ADCFC: u1,
                ///  AESFC
                AESFC: u1,
                ///  HASHFC
                HASHFC: u1,
                ///  RNGFC
                RNGFC: u1,
                ///  PKAFC
                PKAFC: u1,
                ///  SDMMC1FC
                SDMMC1FC: u1,
                ///  FMC_REGFC
                FMC_REGFC: u1,
                ///  OCTOSPI1_REGFC
                OCTOSPI1_REGFC: u1,
                ///  RTCFC
                RTCFC: u1,
                ///  PWRFC
                PWRFC: u1,
                ///  SYSCFGFC
                SYSCFGFC: u1,
                ///  DMA1FC
                DMA1FC: u1,
                ///  DMA2FC
                DMA2FC: u1,
                ///  DMAMUX1FC
                DMAMUX1FC: u1,
                ///  RCCFC
                RCCFC: u1,
                ///  FLASHFC
                FLASHFC: u1,
                ///  FLASH_REGFC
                FLASH_REGFC: u1,
                ///  EXTIFC
                EXTIFC: u1,
                ///  OTFDEC1FC
                OTFDEC1FC: u1,
                padding: u2,
            }),
            ///  TZIC interrupt clear register 3
            FCR3: mmio.Mmio(packed struct(u32) {
                ///  TZSCFC
                TZSCFC: u1,
                ///  TZICFC
                TZICFC: u1,
                ///  MPCWM1FC
                MPCWM1FC: u1,
                ///  MPCWM2FC
                MPCWM2FC: u1,
                ///  MPCBB1FC
                MPCBB1FC: u1,
                ///  MPCBB1_REGFC
                MPCBB1_REGFC: u1,
                ///  MPCBB2FC
                MPCBB2FC: u1,
                ///  MPCBB2_REGFC
                MPCBB2_REGFC: u1,
                padding: u24,
            }),
        };

        ///  Direct memory access Multiplexer
        pub const DMAMUX1 = extern struct {
            ///  DMA Multiplexer Channel 0 Control register
            C0CR: mmio.Mmio(packed struct(u32) {
                ///  DMA Request ID
                DMAREQ_ID: u7,
                reserved8: u1,
                ///  Synchronization Overrun Interrupt Enable
                SOIE: u1,
                ///  Event Generation Enable
                EGE: u1,
                reserved16: u6,
                ///  Synchronization enable
                SE: u1,
                ///  Sync polarity
                SPOL: u2,
                ///  Nb request
                NBREQ: u5,
                ///  SYNC_ID
                SYNC_ID: u5,
                padding: u3,
            }),
            ///  DMA Multiplexer Channel 1 Control register
            C1CR: mmio.Mmio(packed struct(u32) {
                ///  DMA Request ID
                DMAREQ_ID: u7,
                reserved8: u1,
                ///  Synchronization Overrun Interrupt Enable
                SOIE: u1,
                ///  Event Generation Enable
                EGE: u1,
                reserved16: u6,
                ///  Synchronization enable
                SE: u1,
                ///  Sync polarity
                SPOL: u2,
                ///  Nb request
                NBREQ: u5,
                ///  SYNC_ID
                SYNC_ID: u5,
                padding: u3,
            }),
            ///  DMA Multiplexer Channel 2 Control register
            C2CR: mmio.Mmio(packed struct(u32) {
                ///  DMA Request ID
                DMAREQ_ID: u7,
                reserved8: u1,
                ///  Synchronization Overrun Interrupt Enable
                SOIE: u1,
                ///  Event Generation Enable
                EGE: u1,
                reserved16: u6,
                ///  Synchronization enable
                SE: u1,
                ///  Sync polarity
                SPOL: u2,
                ///  Nb request
                NBREQ: u5,
                ///  SYNC_ID
                SYNC_ID: u5,
                padding: u3,
            }),
            ///  DMA Multiplexer Channel 3 Control register
            C3CR: mmio.Mmio(packed struct(u32) {
                ///  DMA Request ID
                DMAREQ_ID: u7,
                reserved8: u1,
                ///  Synchronization Overrun Interrupt Enable
                SOIE: u1,
                ///  Event Generation Enable
                EGE: u1,
                reserved16: u6,
                ///  Synchronization enable
                SE: u1,
                ///  Sync polarity
                SPOL: u2,
                ///  Nb request
                NBREQ: u5,
                ///  SYNC_ID
                SYNC_ID: u5,
                padding: u3,
            }),
            ///  DMA Multiplexer Channel 4 Control register
            C4CR: mmio.Mmio(packed struct(u32) {
                ///  DMA Request ID
                DMAREQ_ID: u7,
                reserved8: u1,
                ///  Synchronization Overrun Interrupt Enable
                SOIE: u1,
                ///  Event Generation Enable
                EGE: u1,
                reserved16: u6,
                ///  Synchronization enable
                SE: u1,
                ///  Sync polarity
                SPOL: u2,
                ///  Nb request
                NBREQ: u5,
                ///  SYNC_ID
                SYNC_ID: u5,
                padding: u3,
            }),
            ///  DMA Multiplexer Channel 5 Control register
            C5CR: mmio.Mmio(packed struct(u32) {
                ///  DMA Request ID
                DMAREQ_ID: u7,
                reserved8: u1,
                ///  Synchronization Overrun Interrupt Enable
                OIE: u1,
                ///  Event Generation Enable
                EGE: u1,
                reserved16: u6,
                ///  Synchronization enable
                SE: u1,
                ///  Sync polarity
                SPOL: u2,
                ///  Nb request
                NBREQ: u5,
                ///  SYNC_ID
                SYNC_ID: u5,
                padding: u3,
            }),
            ///  DMA Multiplexer Channel 6 Control register
            C6CR: mmio.Mmio(packed struct(u32) {
                ///  DMA Request ID
                DMAREQ_ID: u7,
                reserved8: u1,
                ///  Synchronization Overrun Interrupt Enable
                SOIE: u1,
                ///  Event Generation Enable
                EGE: u1,
                reserved16: u6,
                ///  Synchronization enable
                SE: u1,
                ///  Sync polarity
                SPOL: u2,
                ///  Nb request
                NBREQ: u5,
                ///  SYNC_ID
                SYNC_ID: u5,
                padding: u3,
            }),
            ///  DMA Multiplexer Channel 7 Control register
            C7CR: mmio.Mmio(packed struct(u32) {
                ///  DMA Request ID
                DMAREQ_ID: u7,
                reserved8: u1,
                ///  Synchronization Overrun Interrupt Enable
                SOIE: u1,
                ///  Event Generation Enable
                EGE: u1,
                reserved16: u6,
                ///  Synchronization enable
                SE: u1,
                ///  Sync polarity
                SPOL: u2,
                ///  Nb request
                NBREQ: u5,
                ///  SYNC_ID
                SYNC_ID: u5,
                padding: u3,
            }),
            ///  DMA Multiplexer Channel 8 Control register
            C8CR: mmio.Mmio(packed struct(u32) {
                ///  DMA Request ID
                DMAREQ_ID: u7,
                reserved8: u1,
                ///  Synchronization Overrun Interrupt Enable
                SOIE: u1,
                ///  Event Generation Enable
                EGE: u1,
                reserved16: u6,
                ///  Synchronization enable
                SE: u1,
                ///  Sync polarity
                SPOL: u2,
                ///  Nb request
                NBREQ: u5,
                ///  SYNC_ID
                SYNC_ID: u5,
                padding: u3,
            }),
            ///  DMA Multiplexer Channel 9 Control register
            C9CR: mmio.Mmio(packed struct(u32) {
                ///  DMA Request ID
                DMAREQ_ID: u7,
                reserved8: u1,
                ///  Synchronization Overrun Interrupt Enable
                SOIE: u1,
                ///  Event Generation Enable
                EGE: u1,
                reserved16: u6,
                ///  Synchronization enable
                SE: u1,
                ///  Sync polarity
                SPOL: u2,
                ///  Nb request
                NBREQ: u5,
                ///  SYNC_ID
                SYNC_ID: u5,
                padding: u3,
            }),
            ///  DMA Multiplexer Channel 10 Control register
            C10CR: mmio.Mmio(packed struct(u32) {
                ///  DMA Request ID
                DMAREQ_ID: u7,
                reserved8: u1,
                ///  Synchronization Overrun Interrupt Enable
                SOIE: u1,
                ///  Event Generation Enable
                EGE: u1,
                reserved16: u6,
                ///  Synchronization enable
                SE: u1,
                ///  Sync polarity
                SPOL: u2,
                ///  Nb request
                NBREQ: u5,
                ///  SYNC_ID
                SYNC_ID: u5,
                padding: u3,
            }),
            ///  DMA Multiplexer Channel 11 Control register
            C11CR: mmio.Mmio(packed struct(u32) {
                ///  DMA Request ID
                DMAREQ_ID: u7,
                reserved8: u1,
                ///  Synchronization Overrun Interrupt Enable
                SOIE: u1,
                ///  Event Generation Enable
                EGE: u1,
                reserved16: u6,
                ///  Synchronization enable
                SE: u1,
                ///  Sync polarity
                SPOL: u2,
                ///  Nb request
                NBREQ: u5,
                ///  SYNC_ID
                SYNC_ID: u5,
                padding: u3,
            }),
            ///  DMA Multiplexer Channel 12 Control register
            C12CR: mmio.Mmio(packed struct(u32) {
                ///  DMA Request ID
                DMAREQ_ID: u7,
                reserved8: u1,
                ///  Synchronization Overrun Interrupt Enable
                SOIE: u1,
                ///  Event Generation Enable
                EGE: u1,
                reserved16: u6,
                ///  Synchronization enable
                SE: u1,
                ///  Sync polarity
                SPOL: u2,
                ///  Nb request
                NBREQ: u5,
                ///  SYNC_ID
                SYNC_ID: u5,
                padding: u3,
            }),
            ///  DMA Multiplexer Channel 13 Control register
            C13CR: mmio.Mmio(packed struct(u32) {
                ///  DMA Request ID
                DMAREQ_ID: u7,
                reserved8: u1,
                ///  Synchronization Overrun Interrupt Enable
                SOIE: u1,
                ///  Event Generation Enable
                EGE: u1,
                reserved16: u6,
                ///  Synchronization enable
                SE: u1,
                ///  Sync polarity
                SPOL: u2,
                ///  Nb request
                NBREQ: u5,
                ///  SYNC_ID
                SYNC_ID: u5,
                padding: u3,
            }),
            ///  DMA Multiplexer Channel 10 Control register
            C14CR: mmio.Mmio(packed struct(u32) {
                ///  DMA request identification
                DMAREQ_ID: u7,
                reserved8: u1,
                ///  Synchronization overrun interrupt enable
                SOIE: u1,
                ///  Event generation enable
                EGE: u1,
                reserved16: u6,
                ///  Synchronization enable
                SE: u1,
                ///  Synchronization polarity
                SPOL: u2,
                ///  Number of DMA requests minus 1 to forward
                NBREQ: u5,
                ///  Synchronization identification
                SYNC_ID: u5,
                padding: u3,
            }),
            ///  DMA Multiplexer Channel 10 Control register
            C15CR: mmio.Mmio(packed struct(u32) {
                ///  DMA request identification
                DMAREQ_ID: u7,
                reserved8: u1,
                ///  Synchronization overrun interrupt enable
                SOIE: u1,
                ///  Event generation enable
                EGE: u1,
                reserved16: u6,
                ///  Synchronization enable
                SE: u1,
                ///  Synchronization polarity
                SPOL: u2,
                ///  Number of DMA requests minus 1 to forward
                NBREQ: u5,
                ///  Synchronization identification
                SYNC_ID: u5,
                padding: u3,
            }),
            reserved128: [64]u8,
            ///  DMA Multiplexer Channel Status register
            CSR: mmio.Mmio(packed struct(u32) {
                ///  Synchronization Overrun Flag 0
                SOF0: u1,
                ///  Synchronization Overrun Flag 1
                SOF1: u1,
                ///  Synchronization Overrun Flag 2
                SOF2: u1,
                ///  Synchronization Overrun Flag 3
                SOF3: u1,
                ///  Synchronization Overrun Flag 4
                SOF4: u1,
                ///  Synchronization Overrun Flag 5
                SOF5: u1,
                ///  Synchronization Overrun Flag 6
                SOF6: u1,
                ///  Synchronization Overrun Flag 7
                SOF7: u1,
                ///  Synchronization Overrun Flag 8
                SOF8: u1,
                ///  Synchronization Overrun Flag 9
                SOF9: u1,
                ///  Synchronization Overrun Flag 10
                SOF10: u1,
                ///  Synchronization Overrun Flag 11
                SOF11: u1,
                ///  Synchronization Overrun Flag 12
                SOF12: u1,
                ///  Synchronization Overrun Flag 13
                SOF13: u1,
                ///  Synchronization Overrun Flag 13
                SOF14: u1,
                ///  Synchronization Overrun Flag 13
                SOF15: u1,
                padding: u16,
            }),
            ///  DMA Channel Clear Flag Register
            CCFR: mmio.Mmio(packed struct(u32) {
                ///  Synchronization Clear Overrun Flag 0
                CSOF0: u1,
                ///  Synchronization Clear Overrun Flag 1
                CSOF1: u1,
                ///  Synchronization Clear Overrun Flag 2
                CSOF2: u1,
                ///  Synchronization Clear Overrun Flag 3
                CSOF3: u1,
                ///  Synchronization Clear Overrun Flag 4
                CSOF4: u1,
                ///  Synchronization Clear Overrun Flag 5
                CSOF5: u1,
                ///  Synchronization Clear Overrun Flag 6
                CSOF6: u1,
                ///  Synchronization Clear Overrun Flag 7
                CSOF7: u1,
                ///  Synchronization Clear Overrun Flag 8
                CSOF8: u1,
                ///  Synchronization Clear Overrun Flag 9
                CSOF9: u1,
                ///  Synchronization Clear Overrun Flag 10
                CSOF10: u1,
                ///  Synchronization Clear Overrun Flag 11
                CSOF11: u1,
                ///  Synchronization Clear Overrun Flag 12
                CSOF12: u1,
                ///  Synchronization Clear Overrun Flag 13
                CSOF13: u1,
                ///  Synchronization Clear Overrun Flag 13
                CSOF14: u1,
                ///  Synchronization Clear Overrun Flag 13
                CSOF15: u1,
                padding: u16,
            }),
            reserved256: [120]u8,
            ///  DMA Request Generator 0 Control Register
            RG0CR: mmio.Mmio(packed struct(u32) {
                ///  Signal ID
                SIG_ID: u5,
                reserved8: u3,
                ///  Overrun Interrupt Enable
                OIE: u1,
                reserved16: u7,
                ///  Generation Enable
                GE: u1,
                ///  Generation Polarity
                GPOL: u2,
                ///  Number of Request
                GNBREQ: u5,
                padding: u8,
            }),
            ///  DMA Request Generator 1 Control Register
            RG1CR: mmio.Mmio(packed struct(u32) {
                ///  Signal ID
                SIG_ID: u5,
                reserved8: u3,
                ///  Overrun Interrupt Enable
                OIE: u1,
                reserved16: u7,
                ///  Generation Enable
                GE: u1,
                ///  Generation Polarity
                GPOL: u2,
                ///  Number of Request
                GNBREQ: u5,
                padding: u8,
            }),
            ///  DMA Request Generator 2 Control Register
            RG2CR: mmio.Mmio(packed struct(u32) {
                ///  Signal ID
                SIG_ID: u5,
                reserved8: u3,
                ///  Overrun Interrupt Enable
                OIE: u1,
                reserved16: u7,
                ///  Generation Enable
                GE: u1,
                ///  Generation Polarity
                GPOL: u2,
                ///  Number of Request
                GNBREQ: u5,
                padding: u8,
            }),
            ///  DMA Request Generator 3 Control Register
            RG3CR: mmio.Mmio(packed struct(u32) {
                ///  Signal ID
                SIG_ID: u5,
                reserved8: u3,
                ///  Overrun Interrupt Enable
                OIE: u1,
                reserved16: u7,
                ///  Generation Enable
                GE: u1,
                ///  Generation Polarity
                GPOL: u2,
                ///  Number of Request
                GNBREQ: u5,
                padding: u8,
            }),
            reserved320: [48]u8,
            ///  DMA Request Generator Status Register
            RGSR: mmio.Mmio(packed struct(u32) {
                ///  Generator Overrun Flag 0
                OF0: u1,
                ///  Generator Overrun Flag 1
                OF1: u1,
                ///  Generator Overrun Flag 2
                OF2: u1,
                ///  Generator Overrun Flag 3
                OF3: u1,
                padding: u28,
            }),
            ///  DMA Request Generator Clear Flag Register
            RGCFR: mmio.Mmio(packed struct(u32) {
                ///  Generator Clear Overrun Flag 0
                CSOF0: u1,
                ///  Generator Clear Overrun Flag 1
                CSOF1: u1,
                ///  Generator Clear Overrun Flag 2
                CSOF2: u1,
                ///  Generator Clear Overrun Flag 3
                CSOF3: u1,
                padding: u28,
            }),
        };

        ///  Hash processor
        pub const HASH = extern struct {
            ///  control register
            CR: mmio.Mmio(packed struct(u32) {
                reserved2: u2,
                ///  Initialize message digest calculation
                INIT: u1,
                ///  DMA enable
                DMAE: u1,
                ///  Data type selection
                DATATYPE: u2,
                ///  Mode selection
                MODE: u1,
                ///  Algorithm selection
                ALGO0: u1,
                ///  Number of words already pushed
                NBW: u4,
                ///  DIN not empty
                DINNE: u1,
                ///  Multiple DMA Transfers
                MDMAT: u1,
                reserved16: u2,
                ///  Long key selection
                LKEY: u1,
                reserved18: u1,
                ///  Algorithm selection
                ALGO1: u1,
                padding: u13,
            }),
            ///  data input register
            DIN: mmio.Mmio(packed struct(u32) {
                ///  Data input
                DATAIN: u32,
            }),
            ///  start register
            STR: mmio.Mmio(packed struct(u32) {
                ///  Number of valid bits in the last word of the message
                NBLW: u5,
                reserved8: u3,
                ///  Digest calculation
                DCAL: u1,
                padding: u23,
            }),
            ///  HASH aliased digest register 0
            HRA0: mmio.Mmio(packed struct(u32) {
                ///  H0
                H0: u32,
            }),
            ///  HASH aliased digest register 1
            HRA1: mmio.Mmio(packed struct(u32) {
                ///  H1
                H1: u32,
            }),
            ///  HASH aliased digest register 2
            HRA2: mmio.Mmio(packed struct(u32) {
                ///  H2
                H2: u32,
            }),
            ///  HASH aliased digest register 3
            HRA3: mmio.Mmio(packed struct(u32) {
                ///  H3
                H3: u32,
            }),
            ///  HASH aliased digest register 4
            HRA4: mmio.Mmio(packed struct(u32) {
                ///  H4
                H4: u32,
            }),
            ///  interrupt enable register
            IMR: mmio.Mmio(packed struct(u32) {
                ///  Data input interrupt enable
                DINIE: u1,
                ///  Digest calculation completion interrupt enable
                DCIE: u1,
                padding: u30,
            }),
            ///  status register
            SR: mmio.Mmio(packed struct(u32) {
                ///  Data input interrupt status
                DINIS: u1,
                ///  Digest calculation completion interrupt status
                DCIS: u1,
                ///  DMA Status
                DMAS: u1,
                ///  Busy bit
                BUSY: u1,
                padding: u28,
            }),
            reserved248: [208]u8,
            ///  context swap registers
            CSR0: mmio.Mmio(packed struct(u32) {
                ///  CSR0
                CSR0: u32,
            }),
            ///  context swap registers
            CSR1: mmio.Mmio(packed struct(u32) {
                ///  CSR1
                CSR1: u32,
            }),
            ///  context swap registers
            CSR2: mmio.Mmio(packed struct(u32) {
                ///  CSR2
                CSR2: u32,
            }),
            ///  context swap registers
            CSR3: mmio.Mmio(packed struct(u32) {
                ///  CSR3
                CSR3: u32,
            }),
            ///  context swap registers
            CSR4: mmio.Mmio(packed struct(u32) {
                ///  CSR4
                CSR4: u32,
            }),
            ///  context swap registers
            CSR5: mmio.Mmio(packed struct(u32) {
                ///  CSR5
                CSR5: u32,
            }),
            ///  context swap registers
            CSR6: mmio.Mmio(packed struct(u32) {
                ///  CSR6
                CSR6: u32,
            }),
            ///  context swap registers
            CSR7: mmio.Mmio(packed struct(u32) {
                ///  CSR7
                CSR7: u32,
            }),
            ///  context swap registers
            CSR8: mmio.Mmio(packed struct(u32) {
                ///  CSR8
                CSR8: u32,
            }),
            ///  context swap registers
            CSR9: mmio.Mmio(packed struct(u32) {
                ///  CSR9
                CSR9: u32,
            }),
            ///  context swap registers
            CSR10: mmio.Mmio(packed struct(u32) {
                ///  CSR10
                CSR10: u32,
            }),
            ///  context swap registers
            CSR11: mmio.Mmio(packed struct(u32) {
                ///  CSR11
                CSR11: u32,
            }),
            ///  context swap registers
            CSR12: mmio.Mmio(packed struct(u32) {
                ///  CSR12
                CSR12: u32,
            }),
            ///  context swap registers
            CSR13: mmio.Mmio(packed struct(u32) {
                ///  CSR13
                CSR13: u32,
            }),
            ///  context swap registers
            CSR14: mmio.Mmio(packed struct(u32) {
                ///  CSR14
                CSR14: u32,
            }),
            ///  context swap registers
            CSR15: mmio.Mmio(packed struct(u32) {
                ///  CSR15
                CSR15: u32,
            }),
            ///  context swap registers
            CSR16: mmio.Mmio(packed struct(u32) {
                ///  CSR16
                CSR16: u32,
            }),
            ///  context swap registers
            CSR17: mmio.Mmio(packed struct(u32) {
                ///  CSR17
                CSR17: u32,
            }),
            ///  context swap registers
            CSR18: mmio.Mmio(packed struct(u32) {
                ///  CSR18
                CSR18: u32,
            }),
            ///  context swap registers
            CSR19: mmio.Mmio(packed struct(u32) {
                ///  CSR19
                CSR19: u32,
            }),
            ///  context swap registers
            CSR20: mmio.Mmio(packed struct(u32) {
                ///  CSR20
                CSR20: u32,
            }),
            ///  context swap registers
            CSR21: mmio.Mmio(packed struct(u32) {
                ///  CSR21
                CSR21: u32,
            }),
            ///  context swap registers
            CSR22: mmio.Mmio(packed struct(u32) {
                ///  CSR22
                CSR22: u32,
            }),
            ///  context swap registers
            CSR23: mmio.Mmio(packed struct(u32) {
                ///  CSR23
                CSR23: u32,
            }),
            ///  context swap registers
            CSR24: mmio.Mmio(packed struct(u32) {
                ///  CSR24
                CSR24: u32,
            }),
            ///  context swap registers
            CSR25: mmio.Mmio(packed struct(u32) {
                ///  CSR25
                CSR25: u32,
            }),
            ///  context swap registers
            CSR26: mmio.Mmio(packed struct(u32) {
                ///  CSR26
                CSR26: u32,
            }),
            ///  context swap registers
            CSR27: mmio.Mmio(packed struct(u32) {
                ///  CSR27
                CSR27: u32,
            }),
            ///  context swap registers
            CSR28: mmio.Mmio(packed struct(u32) {
                ///  CSR28
                CSR28: u32,
            }),
            ///  context swap registers
            CSR29: mmio.Mmio(packed struct(u32) {
                ///  CSR29
                CSR29: u32,
            }),
            ///  context swap registers
            CSR30: mmio.Mmio(packed struct(u32) {
                ///  CSR30
                CSR30: u32,
            }),
            ///  context swap registers
            CSR31: mmio.Mmio(packed struct(u32) {
                ///  CSR31
                CSR31: u32,
            }),
            ///  context swap registers
            CSR32: mmio.Mmio(packed struct(u32) {
                ///  CSR32
                CSR32: u32,
            }),
            ///  context swap registers
            CSR33: mmio.Mmio(packed struct(u32) {
                ///  CSR33
                CSR33: u32,
            }),
            ///  context swap registers
            CSR34: mmio.Mmio(packed struct(u32) {
                ///  CSR34
                CSR34: u32,
            }),
            ///  context swap registers
            CSR35: mmio.Mmio(packed struct(u32) {
                ///  CSR35
                CSR35: u32,
            }),
            ///  context swap registers
            CSR36: mmio.Mmio(packed struct(u32) {
                ///  CSR36
                CSR36: u32,
            }),
            ///  context swap registers
            CSR37: mmio.Mmio(packed struct(u32) {
                ///  CSR37
                CSR37: u32,
            }),
            ///  context swap registers
            CSR38: mmio.Mmio(packed struct(u32) {
                ///  CSR38
                CSR38: u32,
            }),
            ///  context swap registers
            CSR39: mmio.Mmio(packed struct(u32) {
                ///  CSR39
                CSR39: u32,
            }),
            ///  context swap registers
            CSR40: mmio.Mmio(packed struct(u32) {
                ///  CSR40
                CSR40: u32,
            }),
            ///  context swap registers
            CSR41: mmio.Mmio(packed struct(u32) {
                ///  CSR41
                CSR41: u32,
            }),
            ///  context swap registers
            CSR42: mmio.Mmio(packed struct(u32) {
                ///  CSR42
                CSR42: u32,
            }),
            ///  context swap registers
            CSR43: mmio.Mmio(packed struct(u32) {
                ///  CSR43
                CSR43: u32,
            }),
            ///  context swap registers
            CSR44: mmio.Mmio(packed struct(u32) {
                ///  CSR44
                CSR44: u32,
            }),
            ///  context swap registers
            CSR45: mmio.Mmio(packed struct(u32) {
                ///  CSR45
                CSR45: u32,
            }),
            ///  context swap registers
            CSR46: mmio.Mmio(packed struct(u32) {
                ///  CSR46
                CSR46: u32,
            }),
            ///  context swap registers
            CSR47: mmio.Mmio(packed struct(u32) {
                ///  CSR47
                CSR47: u32,
            }),
            ///  context swap registers
            CSR48: mmio.Mmio(packed struct(u32) {
                ///  CSR48
                CSR48: u32,
            }),
            ///  context swap registers
            CSR49: mmio.Mmio(packed struct(u32) {
                ///  CSR49
                CSR49: u32,
            }),
            ///  context swap registers
            CSR50: mmio.Mmio(packed struct(u32) {
                ///  CSR50
                CSR50: u32,
            }),
            ///  context swap registers
            CSR51: mmio.Mmio(packed struct(u32) {
                ///  CSR51
                CSR51: u32,
            }),
            ///  context swap registers
            CSR52: mmio.Mmio(packed struct(u32) {
                ///  CSR52
                CSR52: u32,
            }),
            ///  context swap registers
            CSR53: mmio.Mmio(packed struct(u32) {
                ///  CSR53
                CSR53: u32,
            }),
            reserved784: [320]u8,
            ///  digest register 0
            HR0: mmio.Mmio(packed struct(u32) {
                ///  H0
                H0: u32,
            }),
            ///  digest register 1
            HR1: mmio.Mmio(packed struct(u32) {
                ///  H1
                H1: u32,
            }),
            ///  digest register 4
            HR2: mmio.Mmio(packed struct(u32) {
                ///  H2
                H2: u32,
            }),
            ///  digest register 3
            HR3: mmio.Mmio(packed struct(u32) {
                ///  H3
                H3: u32,
            }),
            ///  digest register 4
            HR4: mmio.Mmio(packed struct(u32) {
                ///  H4
                H4: u32,
            }),
            ///  supplementary digest register 5
            HR5: mmio.Mmio(packed struct(u32) {
                ///  H5
                H5: u32,
            }),
            ///  supplementary digest register 6
            HR6: mmio.Mmio(packed struct(u32) {
                ///  H6
                H6: u32,
            }),
            ///  supplementary digest register 7
            HR7: mmio.Mmio(packed struct(u32) {
                ///  H7
                H7: u32,
            }),
        };

        ///  External interrupt/event controller
        pub const EXTI = extern struct {
            ///  EXTI rising trigger selection register
            RTSR1: mmio.Mmio(packed struct(u32) {
                ///  Rising trigger event configuration bit of configurable event input x
                RT0: u1,
                ///  Rising trigger event configuration bit of configurable event input x
                RT1: u1,
                ///  Rising trigger event configuration bit of configurable event input x
                RT2: u1,
                ///  Rising trigger event configuration bit of configurable event input x
                RT3: u1,
                ///  Rising trigger event configuration bit of configurable event input x
                RT4: u1,
                ///  Rising trigger event configuration bit of configurable event input x
                RT5: u1,
                ///  Rising trigger event configuration bit of configurable event input x
                RT6: u1,
                ///  Rising trigger event configuration bit of configurable event input x
                RT7: u1,
                ///  Rising trigger event configuration bit of configurable event input x
                RT8: u1,
                ///  Rising trigger event configuration bit of configurable event input x
                RT9: u1,
                ///  Rising trigger event configuration bit of configurable event input x
                RT10: u1,
                ///  Rising trigger event configuration bit of configurable event input x
                RT11: u1,
                ///  Rising trigger event configuration bit of configurable event input x
                RT12: u1,
                ///  Rising trigger event configuration bit of configurable event input x
                RT13: u1,
                ///  Rising trigger event configuration bit of configurable event input x
                RT14: u1,
                ///  Rising trigger event configuration bit of configurable event input x
                RT15: u1,
                ///  Rising trigger event configuration bit of configurable event input x
                RT16: u1,
                reserved21: u4,
                ///  Rising trigger event configuration bit of configurable event input x
                RT21: u1,
                ///  Rising trigger event configuration bit of configurable event input x
                RT22: u1,
                padding: u9,
            }),
            ///  EXTI falling trigger selection register
            FTSR1: mmio.Mmio(packed struct(u32) {
                ///  Falling trigger event configuration bit of configurable event input x
                FT0: u1,
                ///  Falling trigger event configuration bit of configurable event input x
                FT1: u1,
                ///  Falling trigger event configuration bit of configurable event input x
                FT2: u1,
                ///  Falling trigger event configuration bit of configurable event input x
                FT3: u1,
                ///  Falling trigger event configuration bit of configurable event input x
                FT4: u1,
                ///  Falling trigger event configuration bit of configurable event input x
                FT5: u1,
                ///  Falling trigger event configuration bit of configurable event input x
                FT6: u1,
                ///  Falling trigger event configuration bit of configurable event input x
                FT7: u1,
                ///  Falling trigger event configuration bit of configurable event input x
                FT8: u1,
                ///  Falling trigger event configuration bit of configurable event input x
                FT9: u1,
                ///  Falling trigger event configuration bit of configurable event input x
                FT10: u1,
                ///  Falling trigger event configuration bit of configurable event input x
                FT11: u1,
                ///  Falling trigger event configuration bit of configurable event input x
                FT12: u1,
                ///  Falling trigger event configuration bit of configurable event input x
                FT13: u1,
                ///  Falling trigger event configuration bit of configurable event input x
                FT14: u1,
                ///  Falling trigger event configuration bit of configurable event input x
                FT15: u1,
                ///  Falling trigger event configuration bit of configurable event input x
                FT16: u1,
                reserved21: u4,
                ///  Falling trigger event configuration bit of configurable event input x
                FT21: u1,
                ///  Falling trigger event configuration bit of configurable event input x
                FT22: u1,
                padding: u9,
            }),
            ///  EXTI software interrupt event register
            SWIER1: mmio.Mmio(packed struct(u32) {
                ///  Software interrupt on event x
                SWI0: u1,
                ///  Software interrupt on event x
                SWI1: u1,
                ///  Software interrupt on event x
                SWI2: u1,
                ///  Software interrupt on event x
                SWI3: u1,
                ///  Software interrupt on event x
                SWI4: u1,
                ///  Software interrupt on event x
                SWI5: u1,
                ///  Software interrupt on event x
                SWI6: u1,
                ///  Software interrupt on event x
                SWI7: u1,
                ///  Software interrupt on event x
                SWI8: u1,
                ///  Software interrupt on event x
                SWI9: u1,
                ///  Software interrupt on event x
                SWI10: u1,
                ///  Software interrupt on event x
                SWI11: u1,
                ///  Software interrupt on event x
                SWI12: u1,
                ///  Software interrupt on event x
                SWI13: u1,
                ///  Software interrupt on event x
                SWI14: u1,
                ///  Software interrupt on event x
                SWI15: u1,
                ///  Software interrupt on event x
                SWI16: u1,
                reserved21: u4,
                ///  Software interrupt on event x
                SWI21: u1,
                ///  Software interrupt on event x
                SWI22: u1,
                padding: u9,
            }),
            ///  EXTI rising edge pending register
            RPR1: mmio.Mmio(packed struct(u32) {
                ///  configurable event inputs x rising edge pending bit
                RPIF0: u1,
                ///  configurable event inputs x rising edge pending bit
                RPIF1: u1,
                ///  configurable event inputs x rising edge pending bit
                RPIF2: u1,
                ///  configurable event inputs x rising edge pending bit
                RPIF3: u1,
                ///  configurable event inputs x rising edge pending bit
                RPIF4: u1,
                ///  configurable event inputs x rising edge pending bit
                RPIF5: u1,
                ///  configurable event inputs x rising edge pending bit
                RPIF6: u1,
                ///  configurable event inputs x rising edge pending bit
                RPIF7: u1,
                ///  configurable event inputs x rising edge pending bit
                RPIF8: u1,
                ///  configurable event inputs x rising edge pending bit
                RPIF9: u1,
                ///  configurable event inputs x rising edge pending bit
                RPIF10: u1,
                ///  configurable event inputs x rising edge pending bit
                RPIF11: u1,
                ///  configurable event inputs x rising edge pending bit
                RPIF12: u1,
                ///  configurable event inputs x rising edge pending bit
                RPIF13: u1,
                ///  configurable event inputs x rising edge pending bit
                RPIF14: u1,
                ///  configurable event inputs x rising edge pending bit
                RPIF15: u1,
                ///  configurable event inputs x rising edge pending bit
                RPIF16: u1,
                reserved21: u4,
                ///  configurable event inputs x rising edge pending bit
                RPIF21: u1,
                ///  configurable event inputs x rising edge pending bit
                RPIF22: u1,
                padding: u9,
            }),
            ///  EXTI falling edge pending register
            FPR1: mmio.Mmio(packed struct(u32) {
                ///  configurable event inputs x falling edge pending bit.
                FPIF0: u1,
                ///  configurable event inputs x falling edge pending bit.
                FPIF1: u1,
                ///  configurable event inputs x falling edge pending bit.
                FPIF2: u1,
                ///  configurable event inputs x falling edge pending bit.
                FPIF3: u1,
                ///  configurable event inputs x falling edge pending bit.
                FPIF4: u1,
                ///  configurable event inputs x falling edge pending bit.
                FPIF5: u1,
                ///  configurable event inputs x falling edge pending bit.
                FPIF6: u1,
                ///  configurable event inputs x falling edge pending bit.
                FPIF7: u1,
                ///  configurable event inputs x falling edge pending bit.
                FPIF8: u1,
                ///  configurable event inputs x falling edge pending bit.
                FPIF9: u1,
                ///  configurable event inputs x falling edge pending bit.
                FPIF10: u1,
                ///  configurable event inputs x falling edge pending bit.
                FPIF11: u1,
                ///  configurable event inputs x falling edge pending bit.
                FPIF12: u1,
                ///  configurable event inputs x falling edge pending bit.
                FPIF13: u1,
                ///  configurable event inputs x falling edge pending bit.
                FPIF14: u1,
                ///  configurable event inputs x falling edge pending bit.
                FPIF15: u1,
                ///  configurable event inputs x falling edge pending bit.
                FPIF16: u1,
                reserved21: u4,
                ///  configurable event inputs x falling edge pending bit.
                FPIF21: u1,
                ///  configurable event inputs x falling edge pending bit.
                FPIF22: u1,
                padding: u9,
            }),
            ///  EXTI security configuration register
            SECCFGR1: mmio.Mmio(packed struct(u32) {
                ///  Security enable on event input x
                SEC0: u1,
                ///  Security enable on event input x
                SEC1: u1,
                ///  Security enable on event input x
                SEC2: u1,
                ///  Security enable on event input x
                SEC3: u1,
                ///  Security enable on event input x
                SEC4: u1,
                ///  Security enable on event input x
                SEC5: u1,
                ///  Security enable on event input x
                SEC6: u1,
                ///  Security enable on event input x
                SEC7: u1,
                ///  Security enable on event input x
                SEC8: u1,
                ///  Security enable on event input x
                SEC9: u1,
                ///  Security enable on event input x
                SEC10: u1,
                ///  Security enable on event input x
                SEC11: u1,
                ///  Security enable on event input x
                SEC12: u1,
                ///  Security enable on event input x
                SEC13: u1,
                ///  Security enable on event input x
                SEC14: u1,
                ///  Security enable on event input x
                SEC15: u1,
                ///  Security enable on event input x
                SEC16: u1,
                ///  Security enable on event input x
                SEC17: u1,
                ///  Security enable on event input x
                SEC18: u1,
                ///  Security enable on event input x
                SEC19: u1,
                ///  Security enable on event input x
                SEC20: u1,
                ///  Security enable on event input x
                SEC21: u1,
                ///  Security enable on event input x
                SEC22: u1,
                ///  Security enable on event input x
                SEC23: u1,
                ///  Security enable on event input x
                SEC24: u1,
                ///  Security enable on event input x
                SEC25: u1,
                ///  Security enable on event input x
                SEC26: u1,
                ///  Security enable on event input x
                SEC27: u1,
                ///  Security enable on event input x
                SEC28: u1,
                ///  Security enable on event input x
                SEC29: u1,
                ///  Security enable on event input x
                SEC30: u1,
                ///  Security enable on event input x
                SEC31: u1,
            }),
            ///  EXTI privilege configuration register
            PRIVCFGR1: mmio.Mmio(packed struct(u32) {
                ///  Security enable on event input x
                PRIV0: u1,
                ///  Security enable on event input x
                PRIV1: u1,
                ///  Security enable on event input x
                PRIV2: u1,
                ///  Security enable on event input x
                PRIV3: u1,
                ///  Security enable on event input x
                PRIV4: u1,
                ///  Security enable on event input x
                PRIV5: u1,
                ///  Security enable on event input x
                PRIV6: u1,
                ///  Security enable on event input x
                PRIV7: u1,
                ///  Security enable on event input x
                PRIV8: u1,
                ///  Security enable on event input x
                PRIV9: u1,
                ///  Security enable on event input x
                PRIV10: u1,
                ///  Security enable on event input x
                PRIV11: u1,
                ///  Security enable on event input x
                PRIV12: u1,
                ///  Security enable on event input x
                PRIV13: u1,
                ///  Security enable on event input x
                PRIV14: u1,
                ///  Security enable on event input x
                PRIV15: u1,
                ///  Security enable on event input x
                PRIV16: u1,
                ///  Security enable on event input x
                PRIV17: u1,
                ///  Security enable on event input x
                PRIV18: u1,
                ///  Security enable on event input x
                PRIV19: u1,
                ///  Security enable on event input x
                PRIV20: u1,
                ///  Security enable on event input x
                PRIV21: u1,
                ///  Security enable on event input x
                PRIV22: u1,
                ///  Security enable on event input x
                PRIV23: u1,
                ///  Security enable on event input x
                PRIV24: u1,
                ///  Security enable on event input x
                PRIV25: u1,
                ///  Security enable on event input x
                PRIV26: u1,
                ///  Security enable on event input x
                PRIV27: u1,
                ///  Security enable on event input x
                PRIV28: u1,
                ///  Security enable on event input x
                PRIV29: u1,
                ///  Security enable on event input x
                PRIV30: u1,
                ///  Security enable on event input x
                PRIV31: u1,
            }),
            reserved32: [4]u8,
            ///  EXTI rising trigger selection register
            RTSR2: mmio.Mmio(packed struct(u32) {
                reserved3: u3,
                ///  Rising trigger event configuration bit of configurable event input x
                RT35: u1,
                ///  Rising trigger event configuration bit of configurable event input x
                RT36: u1,
                ///  Rising trigger event configuration bit of configurable event input x
                RT37: u1,
                ///  Rising trigger event configuration bit of configurable event input x
                RT38: u1,
                padding: u25,
            }),
            ///  EXTI falling trigger selection register
            FTSR2: mmio.Mmio(packed struct(u32) {
                reserved3: u3,
                ///  FT35
                FT35: u1,
                ///  FT36
                FT36: u1,
                ///  FT37
                FT37: u1,
                ///  FT38
                FT38: u1,
                padding: u25,
            }),
            ///  EXTI software interrupt event register
            SWIER2: mmio.Mmio(packed struct(u32) {
                reserved3: u3,
                ///  SWI35
                SWI35: u1,
                ///  SWI36
                SWI36: u1,
                ///  SWI37
                SWI37: u1,
                ///  SWI38
                SWI38: u1,
                padding: u25,
            }),
            ///  EXTI rising edge pending register
            RPR2: mmio.Mmio(packed struct(u32) {
                reserved3: u3,
                ///  RPIF35
                RPIF35: u1,
                ///  RPIF36
                RPIF36: u1,
                ///  RPIF37
                RPIF37: u1,
                ///  RPIF38
                RPIF38: u1,
                padding: u25,
            }),
            ///  EXTI falling edge pending register
            FPR2: mmio.Mmio(packed struct(u32) {
                reserved3: u3,
                ///  FPIF35
                FPIF35: u1,
                ///  FPIF36
                FPIF36: u1,
                ///  FPIF37
                FPIF37: u1,
                ///  FPIF38
                FPIF38: u1,
                padding: u25,
            }),
            ///  EXTI security enable register
            PRIVCFGR2: mmio.Mmio(packed struct(u32) {
                ///  PRIV32
                PRIV32: u1,
                ///  PRIV33
                PRIV33: u1,
                ///  PRIV34
                PRIV34: u1,
                ///  PRIV35
                PRIV35: u1,
                ///  PRIV36
                PRIV36: u1,
                ///  PRIV37
                PRIV37: u1,
                ///  PRIV38
                PRIV38: u1,
                ///  PRIV39
                PRIV39: u1,
                ///  PRIV40
                PRIV40: u1,
                ///  PRIV41
                PRIV41: u1,
                ///  PRIV42
                PRIV42: u1,
                padding: u21,
            }),
            ///  EXTI security enable register
            SECCFGR2: mmio.Mmio(packed struct(u32) {
                ///  SEC32
                SEC32: u1,
                ///  SEC33
                SEC33: u1,
                ///  SEC34
                SEC34: u1,
                ///  SEC35
                SEC35: u1,
                ///  SEC36
                SEC36: u1,
                ///  SEC37
                SEC37: u1,
                ///  SEC38
                SEC38: u1,
                ///  SEC39
                SEC39: u1,
                ///  SEC40
                SEC40: u1,
                ///  SEC41
                SEC41: u1,
                ///  SEC42
                SEC42: u1,
                padding: u21,
            }),
            reserved96: [36]u8,
            ///  EXTI external interrupt selection register
            EXTICR1: mmio.Mmio(packed struct(u32) {
                ///  EXTIm GPIO port selection
                EXTI0_7: u8,
                ///  EXTIm+1 GPIO port selection
                EXTI8_15: u8,
                ///  EXTIm+2 GPIO port selection
                EXTI16_23: u8,
                ///  EXTIm+3 GPIO port selection
                EXTI24_31: u8,
            }),
            ///  EXTI external interrupt selection register
            EXTICR2: mmio.Mmio(packed struct(u32) {
                ///  EXTIm GPIO port selection
                EXTI0_7: u8,
                ///  EXTIm+1 GPIO port selection
                EXTI8_15: u8,
                ///  EXTIm+2 GPIO port selection
                EXTI16_23: u8,
                ///  EXTIm+3 GPIO port selection
                EXTI24_31: u8,
            }),
            ///  EXTI external interrupt selection register
            EXTICR3: mmio.Mmio(packed struct(u32) {
                ///  EXTIm GPIO port selection
                EXTI0_7: u8,
                ///  EXTIm+1 GPIO port selection
                EXTI8_15: u8,
                ///  EXTIm+2 GPIO port selection
                EXTI16_23: u8,
                ///  EXTIm+3 GPIO port selection
                EXTI24_31: u8,
            }),
            ///  EXTI external interrupt selection register
            EXTICR4: mmio.Mmio(packed struct(u32) {
                ///  EXTIm GPIO port selection
                EXTI0_7: u8,
                ///  EXTIm+1 GPIO port selection
                EXTI8_15: u8,
                ///  EXTIm+2 GPIO port selection
                EXTI16_23: u8,
                ///  EXTIm+3 GPIO port selection
                EXTI24_31: u8,
            }),
            ///  EXTI lock register
            LOCKRG: mmio.Mmio(packed struct(u32) {
                ///  LOCK
                LOCK: u1,
                padding: u31,
            }),
            reserved128: [12]u8,
            ///  EXTI CPU wakeup with interrupt mask register
            IMR1: mmio.Mmio(packed struct(u32) {
                ///  CPU wakeup with interrupt mask on event input
                IM0: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM1: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM2: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM3: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM4: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM5: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM6: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM7: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM8: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM9: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM10: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM11: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM12: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM13: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM14: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM15: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM16: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM17: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM18: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM19: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM20: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM21: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM22: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM23: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM24: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM25: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM26: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM27: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM28: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM29: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM30: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM31: u1,
            }),
            ///  EXTI CPU wakeup with event mask register
            EMR1: mmio.Mmio(packed struct(u32) {
                ///  CPU wakeup with interrupt mask on event input
                EM0: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM1: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM2: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM3: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM4: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM5: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM6: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM7: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM8: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM9: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM10: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM11: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM12: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM13: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM14: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM15: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM16: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM17: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM18: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM19: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM20: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM21: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM22: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM23: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM24: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM25: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM26: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM27: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM28: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM29: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM30: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM31: u1,
            }),
            reserved144: [8]u8,
            ///  EXTI CPUm wakeup with interrupt mask register
            IMR2: mmio.Mmio(packed struct(u32) {
                ///  CPU wakeup with interrupt mask on event input
                IM32: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM33: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM34: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM35: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM36: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM37: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM38: u1,
                reserved8: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM40: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM41: u1,
                ///  CPU wakeup with interrupt mask on event input
                IM42: u1,
                padding: u21,
            }),
            ///  EXTI CPU wakeup with event mask register
            EMR2: mmio.Mmio(packed struct(u32) {
                ///  CPU wakeup with interrupt mask on event input
                EM32: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM33: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM34: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM35: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM36: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM37: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM38: u1,
                reserved8: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM40: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM41: u1,
                ///  CPU wakeup with interrupt mask on event input
                EM42: u1,
                padding: u21,
            }),
        };

        ///  Debug Control Block
        pub const DCB = extern struct {
            ///  Debug Security Control and Status Register
            DSCSR: mmio.Mmio(packed struct(u32) {
                reserved16: u16,
                ///  Current domain Secure
                CDS: u1,
                padding: u15,
            }),
        };

        ///  Flash
        pub const FLASH = extern struct {
            ///  Access control register
            ACR: mmio.Mmio(packed struct(u32) {
                ///  Latency
                LATENCY: u4,
                reserved13: u9,
                ///  Flash Power-down mode during Low-power run mode
                RUN_PD: u1,
                ///  Flash Power-down mode during Low-power sleep mode
                SLEEP_PD: u1,
                ///  LVEN
                LVEN: u1,
                padding: u16,
            }),
            ///  Power down key register
            PDKEYR: mmio.Mmio(packed struct(u32) {
                ///  RUN_PD in FLASH_ACR key
                PDKEYR: u32,
            }),
            ///  Flash non-secure key register
            NSKEYR: mmio.Mmio(packed struct(u32) {
                ///  NSKEYR
                NSKEYR: u32,
            }),
            ///  Flash secure key register
            SECKEYR: mmio.Mmio(packed struct(u32) {
                ///  SECKEYR
                SECKEYR: u32,
            }),
            ///  Flash option key register
            OPTKEYR: mmio.Mmio(packed struct(u32) {
                ///  OPTKEYR
                OPTKEYR: u32,
            }),
            ///  Flash low voltage key register
            LVEKEYR: mmio.Mmio(packed struct(u32) {
                ///  LVEKEYR
                LVEKEYR: u32,
            }),
            reserved32: [8]u8,
            ///  Flash status register
            NSSR: mmio.Mmio(packed struct(u32) {
                ///  NSEOP
                NSEOP: u1,
                ///  NSOPERR
                NSOPERR: u1,
                reserved3: u1,
                ///  NSPROGERR
                NSPROGERR: u1,
                ///  NSWRPERR
                NSWRPERR: u1,
                ///  NSPGAERR
                NSPGAERR: u1,
                ///  NSSIZERR
                NSSIZERR: u1,
                ///  NSPGSERR
                NSPGSERR: u1,
                reserved13: u5,
                ///  OPTWERR
                OPTWERR: u1,
                reserved15: u1,
                ///  OPTVERR
                OPTVERR: u1,
                ///  NSBusy
                NSBSY: u1,
                padding: u15,
            }),
            ///  Flash status register
            SECSR: mmio.Mmio(packed struct(u32) {
                ///  SECEOP
                SECEOP: u1,
                ///  SECOPERR
                SECOPERR: u1,
                reserved3: u1,
                ///  SECPROGERR
                SECPROGERR: u1,
                ///  SECWRPERR
                SECWRPERR: u1,
                ///  SECPGAERR
                SECPGAERR: u1,
                ///  SECSIZERR
                SECSIZERR: u1,
                ///  SECPGSERR
                SECPGSERR: u1,
                reserved14: u6,
                ///  Secure read protection error
                SECRDERR: u1,
                reserved16: u1,
                ///  SECBusy
                SECBSY: u1,
                padding: u15,
            }),
            ///  Flash non-secure control register
            NSCR: mmio.Mmio(packed struct(u32) {
                ///  NSPG
                NSPG: u1,
                ///  NSPER
                NSPER: u1,
                ///  NSMER1
                NSMER1: u1,
                ///  NSPNB
                NSPNB: u7,
                reserved11: u1,
                ///  NSBKER
                NSBKER: u1,
                reserved15: u3,
                ///  NSMER2
                NSMER2: u1,
                ///  Options modification start
                NSSTRT: u1,
                ///  Options modification start
                OPTSTRT: u1,
                reserved24: u6,
                ///  NSEOPIE
                NSEOPIE: u1,
                ///  NSERRIE
                NSERRIE: u1,
                reserved27: u1,
                ///  Force the option byte loading
                OBL_LAUNCH: u1,
                reserved30: u2,
                ///  Options Lock
                OPTLOCK: u1,
                ///  NSLOCK
                NSLOCK: u1,
            }),
            ///  Flash secure control register
            SECCR: mmio.Mmio(packed struct(u32) {
                ///  SECPG
                SECPG: u1,
                ///  SECPER
                SECPER: u1,
                ///  SECMER1
                SECMER1: u1,
                ///  SECPNB
                SECPNB: u7,
                reserved11: u1,
                ///  SECBKER
                SECBKER: u1,
                reserved15: u3,
                ///  SECMER2
                SECMER2: u1,
                ///  SECSTRT
                SECSTRT: u1,
                reserved24: u7,
                ///  SECEOPIE
                SECEOPIE: u1,
                ///  SECERRIE
                SECERRIE: u1,
                ///  SECRDERRIE
                SECRDERRIE: u1,
                reserved29: u2,
                ///  SECINV
                SECINV: u1,
                reserved31: u1,
                ///  SECLOCK
                SECLOCK: u1,
            }),
            ///  Flash ECC register
            ECCR: mmio.Mmio(packed struct(u32) {
                ///  ECC fail address
                ADDR_ECC: u19,
                reserved21: u2,
                ///  BK_ECC
                BK_ECC: u1,
                ///  SYSF_ECC
                SYSF_ECC: u1,
                reserved24: u1,
                ///  ECC correction interrupt enable
                ECCIE: u1,
                reserved28: u3,
                ///  ECCC2
                ECCC2: u1,
                ///  ECCD2
                ECCD2: u1,
                ///  ECC correction
                ECCC: u1,
                ///  ECC detection
                ECCD: u1,
            }),
            reserved64: [12]u8,
            ///  Flash option register
            OPTR: mmio.Mmio(packed struct(u32) {
                ///  Read protection level
                RDP: u8,
                ///  BOR reset Level
                BOR_LEV: u3,
                reserved12: u1,
                ///  nRST_STOP
                nRST_STOP: u1,
                ///  nRST_STDBY
                nRST_STDBY: u1,
                ///  nRST_SHDW
                nRST_SHDW: u1,
                reserved16: u1,
                ///  Independent watchdog selection
                IWDG_SW: u1,
                ///  Independent watchdog counter freeze in Stop mode
                IWDG_STOP: u1,
                ///  Independent watchdog counter freeze in Standby mode
                IWDG_STDBY: u1,
                ///  Window watchdog selection
                WWDG_SW: u1,
                ///  SWAP_BANK
                SWAP_BANK: u1,
                ///  DB256K
                DB256K: u1,
                ///  DBANK
                DBANK: u1,
                reserved24: u1,
                ///  SRAM2 parity check enable
                SRAM2_PE: u1,
                ///  SRAM2 Erase when system reset
                SRAM2_RST: u1,
                ///  nSWBOOT0
                nSWBOOT0: u1,
                ///  nBOOT0
                nBOOT0: u1,
                ///  PA15_PUPEN
                PA15_PUPEN: u1,
                reserved31: u2,
                ///  TZEN
                TZEN: u1,
            }),
            ///  Flash non-secure boot address 0 register
            NSBOOTADD0R: mmio.Mmio(packed struct(u32) {
                reserved7: u7,
                ///  NSBOOTADD0
                NSBOOTADD0: u25,
            }),
            ///  Flash non-secure boot address 1 register
            NSBOOTADD1R: mmio.Mmio(packed struct(u32) {
                reserved7: u7,
                ///  NSBOOTADD1
                NSBOOTADD1: u25,
            }),
            ///  FFlash secure boot address 0 register
            SECBOOTADD0R: mmio.Mmio(packed struct(u32) {
                ///  BOOT_LOCK
                BOOT_LOCK: u1,
                reserved7: u6,
                ///  SECBOOTADD0
                SECBOOTADD0: u25,
            }),
            ///  Flash bank 1 secure watermak1 register
            SECWM1R1: mmio.Mmio(packed struct(u32) {
                ///  SECWM1_PSTRT
                SECWM1_PSTRT: u7,
                reserved16: u9,
                ///  SECWM1_PEND
                SECWM1_PEND: u7,
                padding: u9,
            }),
            ///  Flash secure watermak1 register 2
            SECWM1R2: mmio.Mmio(packed struct(u32) {
                ///  PCROP1_PSTRT
                PCROP1_PSTRT: u7,
                reserved15: u8,
                ///  PCROP1EN
                PCROP1EN: u1,
                ///  HDP1_PEND
                HDP1_PEND: u7,
                reserved31: u8,
                ///  HDP1EN
                HDP1EN: u1,
            }),
            ///  Flash Bank 1 WRP area A address register
            WRP1AR: mmio.Mmio(packed struct(u32) {
                ///  WRP1A_PSTRT
                WRP1A_PSTRT: u7,
                reserved16: u9,
                ///  WRP1A_PEND
                WRP1A_PEND: u7,
                padding: u9,
            }),
            ///  Flash Bank 1 WRP area B address register
            WRP1BR: mmio.Mmio(packed struct(u32) {
                ///  WRP1B_PSTRT
                WRP1B_PSTRT: u7,
                reserved16: u9,
                ///  WRP1B_PEND
                WRP1B_PEND: u7,
                padding: u9,
            }),
            ///  Flash secure watermak2 register
            SECWM2R1: mmio.Mmio(packed struct(u32) {
                ///  SECWM2_PSTRT
                SECWM2_PSTRT: u7,
                reserved16: u9,
                ///  SECWM2_PEND
                SECWM2_PEND: u7,
                padding: u9,
            }),
            ///  Flash secure watermak2 register2
            SECWM2R2: mmio.Mmio(packed struct(u32) {
                ///  PCROP2_PSTRT
                PCROP2_PSTRT: u7,
                reserved15: u8,
                ///  PCROP2EN
                PCROP2EN: u1,
                ///  HDP2_PEND
                HDP2_PEND: u7,
                reserved31: u8,
                ///  HDP2EN
                HDP2EN: u1,
            }),
            ///  Flash WPR2 area A address register
            WRP2AR: mmio.Mmio(packed struct(u32) {
                ///  WRP2A_PSTRT
                WRP2A_PSTRT: u7,
                reserved16: u9,
                ///  WRP2A_PEND
                WRP2A_PEND: u7,
                padding: u9,
            }),
            ///  Flash WPR2 area B address register
            WRP2BR: mmio.Mmio(packed struct(u32) {
                ///  WRP2B_PSTRT
                WRP2B_PSTRT: u7,
                reserved16: u9,
                ///  WRP2B_PEND
                WRP2B_PEND: u7,
                padding: u9,
            }),
            reserved128: [16]u8,
            ///  FLASH secure block based bank 1 register
            SECBB1R1: mmio.Mmio(packed struct(u32) {
                ///  SECBB1
                SECBB1: u32,
            }),
            ///  FLASH secure block based bank 1 register
            SECBB1R2: mmio.Mmio(packed struct(u32) {
                ///  SECBB1
                SECBB1: u32,
            }),
            ///  FLASH secure block based bank 1 register
            SECBB1R3: mmio.Mmio(packed struct(u32) {
                ///  SECBB1
                SECBB1: u32,
            }),
            ///  FLASH secure block based bank 1 register
            SECBB1R4: mmio.Mmio(packed struct(u32) {
                ///  SECBB1
                SECBB1: u32,
            }),
            reserved160: [16]u8,
            ///  FLASH secure block based bank 2 register
            SECBB2R1: mmio.Mmio(packed struct(u32) {
                ///  SECBB2
                SECBB2: u32,
            }),
            ///  FLASH secure block based bank 2 register
            SECBB2R2: mmio.Mmio(packed struct(u32) {
                ///  SECBB2
                SECBB2: u32,
            }),
            ///  FLASH secure block based bank 2 register
            SECBB2R3: mmio.Mmio(packed struct(u32) {
                ///  SECBB2
                SECBB2: u32,
            }),
            ///  FLASH secure block based bank 2 register
            SECBB2R4: mmio.Mmio(packed struct(u32) {
                ///  SECBB2
                SECBB2: u32,
            }),
            reserved192: [16]u8,
            ///  FLASH secure HDP control register
            SECHDPCR: mmio.Mmio(packed struct(u32) {
                ///  HDP1_ACCDIS
                HDP1_ACCDIS: u1,
                ///  HDP2_ACCDIS
                HDP2_ACCDIS: u1,
                padding: u30,
            }),
            ///  Power privilege configuration register
            PRIVCFGR: mmio.Mmio(packed struct(u32) {
                ///  PRIV
                PRIV: u1,
                padding: u31,
            }),
        };

        ///  Universal synchronous asynchronous receiver transmitter
        pub const LPUART1 = extern struct {
            ///  Control register 1
            CR1: mmio.Mmio(packed struct(u32) {
                ///  USART enable
                UE: u1,
                ///  USART enable in Stop mode
                UESM: u1,
                ///  Receiver enable
                RE: u1,
                ///  Transmitter enable
                TE: u1,
                ///  IDLE interrupt enable
                IDLEIE: u1,
                ///  RXNE interrupt enable
                RXNEIE: u1,
                ///  Transmission complete interrupt enable
                TCIE: u1,
                ///  interrupt enable
                TXEIE: u1,
                ///  PE interrupt enable
                PEIE: u1,
                ///  Parity selection
                PS: u1,
                ///  Parity control enable
                PCE: u1,
                ///  Receiver wakeup method
                WAKE: u1,
                ///  Word length
                M0: u1,
                ///  Mute mode enable
                MME: u1,
                ///  Character match interrupt enable
                CMIE: u1,
                reserved16: u1,
                ///  DEDT
                DEDT: u5,
                ///  DEAT
                DEAT: u5,
                reserved28: u2,
                ///  Word length
                M1: u1,
                ///  FIFOEN
                FIFOEN: u1,
                ///  TXFEIE
                TXFEIE: u1,
                ///  RXFFIE
                RXFFIE: u1,
            }),
            ///  Control register 2
            CR2: mmio.Mmio(packed struct(u32) {
                reserved4: u4,
                ///  7-bit Address Detection/4-bit Address Detection
                ADDM7: u1,
                reserved12: u7,
                ///  STOP bits
                STOP: u2,
                reserved15: u1,
                ///  Swap TX/RX pins
                SWAP: u1,
                ///  RX pin active level inversion
                RXINV: u1,
                ///  TX pin active level inversion
                TXINV: u1,
                ///  Binary data inversion
                TAINV: u1,
                ///  Most significant bit first
                MSBFIRST: u1,
                reserved24: u4,
                ///  Address of the USART node
                ADD0_3: u4,
                ///  Address of the USART node
                ADD4_7: u4,
            }),
            ///  Control register 3
            CR3: mmio.Mmio(packed struct(u32) {
                ///  Error interrupt enable
                EIE: u1,
                reserved3: u2,
                ///  Half-duplex selection
                HDSEL: u1,
                reserved6: u2,
                ///  DMA enable receiver
                DMAR: u1,
                ///  DMA enable transmitter
                DMAT: u1,
                ///  RTS enable
                RTSE: u1,
                ///  CTS enable
                CTSE: u1,
                ///  CTS interrupt enable
                CTSIE: u1,
                reserved12: u1,
                ///  Overrun Disable
                OVRDIS: u1,
                ///  DMA Disable on Reception Error
                DDRE: u1,
                ///  Driver enable mode
                DEM: u1,
                ///  Driver enable polarity selection
                DEP: u1,
                reserved20: u4,
                ///  Wakeup from Stop mode interrupt flag selection
                WUS: u2,
                ///  Wakeup from Stop mode interrupt enable
                WUFIE: u1,
                ///  TXFTIE
                TXFTIE: u1,
                reserved25: u1,
                ///  RXFTCFG
                RXFTCFG: u3,
                ///  RXFTIE
                RXFTIE: u1,
                ///  TXFTCFG
                TXFTCFG: u3,
            }),
            ///  Baud rate register
            BRR: mmio.Mmio(packed struct(u32) {
                ///  BRR
                BRR: u20,
                padding: u12,
            }),
            reserved24: [8]u8,
            ///  Request register
            RQR: mmio.Mmio(packed struct(u32) {
                reserved1: u1,
                ///  Send break request
                SBKRQ: u1,
                ///  Mute mode request
                MMRQ: u1,
                ///  Receive data flush request
                RXFRQ: u1,
                ///  TXFRQ
                TXFRQ: u1,
                padding: u27,
            }),
            ///  Interrupt & status register
            ISR: mmio.Mmio(packed struct(u32) {
                ///  PE
                PE: u1,
                ///  FE
                FE: u1,
                ///  NF
                NF: u1,
                ///  ORE
                ORE: u1,
                ///  IDLE
                IDLE: u1,
                ///  RXNE
                RXNE: u1,
                ///  TC
                TC: u1,
                ///  TXE
                TXE: u1,
                reserved9: u1,
                ///  CTSIF
                CTSIF: u1,
                ///  CTS
                CTS: u1,
                reserved16: u5,
                ///  BUSY
                BUSY: u1,
                ///  CMF
                CMF: u1,
                ///  SBKF
                SBKF: u1,
                ///  RWU
                RWU: u1,
                ///  WUF
                WUF: u1,
                ///  TEACK
                TEACK: u1,
                ///  REACK
                REACK: u1,
                ///  TXFE
                TXFE: u1,
                ///  RXFF
                RXFF: u1,
                reserved26: u1,
                ///  RXFT
                RXFT: u1,
                ///  TXFT
                TXFT: u1,
                padding: u4,
            }),
            ///  Interrupt flag clear register
            ICR: mmio.Mmio(packed struct(u32) {
                ///  Parity error clear flag
                PECF: u1,
                ///  Framing error clear flag
                FECF: u1,
                ///  Noise detected clear flag
                NCF: u1,
                ///  Overrun error clear flag
                ORECF: u1,
                ///  Idle line detected clear flag
                IDLECF: u1,
                reserved6: u1,
                ///  Transmission complete clear flag
                TCCF: u1,
                reserved9: u2,
                ///  CTS clear flag
                CTSCF: u1,
                reserved17: u7,
                ///  Character match clear flag
                CMCF: u1,
                reserved20: u2,
                ///  Wakeup from Stop mode clear flag
                WUCF: u1,
                padding: u11,
            }),
            ///  Receive data register
            RDR: mmio.Mmio(packed struct(u32) {
                ///  Receive data value
                RDR: u9,
                padding: u23,
            }),
            ///  Transmit data register
            TDR: mmio.Mmio(packed struct(u32) {
                ///  Transmit data value
                TDR: u9,
                padding: u23,
            }),
            ///  PRESC
            PRESC: mmio.Mmio(packed struct(u32) {
                ///  PRESCALER
                PRESCALER: u4,
                padding: u28,
            }),
        };

        ///  General-purpose I/Os
        pub const GPIOA = extern struct {
            ///  GPIO port mode register
            MODER: mmio.Mmio(packed struct(u32) {
                ///  Port x configuration bits (y = 0..15)
                MODER0: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER1: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER2: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER3: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER4: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER5: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER6: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER7: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER8: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER9: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER10: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER11: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER12: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER13: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER14: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER15: u2,
            }),
            ///  GPIO port output type register
            OTYPER: mmio.Mmio(packed struct(u32) {
                ///  Port x configuration bits (y = 0..15)
                OT0: u1,
                ///  Port x configuration bits (y = 0..15)
                OT1: u1,
                ///  Port x configuration bits (y = 0..15)
                OT2: u1,
                ///  Port x configuration bits (y = 0..15)
                OT3: u1,
                ///  Port x configuration bits (y = 0..15)
                OT4: u1,
                ///  Port x configuration bits (y = 0..15)
                OT5: u1,
                ///  Port x configuration bits (y = 0..15)
                OT6: u1,
                ///  Port x configuration bits (y = 0..15)
                OT7: u1,
                ///  Port x configuration bits (y = 0..15)
                OT8: u1,
                ///  Port x configuration bits (y = 0..15)
                OT9: u1,
                ///  Port x configuration bits (y = 0..15)
                OT10: u1,
                ///  Port x configuration bits (y = 0..15)
                OT11: u1,
                ///  Port x configuration bits (y = 0..15)
                OT12: u1,
                ///  Port x configuration bits (y = 0..15)
                OT13: u1,
                ///  Port x configuration bits (y = 0..15)
                OT14: u1,
                ///  Port x configuration bits (y = 0..15)
                OT15: u1,
                padding: u16,
            }),
            ///  GPIO port output speed register
            OSPEEDR: mmio.Mmio(packed struct(u32) {
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR0: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR1: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR2: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR3: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR4: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR5: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR6: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR7: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR8: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR9: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR10: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR11: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR12: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR13: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR14: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR15: u2,
            }),
            ///  GPIO port pull-up/pull-down register
            PUPDR: mmio.Mmio(packed struct(u32) {
                ///  Port x configuration bits (y = 0..15)
                PUPDR0: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR1: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR2: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR3: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR4: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR5: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR6: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR7: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR8: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR9: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR10: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR11: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR12: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR13: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR14: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR15: u2,
            }),
            ///  GPIO port input data register
            IDR: mmio.Mmio(packed struct(u32) {
                ///  Port input data (y = 0..15)
                IDR0: u1,
                ///  Port input data (y = 0..15)
                IDR1: u1,
                ///  Port input data (y = 0..15)
                IDR2: u1,
                ///  Port input data (y = 0..15)
                IDR3: u1,
                ///  Port input data (y = 0..15)
                IDR4: u1,
                ///  Port input data (y = 0..15)
                IDR5: u1,
                ///  Port input data (y = 0..15)
                IDR6: u1,
                ///  Port input data (y = 0..15)
                IDR7: u1,
                ///  Port input data (y = 0..15)
                IDR8: u1,
                ///  Port input data (y = 0..15)
                IDR9: u1,
                ///  Port input data (y = 0..15)
                IDR10: u1,
                ///  Port input data (y = 0..15)
                IDR11: u1,
                ///  Port input data (y = 0..15)
                IDR12: u1,
                ///  Port input data (y = 0..15)
                IDR13: u1,
                ///  Port input data (y = 0..15)
                IDR14: u1,
                ///  Port input data (y = 0..15)
                IDR15: u1,
                padding: u16,
            }),
            ///  GPIO port output data register
            ODR: mmio.Mmio(packed struct(u32) {
                ///  Port output data (y = 0..15)
                ODR0: u1,
                ///  Port output data (y = 0..15)
                ODR1: u1,
                ///  Port output data (y = 0..15)
                ODR2: u1,
                ///  Port output data (y = 0..15)
                ODR3: u1,
                ///  Port output data (y = 0..15)
                ODR4: u1,
                ///  Port output data (y = 0..15)
                ODR5: u1,
                ///  Port output data (y = 0..15)
                ODR6: u1,
                ///  Port output data (y = 0..15)
                ODR7: u1,
                ///  Port output data (y = 0..15)
                ODR8: u1,
                ///  Port output data (y = 0..15)
                ODR9: u1,
                ///  Port output data (y = 0..15)
                ODR10: u1,
                ///  Port output data (y = 0..15)
                ODR11: u1,
                ///  Port output data (y = 0..15)
                ODR12: u1,
                ///  Port output data (y = 0..15)
                ODR13: u1,
                ///  Port output data (y = 0..15)
                ODR14: u1,
                ///  Port output data (y = 0..15)
                ODR15: u1,
                padding: u16,
            }),
            ///  GPIO port bit set/reset register
            BSRR: mmio.Mmio(packed struct(u32) {
                ///  Port x set bit y (y= 0..15)
                BS0: u1,
                ///  Port x set bit y (y= 0..15)
                BS1: u1,
                ///  Port x set bit y (y= 0..15)
                BS2: u1,
                ///  Port x set bit y (y= 0..15)
                BS3: u1,
                ///  Port x set bit y (y= 0..15)
                BS4: u1,
                ///  Port x set bit y (y= 0..15)
                BS5: u1,
                ///  Port x set bit y (y= 0..15)
                BS6: u1,
                ///  Port x set bit y (y= 0..15)
                BS7: u1,
                ///  Port x set bit y (y= 0..15)
                BS8: u1,
                ///  Port x set bit y (y= 0..15)
                BS9: u1,
                ///  Port x set bit y (y= 0..15)
                BS10: u1,
                ///  Port x set bit y (y= 0..15)
                BS11: u1,
                ///  Port x set bit y (y= 0..15)
                BS12: u1,
                ///  Port x set bit y (y= 0..15)
                BS13: u1,
                ///  Port x set bit y (y= 0..15)
                BS14: u1,
                ///  Port x set bit y (y= 0..15)
                BS15: u1,
                ///  Port x set bit y (y= 0..15)
                BR0: u1,
                ///  Port x reset bit y (y = 0..15)
                BR1: u1,
                ///  Port x reset bit y (y = 0..15)
                BR2: u1,
                ///  Port x reset bit y (y = 0..15)
                BR3: u1,
                ///  Port x reset bit y (y = 0..15)
                BR4: u1,
                ///  Port x reset bit y (y = 0..15)
                BR5: u1,
                ///  Port x reset bit y (y = 0..15)
                BR6: u1,
                ///  Port x reset bit y (y = 0..15)
                BR7: u1,
                ///  Port x reset bit y (y = 0..15)
                BR8: u1,
                ///  Port x reset bit y (y = 0..15)
                BR9: u1,
                ///  Port x reset bit y (y = 0..15)
                BR10: u1,
                ///  Port x reset bit y (y = 0..15)
                BR11: u1,
                ///  Port x reset bit y (y = 0..15)
                BR12: u1,
                ///  Port x reset bit y (y = 0..15)
                BR13: u1,
                ///  Port x reset bit y (y = 0..15)
                BR14: u1,
                ///  Port x reset bit y (y = 0..15)
                BR15: u1,
            }),
            ///  GPIO port configuration lock register
            LCKR: mmio.Mmio(packed struct(u32) {
                ///  Port x lock bit y (y= 0..15)
                LCK0: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK1: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK2: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK3: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK4: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK5: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK6: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK7: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK8: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK9: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK10: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK11: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK12: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK13: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK14: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK15: u1,
                ///  Port x lock bit y (y= 0..15)
                LCKK: u1,
                padding: u15,
            }),
            ///  GPIO alternate function low register
            AFRL: mmio.Mmio(packed struct(u32) {
                ///  Alternate function selection for port x bit y (y = 0..7)
                AFSEL0: u4,
                ///  Alternate function selection for port x bit y (y = 0..7)
                AFSEL1: u4,
                ///  Alternate function selection for port x bit y (y = 0..7)
                AFSEL2: u4,
                ///  Alternate function selection for port x bit y (y = 0..7)
                AFSEL3: u4,
                ///  Alternate function selection for port x bit y (y = 0..7)
                AFSEL4: u4,
                ///  Alternate function selection for port x bit y (y = 0..7)
                AFSEL5: u4,
                ///  Alternate function selection for port x bit y (y = 0..7)
                AFSEL6: u4,
                ///  Alternate function selection for port x bit y (y = 0..7)
                AFSEL7: u4,
            }),
            ///  GPIO alternate function high register
            AFRH: mmio.Mmio(packed struct(u32) {
                ///  Alternate function selection for port x bit y (y = 8..15)
                AFSEL8: u4,
                ///  Alternate function selection for port x bit y (y = 8..15)
                AFSEL9: u4,
                ///  Alternate function selection for port x bit y (y = 8..15)
                AFSEL10: u4,
                ///  Alternate function selection for port x bit y (y = 8..15)
                AFSEL11: u4,
                ///  Alternate function selection for port x bit y (y = 8..15)
                AFSEL12: u4,
                ///  Alternate function selection for port x bit y (y = 8..15)
                AFSEL13: u4,
                ///  Alternate function selection for port x bit y (y = 8..15)
                AFSEL14: u4,
                ///  Alternate function selection for port x bit y (y = 8..15)
                AFSEL15: u4,
            }),
            ///  GPIO port bit reset register
            BRR: mmio.Mmio(packed struct(u32) {
                ///  Port x reset IO pin y
                BR0: u1,
                ///  Port x reset IO pin y
                BR1: u1,
                ///  Port x reset IO pin y
                BR2: u1,
                ///  Port x reset IO pin y
                BR3: u1,
                ///  Port x reset IO pin y
                BR4: u1,
                ///  Port x reset IO pin y
                BR5: u1,
                ///  Port x reset IO pin y
                BR6: u1,
                ///  Port x reset IO pin y
                BR7: u1,
                ///  Port x reset IO pin y
                BR8: u1,
                ///  Port x reset IO pin y
                BR9: u1,
                ///  Port x reset IO pin y
                BR10: u1,
                ///  Port x reset IO pin y
                BR11: u1,
                ///  Port x reset IO pin y
                BR12: u1,
                ///  Port x reset IO pin y
                BR13: u1,
                ///  Port x reset IO pin y
                BR14: u1,
                ///  Port x reset IO pin y
                BR15: u1,
                padding: u16,
            }),
            reserved48: [4]u8,
            ///  GPIO secure configuration register
            SECCFGR: mmio.Mmio(packed struct(u32) {
                ///  I/O pin of Port x secure bit enable
                SEC0: u1,
                ///  I/O pin of Port x secure bit enable
                SEC1: u1,
                ///  I/O pin of Port x secure bit enable
                SEC2: u1,
                ///  I/O pin of Port x secure bit enable
                SEC3: u1,
                ///  I/O pin of Port x secure bit enable
                SEC4: u1,
                ///  I/O pin of Port x secure bit enable
                SEC5: u1,
                ///  I/O pin of Port x secure bit enable
                SEC6: u1,
                ///  I/O pin of Port x secure bit enable
                SEC7: u1,
                ///  I/O pin of Port x secure bit enable
                SEC8: u1,
                ///  I/O pin of Port x secure bit enable
                SEC9: u1,
                ///  I/O pin of Port x secure bit enable
                SEC10: u1,
                ///  I/O pin of Port x secure bit enable
                SEC11: u1,
                ///  I/O pin of Port x secure bit enable
                SEC12: u1,
                ///  I/O pin of Port x secure bit enable
                SEC13: u1,
                ///  I/O pin of Port x secure bit enable
                SEC14: u1,
                ///  I/O pin of Port x secure bit enable
                SEC15: u1,
                padding: u16,
            }),
        };

        ///  SDMMC1
        pub const SDMMC1 = extern struct {
            ///  SDMMC power control register
            SDMMC_POWER: mmio.Mmio(packed struct(u32) {
                ///  SDMMC state control bits. These bits can only be written when the SDMMC is not in the power-on state (PWRCTRL?11). These bits are used to define the functional state of the SDMMC signals: Any further write will be ignored, PWRCTRL value will keep 11.
                PWRCTRL: u2,
                ///  Voltage switch sequence start. This bit is used to start the timing critical section of the voltage switch sequence:
                VSWITCH: u1,
                ///  Voltage switch procedure enable. This bit can only be written by firmware when CPSM is disabled (CPSMEN = 0). This bit is used to stop the SDMMC_CK after the voltage switch command response:
                VSWITCHEN: u1,
                ///  Data and command direction signals polarity selection. This bit can only be written when the SDMMC is in the power-off state (PWRCTRL = 00).
                DIRPOL: u1,
                padding: u27,
            }),
            ///  The SDMMC_CLKCR register controls the SDMMC_CK output clock, the SDMMC_RX_CLK receive clock, and the bus width.
            SDMMC_CLKCR: mmio.Mmio(packed struct(u32) {
                ///  Clock divide factor This bit can only be written when the CPSM and DPSM are not active (CPSMACT = 0 and DPSMACT = 0). This field defines the divide factor between the input clock (SDMMCCLK) and the output clock (SDMMC_CK): SDMMC_CK frequency = SDMMCCLK / [2 * CLKDIV]. 0xx: etc.. xxx: etc..
                CLKDIV: u10,
                reserved12: u2,
                ///  Power saving configuration bit This bit can only be written when the CPSM and DPSM are not active (CPSMACT = 0 and DPSMACT = 0) For power saving, the SDMMC_CK clock output can be disabled when the bus is idle by setting PWRSAV:
                PWRSAV: u1,
                reserved14: u1,
                ///  Wide bus mode enable bit This bit can only be written when the CPSM and DPSM are not active (CPSMACT = 0 and DPSMACT = 0)
                WIDBUS: u2,
                ///  SDMMC_CK dephasing selection bit for data and Command. This bit can only be written when the CPSM and DPSM are not active (CPSMACT = 0 and DPSMACT = 0). When clock division = 1 (CLKDIV = 0), this bit has no effect. Data and Command change on SDMMC_CK falling edge. When clock division &gt;1 (CLKDIV &gt; 0) &amp; DDR = 0: - SDMMC_CK edge occurs on SDMMCCLK rising edge. When clock division >1 (CLKDIV > 0) & DDR = 1: - Data changed on the SDMMCCLK falling edge succeeding a SDMMC_CK edge. - SDMMC_CK edge occurs on SDMMCCLK rising edge. - Data changed on the SDMMC_CK falling edge succeeding a SDMMC_CK edge. - SDMMC_CK edge occurs on SDMMCCLK rising edge.
                NEGEDGE: u1,
                ///  Hardware flow control enable This bit can only be written when the CPSM and DPSM are not active (CPSMACT = 0 and DPSMACT = 0) When Hardware flow control is enabled, the meaning of the TXFIFOE and RXFIFOF flags change, please see SDMMC status register definition in Section56.8.11.
                HWFC_EN: u1,
                ///  Data rate signaling selection This bit can only be written when the CPSM and DPSM are not active (CPSMACT = 0 and DPSMACT = 0) DDR rate shall only be selected with 4-bit or 8-bit wide bus mode. (WIDBUS &gt; 00). DDR = 1 has no effect when WIDBUS = 00 (1-bit wide bus). DDR rate shall only be selected with clock division &gt;1. (CLKDIV &gt; 0)
                DDR: u1,
                ///  Bus speed mode selection between DS, HS, SDR12, SDR25 and SDR50, DDR50, SDR104. This bit can only be written when the CPSM and DPSM are not active (CPSMACT = 0 and DPSMACT = 0)
                BUSSPEED: u1,
                ///  Receive clock selection. These bits can only be written when the CPSM and DPSM are not active (CPSMACT = 0 and DPSMACT = 0)
                SELCLKRX: u2,
                padding: u10,
            }),
            ///  The SDMMC_ARGR register contains a 32-bit command argument, which is sent to a card as part of a command message.
            SDMMC_ARGR: mmio.Mmio(packed struct(u32) {
                ///  Command argument. These bits can only be written by firmware when CPSM is disabled (CPSMEN = 0). Command argument sent to a card as part of a command message. If a command contains an argument, it must be loaded into this register before writing a command to the command register.
                CMDARG: u32,
            }),
            ///  The SDMMC_CMDR register contains the command index and command type bits. The command index is sent to a card as part of a command message. The command type bits control the command path state machine (CPSM).
            SDMMC_CMDR: mmio.Mmio(packed struct(u32) {
                ///  Command index. This bit can only be written by firmware when CPSM is disabled (CPSMEN = 0). The command index is sent to the card as part of a command message.
                CMDINDEX: u6,
                ///  The CPSM treats the command as a data transfer command, stops the interrupt period, and signals DataEnable to the DPSM This bit can only be written by firmware when CPSM is disabled (CPSMEN = 0). If this bit is set, the CPSM issues an end of interrupt period and issues DataEnable signal to the DPSM when the command is sent.
                CMDTRANS: u1,
                ///  The CPSM treats the command as a Stop Transmission command and signals Abort to the DPSM. This bit can only be written by firmware when CPSM is disabled (CPSMEN = 0). If this bit is set, the CPSM issues the Abort signal to the DPSM when the command is sent.
                CMDSTOP: u1,
                ///  Wait for response bits. This bit can only be written by firmware when CPSM is disabled (CPSMEN = 0). They are used to configure whether the CPSM is to wait for a response, and if yes, which kind of response.
                WAITRESP: u2,
                ///  CPSM waits for interrupt request. If this bit is set, the CPSM disables command timeout and waits for an card interrupt request (Response). If this bit is cleared in the CPSM Wait state, will cause the abort of the interrupt mode.
                WAITINT: u1,
                ///  CPSM Waits for end of data transfer (CmdPend internal signal) from DPSM. This bit when set, the CPSM waits for the end of data transfer trigger before it starts sending a command. WAITPEND is only taken into account when DTMODE = MMC stream data transfer, WIDBUS = 1-bit wide bus mode, DPSMACT = 1 and DTDIR = from host to card.
                WAITPEND: u1,
                ///  Command path state machine (CPSM) Enable bit This bit is written 1 by firmware, and cleared by hardware when the CPSM enters the Idle state. If this bit is set, the CPSM is enabled. When DTEN = 1, no command will be transfered nor boot procedure will be started. CPSMEN is cleared to 0.
                CPSMEN: u1,
                ///  Hold new data block transmission and reception in the DPSM. If this bit is set, the DPSM will not move from the Wait_S state to the Send state or from the Wait_R state to the Receive state.
                DTHOLD: u1,
                ///  Select the boot mode procedure to be used. This bit can only be written by firmware when CPSM is disabled (CPSMEN = 0)
                BOOTMODE: u1,
                ///  Enable boot mode procedure.
                BOOTEN: u1,
                ///  The CPSM treats the command as a Suspend or Resume command and signals interrupt period start/end. This bit can only be written by firmware when CPSM is disabled (CPSMEN = 0). CMDSUSPEND = 1 and CMDTRANS = 0 Suspend command, start interrupt period when response bit BS=0. CMDSUSPEND = 1 and CMDTRANS = 1 Resume command with data, end interrupt period when response bit DF=1.
                CMDSUSPEND: u1,
                padding: u15,
            }),
            ///  SDMMC command response register
            SDMMC_RESPCMDR: mmio.Mmio(packed struct(u32) {
                ///  Response command index
                RESPCMD: u6,
                padding: u26,
            }),
            ///  The SDMMC_RESP1/2/3/4R registers contain the status of a card, which is part of the received response.
            SDMMC_RESP1R: mmio.Mmio(packed struct(u32) {
                ///  see Table 432
                CARDSTATUS1: u32,
            }),
            ///  The SDMMC_RESP1/2/3/4R registers contain the status of a card, which is part of the received response.
            SDMMC_RESP2R: mmio.Mmio(packed struct(u32) {
                ///  see Table404.
                CARDSTATUS2: u32,
            }),
            ///  The SDMMC_RESP1/2/3/4R registers contain the status of a card, which is part of the received response.
            SDMMC_RESP3R: mmio.Mmio(packed struct(u32) {
                ///  see Table404.
                CARDSTATUS3: u32,
            }),
            ///  The SDMMC_RESP1/2/3/4R registers contain the status of a card, which is part of the received response.
            SDMMC_RESP4R: mmio.Mmio(packed struct(u32) {
                ///  see Table404.
                CARDSTATUS4: u32,
            }),
            ///  The SDMMC_DTIMER register contains the data timeout period, in card bus clock periods. A counter loads the value from the SDMMC_DTIMER register, and starts decrementing when the data path state machine (DPSM) enters the Wait_R or Busy state. If the timer reaches 0 while the DPSM is in either of these states, the timeout status flag is set.
            SDMMC_DTIMER: mmio.Mmio(packed struct(u32) {
                ///  Data and R1b busy timeout period This bit can only be written when the CPSM and DPSM are not active (CPSMACT = 0 and DPSMACT = 0). Data and R1b busy timeout period expressed in card bus clock periods.
                DATATIME: u32,
            }),
            ///  The SDMMC_DLENR register contains the number of data bytes to be transferred. The value is loaded into the data counter when data transfer starts.
            SDMMC_DLENR: mmio.Mmio(packed struct(u32) {
                ///  Data length value This register can only be written by firmware when DPSM is inactive (DPSMACT = 0). Number of data bytes to be transferred. When DDR = 1 DATALENGTH is truncated to a multiple of 2. (The last odd byte is not transfered) When DATALENGTH = 0 no data will be transfered, when requested by a CPSMEN and CMDTRANS = 1 also no command will be transfered. DTEN and CPSMEN are cleared to 0.
                DATALENGTH: u25,
                padding: u7,
            }),
            ///  The SDMMC_DCTRL register control the data path state machine (DPSM).
            SDMMC_DCTRL: mmio.Mmio(packed struct(u32) {
                ///  Data transfer enable bit This bit can only be written by firmware when DPSM is inactive (DPSMACT = 0). This bit is cleared by Hardware when data transfer completes. This bit shall only be used to transfer data when no associated data transfer command is used, i.e. shall not be used with SD or eMMC cards.
                DTEN: u1,
                ///  Data transfer direction selection This bit can only be written by firmware when DPSM is inactive (DPSMACT = 0).
                DTDIR: u1,
                ///  Data transfer mode selection. This bit can only be written by firmware when DPSM is inactive (DPSMACT = 0).
                DTMODE: u2,
                ///  Data block size This bit can only be written by firmware when DPSM is inactive (DPSMACT = 0). Define the data block length when the block data transfer mode is selected: When DATALENGTH is not a multiple of DBLOCKSIZE, the transfered data is truncated at a multiple of DBLOCKSIZE. (Any remain data will not be transfered.) When DDR = 1, DBLOCKSIZE = 0000 shall not be used. (No data will be transfered)
                DBLOCKSIZE: u4,
                ///  Read wait start. If this bit is set, read wait operation starts.
                RWSTART: u1,
                ///  Read wait stop This bit is written by firmware and auto cleared by hardware when the DPSM moves from the READ_WAIT state to the WAIT_R or IDLE state.
                RWSTOP: u1,
                ///  Read wait mode. This bit can only be written by firmware when DPSM is inactive (DPSMACT = 0).
                RWMOD: u1,
                ///  SD I/O interrupt enable functions This bit can only be written by firmware when DPSM is inactive (DPSMACT = 0). If this bit is set, the DPSM enables the SD I/O card specific interrupt operation.
                SDIOEN: u1,
                ///  Enable the reception of the boot acknowledgment. This bit can only be written by firmware when DPSM is inactive (DPSMACT = 0).
                BOOTACKEN: u1,
                ///  FIFO reset, will flush any remaining data. This bit can only be written by firmware when IDMAEN= 0 and DPSM is active (DPSMACT = 1). This bit will only take effect when a transfer error or transfer hold occurs.
                FIFORST: u1,
                padding: u18,
            }),
            ///  The SDMMC_DCNTR register loads the value from the data length register (see SDMMC_DLENR) when the DPSM moves from the Idle state to the Wait_R or Wait_S state. As data is transferred, the counter decrements the value until it reaches 0. The DPSM then moves to the Idle state and when there has been no error, the data status end flag (DATAEND) is set.
            SDMMC_DCNTR: mmio.Mmio(packed struct(u32) {
                ///  Data count value When read, the number of remaining data bytes to be transferred is returned. Write has no effect.
                DATACOUNT: u25,
                padding: u7,
            }),
            ///  The SDMMC_STAR register is a read-only register. It contains two types of flag:Static flags (bits [29,21,11:0]): these bits remain asserted until they are cleared by writing to the SDMMC interrupt Clear register (see SDMMC_ICR)Dynamic flags (bits [20:12]): these bits change state depending on the state of the underlying logic (for example, FIFO full and empty flags are asserted and de-asserted as data while written to the FIFO)
            SDMMC_STAR: mmio.Mmio(packed struct(u32) {
                ///  Command response received (CRC check failed). Interrupt flag is cleared by writing corresponding interrupt clear bit in SDMMC_ICR.
                CCRCFAIL: u1,
                ///  Data block sent/received (CRC check failed). Interrupt flag is cleared by writing corresponding interrupt clear bit in SDMMC_ICR.
                DCRCFAIL: u1,
                ///  Command response timeout. Interrupt flag is cleared by writing corresponding interrupt clear bit in SDMMC_ICR. The Command Timeout period has a fixed value of 64 SDMMC_CK clock periods.
                CTIMEOUT: u1,
                ///  Data timeout. Interrupt flag is cleared by writing corresponding interrupt clear bit in SDMMC_ICR.
                DTIMEOUT: u1,
                ///  Transmit FIFO underrun error or IDMA read transfer error. Interrupt flag is cleared by writing corresponding interrupt clear bit in SDMMC_ICR.
                TXUNDERR: u1,
                ///  Received FIFO overrun error or IDMA write transfer error. Interrupt flag is cleared by writing corresponding interrupt clear bit in SDMMC_ICR.
                RXOVERR: u1,
                ///  Command response received (CRC check passed, or no CRC). Interrupt flag is cleared by writing corresponding interrupt clear bit in SDMMC_ICR.
                CMDREND: u1,
                ///  Command sent (no response required). Interrupt flag is cleared by writing corresponding interrupt clear bit in SDMMC_ICR.
                CMDSENT: u1,
                ///  Data transfer ended correctly. (data counter, DATACOUNT is zero and no errors occur). Interrupt flag is cleared by writing corresponding interrupt clear bit in SDMMC_ICR.
                DATAEND: u1,
                ///  Data transfer Hold. Interrupt flag is cleared by writing corresponding interrupt clear bit in SDMMC_ICR.
                DHOLD: u1,
                ///  Data block sent/received. (CRC check passed) and DPSM moves to the READWAIT state. Interrupt flag is cleared by writing corresponding interrupt clear bit in SDMMC_ICR.
                DBCKEND: u1,
                ///  Data transfer aborted by CMD12. Interrupt flag is cleared by writing corresponding interrupt clear bit in SDMMC_ICR.
                DABORT: u1,
                ///  Data path state machine active, i.e. not in Idle state. This is a hardware status flag only, does not generate an interrupt.
                DPSMACT: u1,
                ///  Command path state machine active, i.e. not in Idle state. This is a hardware status flag only, does not generate an interrupt.
                CPSMACT: u1,
                ///  Transmit FIFO half empty At least half the number of words can be written into the FIFO. This bit is cleared when the FIFO becomes half+1 full.
                TXFIFOHE: u1,
                ///  Receive FIFO half full There are at least half the number of words in the FIFO. This bit is cleared when the FIFO becomes half+1 empty.
                RXFIFOHF: u1,
                ///  Transmit FIFO full This is a hardware status flag only, does not generate an interrupt. This bit is cleared when one FIFO location becomes empty.
                TXFIFOF: u1,
                ///  Receive FIFO full This bit is cleared when one FIFO location becomes empty.
                RXFIFOF: u1,
                ///  Transmit FIFO empty This bit is cleared when one FIFO location becomes full.
                TXFIFOE: u1,
                ///  Receive FIFO empty This is a hardware status flag only, does not generate an interrupt. This bit is cleared when one FIFO location becomes full.
                RXFIFOE: u1,
                ///  Inverted value of SDMMC_D0 line (Busy), sampled at the end of a CMD response and a second time 2 SDMMC_CK cycles after the CMD response. This bit is reset to not busy when the SDMMCD0 line changes from busy to not busy. This bit does not signal busy due to data transfer. This is a hardware status flag only, it does not generate an interrupt.
                BUSYD0: u1,
                ///  end of SDMMC_D0 Busy following a CMD response detected. This indicates only end of busy following a CMD response. This bit does not signal busy due to data transfer. Interrupt flag is cleared by writing corresponding interrupt clear bit in SDMMC_ICR.
                BUSYD0END: u1,
                ///  SDIO interrupt received. Interrupt flag is cleared by writing corresponding interrupt clear bit in SDMMC_ICR.
                SDIOIT: u1,
                ///  Boot acknowledgment received (boot acknowledgment check fail). Interrupt flag is cleared by writing corresponding interrupt clear bit in SDMMC_ICR.
                ACKFAIL: u1,
                ///  Boot acknowledgment timeout. Interrupt flag is cleared by writing corresponding interrupt clear bit in SDMMC_ICR.
                ACKTIMEOUT: u1,
                ///  Voltage switch critical timing section completion. Interrupt flag is cleared by writing corresponding interrupt clear bit in SDMMC_ICR.
                VSWEND: u1,
                ///  SDMMC_CK stopped in Voltage switch procedure. Interrupt flag is cleared by writing corresponding interrupt clear bit in SDMMC_ICR.
                CKSTOP: u1,
                ///  IDMA transfer error. Interrupt flag is cleared by writing corresponding interrupt clear bit in SDMMC_ICR.
                IDMATE: u1,
                ///  IDMA buffer transfer complete. interrupt flag is cleared by writing corresponding interrupt clear bit in SDMMC_ICR.
                IDMABTC: u1,
                padding: u3,
            }),
            ///  The SDMMC_ICR register is a write-only register. Writing a bit with 1 clears the corresponding bit in the SDMMC_STAR status register.
            SDMMC_ICR: mmio.Mmio(packed struct(u32) {
                ///  CCRCFAIL flag clear bit Set by software to clear the CCRCFAIL flag.
                CCRCFAILC: u1,
                ///  DCRCFAIL flag clear bit Set by software to clear the DCRCFAIL flag.
                DCRCFAILC: u1,
                ///  CTIMEOUT flag clear bit Set by software to clear the CTIMEOUT flag.
                CTIMEOUTC: u1,
                ///  DTIMEOUT flag clear bit Set by software to clear the DTIMEOUT flag.
                DTIMEOUTC: u1,
                ///  TXUNDERR flag clear bit Set by software to clear TXUNDERR flag.
                TXUNDERRC: u1,
                ///  RXOVERR flag clear bit Set by software to clear the RXOVERR flag.
                RXOVERRC: u1,
                ///  CMDREND flag clear bit Set by software to clear the CMDREND flag.
                CMDRENDC: u1,
                ///  CMDSENT flag clear bit Set by software to clear the CMDSENT flag.
                CMDSENTC: u1,
                ///  DATAEND flag clear bit Set by software to clear the DATAEND flag.
                DATAENDC: u1,
                ///  DHOLD flag clear bit Set by software to clear the DHOLD flag.
                DHOLDC: u1,
                ///  DBCKEND flag clear bit Set by software to clear the DBCKEND flag.
                DBCKENDC: u1,
                ///  DABORT flag clear bit Set by software to clear the DABORT flag.
                DABORTC: u1,
                reserved21: u9,
                ///  BUSYD0END flag clear bit Set by software to clear the BUSYD0END flag.
                BUSYD0ENDC: u1,
                ///  SDIOIT flag clear bit Set by software to clear the SDIOIT flag.
                SDIOITC: u1,
                ///  ACKFAIL flag clear bit Set by software to clear the ACKFAIL flag.
                ACKFAILC: u1,
                ///  ACKTIMEOUT flag clear bit Set by software to clear the ACKTIMEOUT flag.
                ACKTIMEOUTC: u1,
                ///  VSWEND flag clear bit Set by software to clear the VSWEND flag.
                VSWENDC: u1,
                ///  CKSTOP flag clear bit Set by software to clear the CKSTOP flag.
                CKSTOPC: u1,
                ///  IDMA transfer error clear bit Set by software to clear the IDMATE flag.
                IDMATEC: u1,
                ///  IDMA buffer transfer complete clear bit Set by software to clear the IDMABTC flag.
                IDMABTCC: u1,
                padding: u3,
            }),
            ///  The interrupt mask register determines which status flags generate an interrupt request by setting the corresponding bit to 1.
            SDMMC_MASKR: mmio.Mmio(packed struct(u32) {
                ///  Command CRC fail interrupt enable Set and cleared by software to enable/disable interrupt caused by command CRC failure.
                CCRCFAILIE: u1,
                ///  Data CRC fail interrupt enable Set and cleared by software to enable/disable interrupt caused by data CRC failure.
                DCRCFAILIE: u1,
                ///  Command timeout interrupt enable Set and cleared by software to enable/disable interrupt caused by command timeout.
                CTIMEOUTIE: u1,
                ///  Data timeout interrupt enable Set and cleared by software to enable/disable interrupt caused by data timeout.
                DTIMEOUTIE: u1,
                ///  Tx FIFO underrun error interrupt enable Set and cleared by software to enable/disable interrupt caused by Tx FIFO underrun error.
                TXUNDERRIE: u1,
                ///  Rx FIFO overrun error interrupt enable Set and cleared by software to enable/disable interrupt caused by Rx FIFO overrun error.
                RXOVERRIE: u1,
                ///  Command response received interrupt enable Set and cleared by software to enable/disable interrupt caused by receiving command response.
                CMDRENDIE: u1,
                ///  Command sent interrupt enable Set and cleared by software to enable/disable interrupt caused by sending command.
                CMDSENTIE: u1,
                ///  Data end interrupt enable Set and cleared by software to enable/disable interrupt caused by data end.
                DATAENDIE: u1,
                ///  Data hold interrupt enable Set and cleared by software to enable/disable the interrupt generated when sending new data is hold in the DPSM Wait_S state.
                DHOLDIE: u1,
                ///  Data block end interrupt enable Set and cleared by software to enable/disable interrupt caused by data block end.
                DBCKENDIE: u1,
                ///  Data transfer aborted interrupt enable Set and cleared by software to enable/disable interrupt caused by a data transfer being aborted.
                DABORTIE: u1,
                reserved14: u2,
                ///  Tx FIFO half empty interrupt enable Set and cleared by software to enable/disable interrupt caused by Tx FIFO half empty.
                TXFIFOHEIE: u1,
                ///  Rx FIFO half full interrupt enable Set and cleared by software to enable/disable interrupt caused by Rx FIFO half full.
                RXFIFOHFIE: u1,
                reserved17: u1,
                ///  Rx FIFO full interrupt enable Set and cleared by software to enable/disable interrupt caused by Rx FIFO full.
                RXFIFOFIE: u1,
                ///  Tx FIFO empty interrupt enable Set and cleared by software to enable/disable interrupt caused by Tx FIFO empty.
                TXFIFOEIE: u1,
                reserved21: u2,
                ///  BUSYD0END interrupt enable Set and cleared by software to enable/disable the interrupt generated when SDMMC_D0 signal changes from busy to NOT busy following a CMD response.
                BUSYD0ENDIE: u1,
                ///  SDIO mode interrupt received interrupt enable Set and cleared by software to enable/disable the interrupt generated when receiving the SDIO mode interrupt.
                SDIOITIE: u1,
                ///  Acknowledgment Fail interrupt enable Set and cleared by software to enable/disable interrupt caused by acknowledgment Fail.
                ACKFAILIE: u1,
                ///  Acknowledgment timeout interrupt enable Set and cleared by software to enable/disable interrupt caused by acknowledgment timeout.
                ACKTIMEOUTIE: u1,
                ///  Voltage switch critical timing section completion interrupt enable Set and cleared by software to enable/disable the interrupt generated when voltage switch critical timing section completion.
                VSWENDIE: u1,
                ///  Voltage Switch clock stopped interrupt enable Set and cleared by software to enable/disable interrupt caused by Voltage Switch clock stopped.
                CKSTOPIE: u1,
                reserved28: u1,
                ///  IDMA buffer transfer complete interrupt enable Set and cleared by software to enable/disable the interrupt generated when the IDMA has transferred all data belonging to a memory buffer.
                IDMABTCIE: u1,
                padding: u3,
            }),
            ///  The SDMMC_ACKTIMER register contains the acknowledgment timeout period, in SDMMC_CK bus clock periods. A counter loads the value from the SDMMC_ACKTIMER register, and starts decrementing when the data path state machine (DPSM) enters the Wait_Ack state. If the timer reaches 0 while the DPSM is in this states, the acknowledgment timeout status flag is set.
            SDMMC_ACKTIMER: mmio.Mmio(packed struct(u32) {
                ///  Boot acknowledgment timeout period This bit can only be written by firmware when CPSM is disabled (CPSMEN = 0). Boot acknowledgment timeout period expressed in card bus clock periods.
                ACKTIME: u25,
                padding: u7,
            }),
            reserved80: [12]u8,
            ///  The receive and transmit FIFOs can be read or written as 32-bit wide registers. The FIFOs contain 32 entries on 32 sequential addresses. This allows the CPU to use its load and store multiple operands to read from/write to the FIFO.
            SDMMC_IDMACTRLR: mmio.Mmio(packed struct(u32) {
                ///  IDMA enable This bit can only be written by firmware when DPSM is inactive (DPSMACT = 0).
                IDMAEN: u1,
                ///  Buffer mode selection. This bit can only be written by firmware when DPSM is inactive (DPSMACT = 0).
                IDMABMODE: u1,
                ///  Double buffer mode active buffer indication This bit can only be written by firmware when DPSM is inactive (DPSMACT = 0). When IDMA is enabled this bit is toggled by hardware.
                IDMABACT: u1,
                padding: u29,
            }),
            ///  The SDMMC_IDMABSIZER register contains the buffers size when in double buffer configuration.
            SDMMC_IDMABSIZER: mmio.Mmio(packed struct(u32) {
                reserved5: u5,
                ///  Number of transfers per buffer. This 8-bit value shall be multiplied by 8 to get the size of the buffer in 32-bit words and by 32 to get the size of the buffer in bytes. Example: IDMABNDT = 0x01: buffer size = 8 words = 32 bytes. These bits can only be written by firmware when DPSM is inactive (DPSMACT = 0).
                IDMABNDT: u8,
                padding: u19,
            }),
            ///  The SDMMC_IDMABASE0R register contains the memory buffer base address in single buffer configuration and the buffer 0 base address in double buffer configuration.
            SDMMC_IDMABASE0R: mmio.Mmio(packed struct(u32) {
                ///  Buffer 0 memory base address bits [31:2], shall be word aligned (bit [1:0] are always 0 and read only). This register can be written by firmware when DPSM is inactive (DPSMACT = 0), and can dynamically be written by firmware when DPSM active (DPSMACT = 1) and memory buffer 0 is inactive (IDMABACT = 1).
                IDMABASE0: u32,
            }),
            ///  The SDMMC_IDMABASE1R register contains the double buffer configuration second buffer memory base address.
            SDMMC_IDMABASE1R: mmio.Mmio(packed struct(u32) {
                ///  Buffer 1 memory base address, shall be word aligned (bit [1:0] are always 0 and read only). This register can be written by firmware when DPSM is inactive (DPSMACT = 0), and can dynamically be written by firmware when DPSM active (DPSMACT = 1) and memory buffer 1 is inactive (IDMABACT = 0).
                IDMABASE1: u32,
            }),
            reserved128: [32]u8,
            ///  The receive and transmit FIFOs can be only read or written as word (32-bit) wide registers. The FIFOs contain 16 entries on sequential addresses. This allows the CPU to use its load and store multiple operands to read from/write to the FIFO.When accessing SDMMC_FIFOR with half word or byte access an AHB bus fault is generated.
            SDMMC_FIFOR: mmio.Mmio(packed struct(u32) {
                ///  Receive and transmit FIFO data This register can only be read or written by firmware when the DPSM is active (DPSMACT=1). The FIFO data occupies 16 entries of 32-bit words.
                FIFODATA: u32,
            }),
            reserved1012: [880]u8,
            ///  SDMMC IP version register
            SDMMC_VER: mmio.Mmio(packed struct(u32) {
                ///  IP minor revision number.
                MINREV: u4,
                ///  IP major revision number.
                MAJREV: u4,
                padding: u24,
            }),
            ///  SDMMC IP identification register
            SDMMC_ID: mmio.Mmio(packed struct(u32) {
                ///  SDMMC IP identification.
                IP_ID: u32,
            }),
        };

        ///  General-purpose I/Os
        pub const GPIOB = extern struct {
            ///  GPIO port mode register
            MODER: mmio.Mmio(packed struct(u32) {
                ///  Port x configuration bits (y = 0..15)
                MODER0: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER1: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER2: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER3: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER4: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER5: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER6: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER7: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER8: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER9: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER10: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER11: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER12: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER13: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER14: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER15: u2,
            }),
            ///  GPIO port output type register
            OTYPER: mmio.Mmio(packed struct(u32) {
                ///  Port x configuration bits (y = 0..15)
                OT0: u1,
                ///  Port x configuration bits (y = 0..15)
                OT1: u1,
                ///  Port x configuration bits (y = 0..15)
                OT2: u1,
                ///  Port x configuration bits (y = 0..15)
                OT3: u1,
                ///  Port x configuration bits (y = 0..15)
                OT4: u1,
                ///  Port x configuration bits (y = 0..15)
                OT5: u1,
                ///  Port x configuration bits (y = 0..15)
                OT6: u1,
                ///  Port x configuration bits (y = 0..15)
                OT7: u1,
                ///  Port x configuration bits (y = 0..15)
                OT8: u1,
                ///  Port x configuration bits (y = 0..15)
                OT9: u1,
                ///  Port x configuration bits (y = 0..15)
                OT10: u1,
                ///  Port x configuration bits (y = 0..15)
                OT11: u1,
                ///  Port x configuration bits (y = 0..15)
                OT12: u1,
                ///  Port x configuration bits (y = 0..15)
                OT13: u1,
                ///  Port x configuration bits (y = 0..15)
                OT14: u1,
                ///  Port x configuration bits (y = 0..15)
                OT15: u1,
                padding: u16,
            }),
            ///  GPIO port output speed register
            OSPEEDR: mmio.Mmio(packed struct(u32) {
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR0: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR1: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR2: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR3: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR4: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR5: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR6: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR7: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR8: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR9: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR10: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR11: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR12: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR13: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR14: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR15: u2,
            }),
            ///  GPIO port pull-up/pull-down register
            PUPDR: mmio.Mmio(packed struct(u32) {
                ///  Port x configuration bits (y = 0..15)
                PUPDR0: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR1: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR2: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR3: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR4: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR5: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR6: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR7: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR8: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR9: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR10: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR11: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR12: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR13: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR14: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR15: u2,
            }),
            ///  GPIO port input data register
            IDR: mmio.Mmio(packed struct(u32) {
                ///  Port input data (y = 0..15)
                IDR0: u1,
                ///  Port input data (y = 0..15)
                IDR1: u1,
                ///  Port input data (y = 0..15)
                IDR2: u1,
                ///  Port input data (y = 0..15)
                IDR3: u1,
                ///  Port input data (y = 0..15)
                IDR4: u1,
                ///  Port input data (y = 0..15)
                IDR5: u1,
                ///  Port input data (y = 0..15)
                IDR6: u1,
                ///  Port input data (y = 0..15)
                IDR7: u1,
                ///  Port input data (y = 0..15)
                IDR8: u1,
                ///  Port input data (y = 0..15)
                IDR9: u1,
                ///  Port input data (y = 0..15)
                IDR10: u1,
                ///  Port input data (y = 0..15)
                IDR11: u1,
                ///  Port input data (y = 0..15)
                IDR12: u1,
                ///  Port input data (y = 0..15)
                IDR13: u1,
                ///  Port input data (y = 0..15)
                IDR14: u1,
                ///  Port input data (y = 0..15)
                IDR15: u1,
                padding: u16,
            }),
            ///  GPIO port output data register
            ODR: mmio.Mmio(packed struct(u32) {
                ///  Port output data (y = 0..15)
                ODR0: u1,
                ///  Port output data (y = 0..15)
                ODR1: u1,
                ///  Port output data (y = 0..15)
                ODR2: u1,
                ///  Port output data (y = 0..15)
                ODR3: u1,
                ///  Port output data (y = 0..15)
                ODR4: u1,
                ///  Port output data (y = 0..15)
                ODR5: u1,
                ///  Port output data (y = 0..15)
                ODR6: u1,
                ///  Port output data (y = 0..15)
                ODR7: u1,
                ///  Port output data (y = 0..15)
                ODR8: u1,
                ///  Port output data (y = 0..15)
                ODR9: u1,
                ///  Port output data (y = 0..15)
                ODR10: u1,
                ///  Port output data (y = 0..15)
                ODR11: u1,
                ///  Port output data (y = 0..15)
                ODR12: u1,
                ///  Port output data (y = 0..15)
                ODR13: u1,
                ///  Port output data (y = 0..15)
                ODR14: u1,
                ///  Port output data (y = 0..15)
                ODR15: u1,
                padding: u16,
            }),
            ///  GPIO port bit set/reset register
            BSRR: mmio.Mmio(packed struct(u32) {
                ///  Port x set bit y (y= 0..15)
                BS0: u1,
                ///  Port x set bit y (y= 0..15)
                BS1: u1,
                ///  Port x set bit y (y= 0..15)
                BS2: u1,
                ///  Port x set bit y (y= 0..15)
                BS3: u1,
                ///  Port x set bit y (y= 0..15)
                BS4: u1,
                ///  Port x set bit y (y= 0..15)
                BS5: u1,
                ///  Port x set bit y (y= 0..15)
                BS6: u1,
                ///  Port x set bit y (y= 0..15)
                BS7: u1,
                ///  Port x set bit y (y= 0..15)
                BS8: u1,
                ///  Port x set bit y (y= 0..15)
                BS9: u1,
                ///  Port x set bit y (y= 0..15)
                BS10: u1,
                ///  Port x set bit y (y= 0..15)
                BS11: u1,
                ///  Port x set bit y (y= 0..15)
                BS12: u1,
                ///  Port x set bit y (y= 0..15)
                BS13: u1,
                ///  Port x set bit y (y= 0..15)
                BS14: u1,
                ///  Port x set bit y (y= 0..15)
                BS15: u1,
                ///  Port x set bit y (y= 0..15)
                BR0: u1,
                ///  Port x reset bit y (y = 0..15)
                BR1: u1,
                ///  Port x reset bit y (y = 0..15)
                BR2: u1,
                ///  Port x reset bit y (y = 0..15)
                BR3: u1,
                ///  Port x reset bit y (y = 0..15)
                BR4: u1,
                ///  Port x reset bit y (y = 0..15)
                BR5: u1,
                ///  Port x reset bit y (y = 0..15)
                BR6: u1,
                ///  Port x reset bit y (y = 0..15)
                BR7: u1,
                ///  Port x reset bit y (y = 0..15)
                BR8: u1,
                ///  Port x reset bit y (y = 0..15)
                BR9: u1,
                ///  Port x reset bit y (y = 0..15)
                BR10: u1,
                ///  Port x reset bit y (y = 0..15)
                BR11: u1,
                ///  Port x reset bit y (y = 0..15)
                BR12: u1,
                ///  Port x reset bit y (y = 0..15)
                BR13: u1,
                ///  Port x reset bit y (y = 0..15)
                BR14: u1,
                ///  Port x reset bit y (y = 0..15)
                BR15: u1,
            }),
            ///  GPIO port configuration lock register
            LCKR: mmio.Mmio(packed struct(u32) {
                ///  Port x lock bit y (y= 0..15)
                LCK0: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK1: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK2: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK3: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK4: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK5: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK6: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK7: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK8: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK9: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK10: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK11: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK12: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK13: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK14: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK15: u1,
                ///  Port x lock bit y (y= 0..15)
                LCKK: u1,
                padding: u15,
            }),
            ///  GPIO alternate function low register
            AFRL: mmio.Mmio(packed struct(u32) {
                ///  Alternate function selection for port x bit y (y = 0..7)
                AFSEL0: u4,
                ///  Alternate function selection for port x bit y (y = 0..7)
                AFSEL1: u4,
                ///  Alternate function selection for port x bit y (y = 0..7)
                AFSEL2: u4,
                ///  Alternate function selection for port x bit y (y = 0..7)
                AFSEL3: u4,
                ///  Alternate function selection for port x bit y (y = 0..7)
                AFSEL4: u4,
                ///  Alternate function selection for port x bit y (y = 0..7)
                AFSEL5: u4,
                ///  Alternate function selection for port x bit y (y = 0..7)
                AFSEL6: u4,
                ///  Alternate function selection for port x bit y (y = 0..7)
                AFSEL7: u4,
            }),
            ///  GPIO alternate function high register
            AFRH: mmio.Mmio(packed struct(u32) {
                ///  Alternate function selection for port x bit y (y = 8..15)
                AFSEL8: u4,
                ///  Alternate function selection for port x bit y (y = 8..15)
                AFSEL9: u4,
                ///  Alternate function selection for port x bit y (y = 8..15)
                AFSEL10: u4,
                ///  Alternate function selection for port x bit y (y = 8..15)
                AFSEL11: u4,
                ///  Alternate function selection for port x bit y (y = 8..15)
                AFSEL12: u4,
                ///  Alternate function selection for port x bit y (y = 8..15)
                AFSEL13: u4,
                ///  Alternate function selection for port x bit y (y = 8..15)
                AFSEL14: u4,
                ///  Alternate function selection for port x bit y (y = 8..15)
                AFSEL15: u4,
            }),
            ///  GPIO port bit reset register
            BRR: mmio.Mmio(packed struct(u32) {
                ///  Port x reset IO pin y
                BR0: u1,
                ///  Port x reset IO pin y
                BR1: u1,
                ///  Port x reset IO pin y
                BR2: u1,
                ///  Port x reset IO pin y
                BR3: u1,
                ///  Port x reset IO pin y
                BR4: u1,
                ///  Port x reset IO pin y
                BR5: u1,
                ///  Port x reset IO pin y
                BR6: u1,
                ///  Port x reset IO pin y
                BR7: u1,
                ///  Port x reset IO pin y
                BR8: u1,
                ///  Port x reset IO pin y
                BR9: u1,
                ///  Port x reset IO pin y
                BR10: u1,
                ///  Port x reset IO pin y
                BR11: u1,
                ///  Port x reset IO pin y
                BR12: u1,
                ///  Port x reset IO pin y
                BR13: u1,
                ///  Port x reset IO pin y
                BR14: u1,
                ///  Port x reset IO pin y
                BR15: u1,
                padding: u16,
            }),
            reserved48: [4]u8,
            ///  GPIO secure configuration register
            SECCFGR: mmio.Mmio(packed struct(u32) {
                ///  I/O pin of Port x secure bit enable
                SEC0: u1,
                ///  I/O pin of Port x secure bit enable
                SEC1: u1,
                ///  I/O pin of Port x secure bit enable
                SEC2: u1,
                ///  I/O pin of Port x secure bit enable
                SEC3: u1,
                ///  I/O pin of Port x secure bit enable
                SEC4: u1,
                ///  I/O pin of Port x secure bit enable
                SEC5: u1,
                ///  I/O pin of Port x secure bit enable
                SEC6: u1,
                ///  I/O pin of Port x secure bit enable
                SEC7: u1,
                ///  I/O pin of Port x secure bit enable
                SEC8: u1,
                ///  I/O pin of Port x secure bit enable
                SEC9: u1,
                ///  I/O pin of Port x secure bit enable
                SEC10: u1,
                ///  I/O pin of Port x secure bit enable
                SEC11: u1,
                ///  I/O pin of Port x secure bit enable
                SEC12: u1,
                ///  I/O pin of Port x secure bit enable
                SEC13: u1,
                ///  I/O pin of Port x secure bit enable
                SEC14: u1,
                ///  I/O pin of Port x secure bit enable
                SEC15: u1,
                padding: u16,
            }),
        };

        ///  DAC
        pub const DAC = extern struct {
            ///  DAC control register
            DAC_CR: mmio.Mmio(packed struct(u32) {
                ///  DAC channel1 enable This bit is set and cleared by software to enable/disable DAC channel1.
                EN1: u1,
                ///  DAC channel1 trigger enable
                TEN1: u1,
                ///  TSEL10
                TSEL10: u1,
                ///  TSEL11
                TSEL11: u1,
                ///  TSEL12
                TSEL12: u1,
                ///  TSEL13
                TSEL13: u1,
                ///  DAC channel1 noise/triangle wave generation enable These bits are set and cleared by software. Note: Only used if bit TEN1 = 1 (DAC channel1 trigger enabled).
                WAVE1: u2,
                ///  DAC channel1 mask/amplitude selector These bits are written by software to select mask in wave generation mode or amplitude in triangle generation mode. = 1011: Unmask bits[11:0] of LFSR/ triangle amplitude equal to 4095
                MAMP1: u4,
                ///  DAC channel1 DMA enable This bit is set and cleared by software.
                DMAEN1: u1,
                ///  DAC channel1 DMA Underrun Interrupt enable This bit is set and cleared by software.
                DMAUDRIE1: u1,
                ///  DAC Channel 1 calibration enable This bit is set and cleared by software to enable/disable DAC channel 1 calibration, it can be written only if bit EN1=0 into DAC_CR (the calibration mode can be entered/exit only when the DAC channel is disabled) Otherwise, the write operation is ignored.
                CEN1: u1,
                ///  HFSEL
                HFSEL: u1,
                ///  DAC channel2 enable This bit is set and cleared by software to enable/disable DAC channel2.
                EN2: u1,
                ///  DAC channel2 trigger enable
                TEN2: u1,
                ///  TSEL20
                TSEL20: u1,
                ///  TSEL21
                TSEL21: u1,
                ///  TSEL22
                TSEL22: u1,
                ///  TSEL23
                TSEL23: u1,
                ///  DAC channel2 noise/triangle wave generation enable These bits are set/reset by software. 1x: Triangle wave generation enabled Note: Only used if bit TEN2 = 1 (DAC channel2 trigger enabled)
                WAVE2: u2,
                ///  DAC channel2 mask/amplitude selector These bits are written by software to select mask in wave generation mode or amplitude in triangle generation mode. = 1011: Unmask bits[11:0] of LFSR/ triangle amplitude equal to 4095
                MAMP2: u4,
                ///  DAC channel2 DMA enable This bit is set and cleared by software.
                DMAEN2: u1,
                ///  DAC channel2 DMA underrun interrupt enable This bit is set and cleared by software.
                DMAUDRIE2: u1,
                ///  DAC Channel 2 calibration enable This bit is set and cleared by software to enable/disable DAC channel 2 calibration, it can be written only if bit EN2=0 into DAC_CR (the calibration mode can be entered/exit only when the DAC channel is disabled) Otherwise, the write operation is ignored.
                CEN2: u1,
                padding: u1,
            }),
            ///  DAC software trigger register
            DAC_SWTRGR: mmio.Mmio(packed struct(u32) {
                ///  DAC channel1 software trigger This bit is set by software to trigger the DAC in software trigger mode. Note: This bit is cleared by hardware (one APB1 clock cycle later) once the DAC_DHR1 register value has been loaded into the DAC_DOR1 register.
                SWTRIG1: u1,
                ///  DAC channel2 software trigger This bit is set by software to trigger the DAC in software trigger mode. Note: This bit is cleared by hardware (one APB1 clock cycle later) once the DAC_DHR2 register value has been loaded into the DAC_DOR2 register.
                SWTRIG2: u1,
                padding: u30,
            }),
            ///  DAC channel1 12-bit right-aligned data holding register
            DAC_DHR12R1: mmio.Mmio(packed struct(u32) {
                ///  DAC channel1 12-bit right-aligned data These bits are written by software which specifies 12-bit data for DAC channel1.
                DACC1DHR: u12,
                padding: u20,
            }),
            ///  DAC channel1 12-bit left aligned data holding register
            DAC_DHR12L1: mmio.Mmio(packed struct(u32) {
                reserved4: u4,
                ///  DAC channel1 12-bit left-aligned data These bits are written by software which specifies 12-bit data for DAC channel1.
                DACC1DHR: u12,
                padding: u16,
            }),
            ///  DAC channel1 8-bit right aligned data holding register
            DAC_DHR8R1: mmio.Mmio(packed struct(u32) {
                ///  DAC channel1 8-bit right-aligned data These bits are written by software which specifies 8-bit data for DAC channel1.
                DACC1DHR: u8,
                padding: u24,
            }),
            ///  DAC channel2 12-bit right aligned data holding register
            DAC_DHR12R2: mmio.Mmio(packed struct(u32) {
                ///  DAC channel2 12-bit right-aligned data These bits are written by software which specifies 12-bit data for DAC channel2.
                DACC2DHR: u12,
                padding: u20,
            }),
            ///  DAC channel2 12-bit left aligned data holding register
            DAC_DHR12L2: mmio.Mmio(packed struct(u32) {
                reserved4: u4,
                ///  DAC channel2 12-bit left-aligned data These bits are written by software which specify 12-bit data for DAC channel2.
                DACC2DHR: u12,
                padding: u16,
            }),
            ///  DAC channel2 8-bit right-aligned data holding register
            DAC_DHR8R2: mmio.Mmio(packed struct(u32) {
                ///  DAC channel2 8-bit right-aligned data These bits are written by software which specifies 8-bit data for DAC channel2.
                DACC2DHR: u8,
                padding: u24,
            }),
            ///  Dual DAC 12-bit right-aligned data holding register
            DAC_DHR12RD: mmio.Mmio(packed struct(u32) {
                ///  DAC channel1 12-bit right-aligned data These bits are written by software which specifies 12-bit data for DAC channel1.
                DACC1DHR: u12,
                reserved16: u4,
                ///  DAC channel2 12-bit right-aligned data These bits are written by software which specifies 12-bit data for DAC channel2.
                DACC2DHR: u12,
                padding: u4,
            }),
            ///  DUAL DAC 12-bit left aligned data holding register
            DAC_DHR12LD: mmio.Mmio(packed struct(u32) {
                reserved4: u4,
                ///  DAC channel1 12-bit left-aligned data These bits are written by software which specifies 12-bit data for DAC channel1.
                DACC1DHR: u12,
                reserved20: u4,
                ///  DAC channel2 12-bit left-aligned data These bits are written by software which specifies 12-bit data for DAC channel2.
                DACC2DHR: u12,
            }),
            ///  DUAL DAC 8-bit right aligned data holding register
            DAC_DHR8RD: mmio.Mmio(packed struct(u32) {
                ///  DAC channel1 8-bit right-aligned data These bits are written by software which specifies 8-bit data for DAC channel1.
                DACC1DHR: u8,
                ///  DAC channel2 8-bit right-aligned data These bits are written by software which specifies 8-bit data for DAC channel2.
                DACC2DHR: u8,
                padding: u16,
            }),
            ///  DAC channel1 data output register
            DAC_DOR1: mmio.Mmio(packed struct(u32) {
                ///  DAC channel1 data output These bits are read-only, they contain data output for DAC channel1.
                DACC1DOR: u12,
                padding: u20,
            }),
            ///  DAC channel2 data output register
            DAC_DOR2: mmio.Mmio(packed struct(u32) {
                ///  DAC channel2 data output These bits are read-only, they contain data output for DAC channel2.
                DACC2DOR: u12,
                padding: u20,
            }),
            ///  DAC status register
            DAC_SR: mmio.Mmio(packed struct(u32) {
                reserved13: u13,
                ///  DAC channel1 DMA underrun flag This bit is set by hardware and cleared by software (by writing it to 1).
                DMAUDR1: u1,
                ///  DAC Channel 1 calibration offset status This bit is set and cleared by hardware
                CAL_FLAG1: u1,
                ///  DAC Channel 1 busy writing sample time flag This bit is systematically set just after Sample & Hold mode enable and is set each time the software writes the register DAC_SHSR1, It is cleared by hardware when the write operation of DAC_SHSR1 is complete. (It takes about 3LSI periods of synchronization).
                BWST1: u1,
                reserved29: u13,
                ///  DAC channel2 DMA underrun flag This bit is set by hardware and cleared by software (by writing it to 1).
                DMAUDR2: u1,
                ///  DAC Channel 2 calibration offset status This bit is set and cleared by hardware
                CAL_FLAG2: u1,
                ///  DAC Channel 2 busy writing sample time flag This bit is systematically set just after Sample & Hold mode enable and is set each time the software writes the register DAC_SHSR2, It is cleared by hardware when the write operation of DAC_SHSR2 is complete. (It takes about 3 LSI periods of synchronization).
                BWST2: u1,
            }),
            ///  DAC calibration control register
            DAC_CCR: mmio.Mmio(packed struct(u32) {
                ///  DAC Channel 1 offset trimming value
                OTRIM1: u5,
                reserved16: u11,
                ///  DAC Channel 2 offset trimming value
                OTRIM2: u5,
                padding: u11,
            }),
            ///  DAC mode control register
            DAC_MCR: mmio.Mmio(packed struct(u32) {
                ///  DAC Channel 1 mode These bits can be written only when the DAC is disabled and not in the calibration mode (when bit EN1=0 and bit CEN1 =0 in the DAC_CR register). If EN1=1 or CEN1 =1 the write operation is ignored. They can be set and cleared by software to select the DAC Channel 1 mode: DAC Channel 1 in normal Mode DAC Channel 1 in sample &amp; hold mode
                MODE1: u3,
                reserved16: u13,
                ///  DAC Channel 2 mode These bits can be written only when the DAC is disabled and not in the calibration mode (when bit EN2=0 and bit CEN2 =0 in the DAC_CR register). If EN2=1 or CEN2 =1 the write operation is ignored. They can be set and cleared by software to select the DAC Channel 2 mode: DAC Channel 2 in normal Mode DAC Channel 2 in sample &amp; hold mode
                MODE2: u3,
                padding: u13,
            }),
            ///  DAC Sample and Hold sample time register 1
            DAC_SHSR1: mmio.Mmio(packed struct(u32) {
                ///  DAC Channel 1 sample Time (only valid in sample &amp; hold mode) These bits can be written when the DAC channel1 is disabled or also during normal operation. in the latter case, the write can be done only when BWSTx of DAC_SR register is low, If BWSTx=1, the write operation is ignored.
                TSAMPLE1: u10,
                padding: u22,
            }),
            ///  DAC Sample and Hold sample time register 2
            DAC_SHSR2: mmio.Mmio(packed struct(u32) {
                ///  DAC Channel 2 sample Time (only valid in sample &amp; hold mode) These bits can be written when the DAC channel2 is disabled or also during normal operation. in the latter case, the write can be done only when BWSTx of DAC_SR register is low, if BWSTx=1, the write operation is ignored.
                TSAMPLE2: u10,
                padding: u22,
            }),
            ///  DAC Sample and Hold hold time register
            DAC_SHHR: mmio.Mmio(packed struct(u32) {
                ///  DAC Channel 1 hold Time (only valid in sample &amp; hold mode) Hold time= (THOLD[9:0]) x T LSI
                THOLD1: u10,
                reserved16: u6,
                ///  DAC Channel 2 hold time (only valid in sample &amp; hold mode). Hold time= (THOLD[9:0]) x T LSI
                THOLD2: u10,
                padding: u6,
            }),
            ///  DAC Sample and Hold refresh time register
            DAC_SHRR: mmio.Mmio(packed struct(u32) {
                ///  DAC Channel 1 refresh Time (only valid in sample &amp; hold mode) Refresh time= (TREFRESH[7:0]) x T LSI
                TREFRESH1: u8,
                reserved16: u8,
                ///  DAC Channel 2 refresh Time (only valid in sample &amp; hold mode) Refresh time= (TREFRESH[7:0]) x T LSI
                TREFRESH2: u8,
                padding: u8,
            }),
        };

        ///  General-purpose I/Os
        pub const GPIOC = extern struct {
            ///  GPIO port mode register
            MODER: mmio.Mmio(packed struct(u32) {
                ///  Port x configuration bits (y = 0..15)
                MODER0: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER1: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER2: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER3: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER4: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER5: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER6: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER7: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER8: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER9: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER10: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER11: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER12: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER13: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER14: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER15: u2,
            }),
            ///  GPIO port output type register
            OTYPER: mmio.Mmio(packed struct(u32) {
                ///  Port x configuration bits (y = 0..15)
                OT0: u1,
                ///  Port x configuration bits (y = 0..15)
                OT1: u1,
                ///  Port x configuration bits (y = 0..15)
                OT2: u1,
                ///  Port x configuration bits (y = 0..15)
                OT3: u1,
                ///  Port x configuration bits (y = 0..15)
                OT4: u1,
                ///  Port x configuration bits (y = 0..15)
                OT5: u1,
                ///  Port x configuration bits (y = 0..15)
                OT6: u1,
                ///  Port x configuration bits (y = 0..15)
                OT7: u1,
                ///  Port x configuration bits (y = 0..15)
                OT8: u1,
                ///  Port x configuration bits (y = 0..15)
                OT9: u1,
                ///  Port x configuration bits (y = 0..15)
                OT10: u1,
                ///  Port x configuration bits (y = 0..15)
                OT11: u1,
                ///  Port x configuration bits (y = 0..15)
                OT12: u1,
                ///  Port x configuration bits (y = 0..15)
                OT13: u1,
                ///  Port x configuration bits (y = 0..15)
                OT14: u1,
                ///  Port x configuration bits (y = 0..15)
                OT15: u1,
                padding: u16,
            }),
            ///  GPIO port output speed register
            OSPEEDR: mmio.Mmio(packed struct(u32) {
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR0: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR1: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR2: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR3: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR4: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR5: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR6: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR7: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR8: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR9: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR10: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR11: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR12: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR13: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR14: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR15: u2,
            }),
            ///  GPIO port pull-up/pull-down register
            PUPDR: mmio.Mmio(packed struct(u32) {
                ///  Port x configuration bits (y = 0..15)
                PUPDR0: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR1: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR2: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR3: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR4: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR5: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR6: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR7: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR8: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR9: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR10: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR11: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR12: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR13: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR14: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR15: u2,
            }),
            ///  GPIO port input data register
            IDR: mmio.Mmio(packed struct(u32) {
                ///  Port input data (y = 0..15)
                IDR0: u1,
                ///  Port input data (y = 0..15)
                IDR1: u1,
                ///  Port input data (y = 0..15)
                IDR2: u1,
                ///  Port input data (y = 0..15)
                IDR3: u1,
                ///  Port input data (y = 0..15)
                IDR4: u1,
                ///  Port input data (y = 0..15)
                IDR5: u1,
                ///  Port input data (y = 0..15)
                IDR6: u1,
                ///  Port input data (y = 0..15)
                IDR7: u1,
                ///  Port input data (y = 0..15)
                IDR8: u1,
                ///  Port input data (y = 0..15)
                IDR9: u1,
                ///  Port input data (y = 0..15)
                IDR10: u1,
                ///  Port input data (y = 0..15)
                IDR11: u1,
                ///  Port input data (y = 0..15)
                IDR12: u1,
                ///  Port input data (y = 0..15)
                IDR13: u1,
                ///  Port input data (y = 0..15)
                IDR14: u1,
                ///  Port input data (y = 0..15)
                IDR15: u1,
                padding: u16,
            }),
            ///  GPIO port output data register
            ODR: mmio.Mmio(packed struct(u32) {
                ///  Port output data (y = 0..15)
                ODR0: u1,
                ///  Port output data (y = 0..15)
                ODR1: u1,
                ///  Port output data (y = 0..15)
                ODR2: u1,
                ///  Port output data (y = 0..15)
                ODR3: u1,
                ///  Port output data (y = 0..15)
                ODR4: u1,
                ///  Port output data (y = 0..15)
                ODR5: u1,
                ///  Port output data (y = 0..15)
                ODR6: u1,
                ///  Port output data (y = 0..15)
                ODR7: u1,
                ///  Port output data (y = 0..15)
                ODR8: u1,
                ///  Port output data (y = 0..15)
                ODR9: u1,
                ///  Port output data (y = 0..15)
                ODR10: u1,
                ///  Port output data (y = 0..15)
                ODR11: u1,
                ///  Port output data (y = 0..15)
                ODR12: u1,
                ///  Port output data (y = 0..15)
                ODR13: u1,
                ///  Port output data (y = 0..15)
                ODR14: u1,
                ///  Port output data (y = 0..15)
                ODR15: u1,
                padding: u16,
            }),
            ///  GPIO port bit set/reset register
            BSRR: mmio.Mmio(packed struct(u32) {
                ///  Port x set bit y (y= 0..15)
                BS0: u1,
                ///  Port x set bit y (y= 0..15)
                BS1: u1,
                ///  Port x set bit y (y= 0..15)
                BS2: u1,
                ///  Port x set bit y (y= 0..15)
                BS3: u1,
                ///  Port x set bit y (y= 0..15)
                BS4: u1,
                ///  Port x set bit y (y= 0..15)
                BS5: u1,
                ///  Port x set bit y (y= 0..15)
                BS6: u1,
                ///  Port x set bit y (y= 0..15)
                BS7: u1,
                ///  Port x set bit y (y= 0..15)
                BS8: u1,
                ///  Port x set bit y (y= 0..15)
                BS9: u1,
                ///  Port x set bit y (y= 0..15)
                BS10: u1,
                ///  Port x set bit y (y= 0..15)
                BS11: u1,
                ///  Port x set bit y (y= 0..15)
                BS12: u1,
                ///  Port x set bit y (y= 0..15)
                BS13: u1,
                ///  Port x set bit y (y= 0..15)
                BS14: u1,
                ///  Port x set bit y (y= 0..15)
                BS15: u1,
                ///  Port x set bit y (y= 0..15)
                BR0: u1,
                ///  Port x reset bit y (y = 0..15)
                BR1: u1,
                ///  Port x reset bit y (y = 0..15)
                BR2: u1,
                ///  Port x reset bit y (y = 0..15)
                BR3: u1,
                ///  Port x reset bit y (y = 0..15)
                BR4: u1,
                ///  Port x reset bit y (y = 0..15)
                BR5: u1,
                ///  Port x reset bit y (y = 0..15)
                BR6: u1,
                ///  Port x reset bit y (y = 0..15)
                BR7: u1,
                ///  Port x reset bit y (y = 0..15)
                BR8: u1,
                ///  Port x reset bit y (y = 0..15)
                BR9: u1,
                ///  Port x reset bit y (y = 0..15)
                BR10: u1,
                ///  Port x reset bit y (y = 0..15)
                BR11: u1,
                ///  Port x reset bit y (y = 0..15)
                BR12: u1,
                ///  Port x reset bit y (y = 0..15)
                BR13: u1,
                ///  Port x reset bit y (y = 0..15)
                BR14: u1,
                ///  Port x reset bit y (y = 0..15)
                BR15: u1,
            }),
            ///  GPIO port configuration lock register
            LCKR: mmio.Mmio(packed struct(u32) {
                ///  Port x lock bit y (y= 0..15)
                LCK0: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK1: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK2: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK3: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK4: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK5: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK6: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK7: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK8: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK9: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK10: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK11: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK12: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK13: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK14: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK15: u1,
                ///  Port x lock bit y (y= 0..15)
                LCKK: u1,
                padding: u15,
            }),
            ///  GPIO alternate function low register
            AFRL: mmio.Mmio(packed struct(u32) {
                ///  Alternate function selection for port x bit y (y = 0..7)
                AFSEL0: u4,
                ///  Alternate function selection for port x bit y (y = 0..7)
                AFSEL1: u4,
                ///  Alternate function selection for port x bit y (y = 0..7)
                AFSEL2: u4,
                ///  Alternate function selection for port x bit y (y = 0..7)
                AFSEL3: u4,
                ///  Alternate function selection for port x bit y (y = 0..7)
                AFSEL4: u4,
                ///  Alternate function selection for port x bit y (y = 0..7)
                AFSEL5: u4,
                ///  Alternate function selection for port x bit y (y = 0..7)
                AFSEL6: u4,
                ///  Alternate function selection for port x bit y (y = 0..7)
                AFSEL7: u4,
            }),
            ///  GPIO alternate function high register
            AFRH: mmio.Mmio(packed struct(u32) {
                ///  Alternate function selection for port x bit y (y = 8..15)
                AFSEL8: u4,
                ///  Alternate function selection for port x bit y (y = 8..15)
                AFSEL9: u4,
                ///  Alternate function selection for port x bit y (y = 8..15)
                AFSEL10: u4,
                ///  Alternate function selection for port x bit y (y = 8..15)
                AFSEL11: u4,
                ///  Alternate function selection for port x bit y (y = 8..15)
                AFSEL12: u4,
                ///  Alternate function selection for port x bit y (y = 8..15)
                AFSEL13: u4,
                ///  Alternate function selection for port x bit y (y = 8..15)
                AFSEL14: u4,
                ///  Alternate function selection for port x bit y (y = 8..15)
                AFSEL15: u4,
            }),
            ///  GPIO port bit reset register
            BRR: mmio.Mmio(packed struct(u32) {
                ///  Port x reset IO pin y
                BR0: u1,
                ///  Port x reset IO pin y
                BR1: u1,
                ///  Port x reset IO pin y
                BR2: u1,
                ///  Port x reset IO pin y
                BR3: u1,
                ///  Port x reset IO pin y
                BR4: u1,
                ///  Port x reset IO pin y
                BR5: u1,
                ///  Port x reset IO pin y
                BR6: u1,
                ///  Port x reset IO pin y
                BR7: u1,
                ///  Port x reset IO pin y
                BR8: u1,
                ///  Port x reset IO pin y
                BR9: u1,
                ///  Port x reset IO pin y
                BR10: u1,
                ///  Port x reset IO pin y
                BR11: u1,
                ///  Port x reset IO pin y
                BR12: u1,
                ///  Port x reset IO pin y
                BR13: u1,
                ///  Port x reset IO pin y
                BR14: u1,
                ///  Port x reset IO pin y
                BR15: u1,
                padding: u16,
            }),
            reserved48: [4]u8,
            ///  GPIO secure configuration register
            SECCFGR: mmio.Mmio(packed struct(u32) {
                ///  I/O pin of Port x secure bit enable
                SEC0: u1,
                ///  I/O pin of Port x secure bit enable
                SEC1: u1,
                ///  I/O pin of Port x secure bit enable
                SEC2: u1,
                ///  I/O pin of Port x secure bit enable
                SEC3: u1,
                ///  I/O pin of Port x secure bit enable
                SEC4: u1,
                ///  I/O pin of Port x secure bit enable
                SEC5: u1,
                ///  I/O pin of Port x secure bit enable
                SEC6: u1,
                ///  I/O pin of Port x secure bit enable
                SEC7: u1,
                ///  I/O pin of Port x secure bit enable
                SEC8: u1,
                ///  I/O pin of Port x secure bit enable
                SEC9: u1,
                ///  I/O pin of Port x secure bit enable
                SEC10: u1,
                ///  I/O pin of Port x secure bit enable
                SEC11: u1,
                ///  I/O pin of Port x secure bit enable
                SEC12: u1,
                ///  I/O pin of Port x secure bit enable
                SEC13: u1,
                ///  I/O pin of Port x secure bit enable
                SEC14: u1,
                ///  I/O pin of Port x secure bit enable
                SEC15: u1,
                padding: u16,
            }),
        };

        ///  RNG
        pub const RNG = extern struct {
            ///  RNG control register
            RNG_CR: mmio.Mmio(packed struct(u32) {
                reserved2: u2,
                ///  Random number generator enable
                RNGEN: u1,
                ///  Interrupt enable
                IE: u1,
                reserved5: u1,
                ///  Clock error detection Note: The clock error detection can be used only when ck_rc48 or ck_pll1_q (ck_pll1_q = 48MHz) source is selected otherwise, CED bit must be equal to 1. The clock error detection cannot be enabled nor disabled on the fly when RNG peripheral is enabled, to enable or disable CED the RNG must be disabled.
                CED: u1,
                reserved8: u2,
                ///  RNG configuration 3
                RNG_CONFIG3: u4,
                ///  Non NIST compliant
                NISTC: u1,
                ///  RNG configuration 2
                RNG_CONFIG2: u3,
                ///  Clock divider factor
                CLKDIV: u4,
                ///  RNG configuration 1
                RNG_CONFIG1: u6,
                reserved30: u4,
                ///  Conditioning soft reset
                CONDRST: u1,
                ///  RNG Config Lock
                CONFIGLOCK: u1,
            }),
            ///  RNG status register
            RNG_SR: mmio.Mmio(packed struct(u32) {
                ///  Data ready Note: If IE=1 in RNG_CR, an interrupt is generated when DRDY=1. It can rise when the peripheral is disabled. When the output buffer becomes empty (after reading RNG_DR), this bit returns to 0 until a new random value is generated.
                DRDY: u1,
                ///  Clock error current status Note: This bit is meaningless if CED (Clock error detection) bit in RNG_CR is equal to 1.
                CECS: u1,
                ///  Seed error current status ** More than 64 consecutive bits at the same value (0 or 1) ** More than 32 consecutive alternances of 0 and 1 (0101010101...01)
                SECS: u1,
                reserved5: u2,
                ///  Clock error interrupt status This bit is set at the same time as CECS. It is cleared by writing it to 0. An interrupt is pending if IE = 1 in the RNG_CR register. Note: This bit is meaningless if CED (Clock error detection) bit in RNG_CR is equal to 1.
                CEIS: u1,
                ///  Seed error interrupt status This bit is set at the same time as SECS. It is cleared by writing it to 0. ** More than 64 consecutive bits at the same value (0 or 1) ** More than 32 consecutive alternances of 0 and 1 (0101010101...01) An interrupt is pending if IE = 1 in the RNG_CR register.
                SEIS: u1,
                padding: u25,
            }),
            ///  The RNG_DR register is a read-only register that delivers a 32-bit random value when read. The content of this register is valid when DRDY= 1, even if RNGEN=0.
            RNG_DR: mmio.Mmio(packed struct(u32) {
                ///  Random data 32-bit random data which are valid when DRDY=1.
                RNDATA: u32,
            }),
            reserved16: [4]u8,
            ///  The RNG_DR register is a read-only register that delivers a 32-bit random value when read. The content of this register is valid when DRDY= 1, even if RNGEN=0.
            RNG_HTCR: mmio.Mmio(packed struct(u32) {
                ///  health test configuration
                HTCFG: u32,
            }),
        };

        ///  OctoSPI
        pub const OCTOSPI1 = extern struct {
            ///  control register
            CR: mmio.Mmio(packed struct(u32) {
                ///  Enable
                EN: u1,
                ///  Abort request
                ABORT: u1,
                ///  DMA enable
                DMAEN: u1,
                ///  Timeout counter enable
                TCEN: u1,
                reserved6: u2,
                ///  Dual-quad mode
                DQM: u1,
                ///  FLASH memory selection
                FSEL: u1,
                ///  IFO threshold level
                FTHRES: u5,
                reserved16: u3,
                ///  Transfer error interrupt enable
                TEIE: u1,
                ///  Transfer complete interrupt enable
                TCIE: u1,
                ///  FIFO threshold interrupt enable
                FTIE: u1,
                ///  Status match interrupt enable
                SMIE: u1,
                ///  TimeOut interrupt enable
                TOIE: u1,
                reserved22: u1,
                ///  Automatic poll mode stop
                APMS: u1,
                ///  Polling match mode
                PMM: u1,
                reserved28: u4,
                ///  Functional mode
                FMODE: u2,
                padding: u2,
            }),
            reserved8: [4]u8,
            ///  device configuration register
            DCR1: mmio.Mmio(packed struct(u32) {
                ///  Mode 0 / mode 3
                CKMODE: u1,
                ///  Free running clock
                FRCK: u1,
                reserved8: u6,
                ///  Chip-select high time
                CSHT: u3,
                reserved16: u5,
                ///  Device size
                DEVSIZE: u5,
                reserved24: u3,
                ///  Memory type
                MTYP: u2,
                padding: u6,
            }),
            ///  device configuration register 2
            DCR2: mmio.Mmio(packed struct(u32) {
                ///  Clock prescaler
                PRESCALER: u8,
                reserved16: u8,
                ///  Wrap size
                WRAPSIZE: u3,
                padding: u13,
            }),
            ///  device configuration register 3
            DCR3: mmio.Mmio(packed struct(u32) {
                reserved16: u16,
                ///  CS boundary
                CSBOUND: u5,
                padding: u11,
            }),
            ///  DCR4
            DCR4: mmio.Mmio(packed struct(u32) {
                ///  Transfer error flag
                TEF: u1,
                ///  Transfer complete flag
                TCF: u1,
                ///  FIFO threshold flag
                FTF: u1,
                ///  Status match flag
                SMF: u1,
                ///  Timeout flag
                TOF: u1,
                ///  BUSY
                BUSY: u1,
                reserved8: u2,
                ///  FIFO level
                FLEVEL: u6,
                padding: u18,
            }),
            reserved32: [8]u8,
            ///  status register
            SR: mmio.Mmio(packed struct(u32) {
                ///  Clear transfer error flag
                CTEF: u1,
                ///  Clear transfer complete flag
                CTCF: u1,
                reserved3: u1,
                ///  Clear status match flag
                CSMF: u1,
                ///  Clear timeout flag
                CTOF: u1,
                padding: u27,
            }),
            ///  flag clear register
            FCR: mmio.Mmio(packed struct(u32) {
                ///  Data length
                DL: u32,
            }),
            reserved64: [24]u8,
            ///  data length register
            DLR: mmio.Mmio(packed struct(u32) {
                ///  ADDRESS
                ADDRESS: u32,
            }),
            reserved72: [4]u8,
            ///  address register
            AR: mmio.Mmio(packed struct(u32) {
                ///  Data
                DATA: u32,
            }),
            reserved80: [4]u8,
            ///  data register
            DR: mmio.Mmio(packed struct(u32) {
                ///  Status mask
                MASK: u32,
            }),
            reserved128: [44]u8,
            ///  polling status mask register
            PSMKR: mmio.Mmio(packed struct(u32) {
                ///  Status match
                MATCH: u32,
            }),
            reserved136: [4]u8,
            ///  polling status match register
            PSMAR: mmio.Mmio(packed struct(u32) {
                ///  Polling interval
                INTERVAL: u16,
                padding: u16,
            }),
            reserved144: [4]u8,
            ///  polling interval register
            PIR: mmio.Mmio(packed struct(u32) {
                ///  Instruction mode
                IMODE: u3,
                ///  Instruction double transfer rate
                IDTR: u1,
                ///  Instruction size
                ISIZE: u2,
                reserved8: u2,
                ///  Address mode
                ADMODE: u3,
                ///  Address double transfer rate
                ADDTR: u1,
                ///  Address size
                ADSIZE: u2,
                reserved16: u2,
                ///  Alternate byte mode
                ABMODE: u3,
                ///  Alternate bytes double transfer rate
                ABDTR: u1,
                ///  Alternate bytes size
                ABSIZE: u2,
                reserved24: u2,
                ///  Data mode
                DMODE: u3,
                ///  Alternate bytes double transfer rate
                DDTR: u1,
                reserved29: u1,
                ///  DQS enable
                DQSE: u1,
                reserved31: u1,
                ///  Send instruction only once mode
                SIOO: u1,
            }),
            reserved256: [108]u8,
            ///  communication configuration register
            CCR: mmio.Mmio(packed struct(u32) {
                ///  Number of dummy cycles
                DCYC: u5,
                reserved28: u23,
                ///  Delay hold quarter cycle
                DHQC: u1,
                reserved30: u1,
                ///  Sample shift
                SSHIFT: u1,
                padding: u1,
            }),
            reserved264: [4]u8,
            ///  timing configuration register
            TCR: mmio.Mmio(packed struct(u32) {
                ///  INSTRUCTION
                INSTRUCTION: u32,
            }),
            reserved272: [4]u8,
            ///  instruction register
            IR: mmio.Mmio(packed struct(u32) {
                ///  Alternate bytes
                ALTERNATE: u32,
            }),
            reserved288: [12]u8,
            ///  alternate bytes register
            ABR: mmio.Mmio(packed struct(u32) {
                ///  Timeout period
                TIMEOUT: u16,
                padding: u16,
            }),
            reserved304: [12]u8,
            ///  low-power timeout register
            LPTR: mmio.Mmio(packed struct(u32) {
                ///  Instruction mode
                IMODE: u3,
                ///  Instruction double transfer rate
                IDTR: u1,
                ///  Instruction size
                ISIZE: u2,
                reserved8: u2,
                ///  Address mode
                ADMODE: u3,
                ///  Address double transfer rate
                ADDTR: u1,
                ///  Address size
                ADSIZE: u2,
                reserved16: u2,
                ///  Alternate byte mode
                ABMODE: u3,
                ///  Alternate bytes double transfer rate
                ABDTR: u1,
                ///  Alternate bytes size
                ABSIZE: u2,
                reserved24: u2,
                ///  Data mode
                DMODE: u3,
                ///  alternate bytes double transfer rate
                DDTR: u1,
                reserved29: u1,
                ///  DQS enable
                DQSE: u1,
                padding: u2,
            }),
            reserved320: [12]u8,
            ///  write communication configuration register
            WPCCR: mmio.Mmio(packed struct(u32) {
                ///  Number of dummy cycles
                DCYC: u5,
                reserved28: u23,
                ///  Delay hold quarter cycle
                DHQC: u1,
                reserved30: u1,
                ///  Sample shift
                SSHIFT: u1,
                padding: u1,
            }),
            reserved328: [4]u8,
            ///  write timing configuration register
            WPTCR: mmio.Mmio(packed struct(u32) {
                ///  INSTRUCTION
                INSTRUCTION: u32,
            }),
            reserved336: [4]u8,
            ///  write instruction register
            WPIR: mmio.Mmio(packed struct(u32) {
                ///  Alternate bytes
                ALTERNATE: u32,
            }),
            reserved352: [12]u8,
            ///  write alternate bytes register
            WPABR: mmio.Mmio(packed struct(u32) {
                ///  Latency mode
                LM: u1,
                ///  Write zero latency
                WZL: u1,
                reserved8: u6,
                ///  Access time
                TACC: u8,
                ///  Read write recovery time
                TRWR: u8,
                padding: u8,
            }),
            reserved384: [28]u8,
            ///  WCCR
            WCCR: mmio.Mmio(packed struct(u32) {
                ///  REFRESH
                REFRESH: u16,
                padding: u16,
            }),
            reserved392: [4]u8,
            ///  WTCR
            WTCR: mmio.Mmio(packed struct(u32) {
                ///  IMODE
                IMODE: u3,
                ///  IDTR
                IDTR: u1,
                ///  ISIZE
                ISIZE: u2,
                reserved8: u2,
                ///  ADMODE
                ADMODE: u3,
                ///  ADDTR
                ADDTR: u1,
                ///  ADSIZE
                ADSIZE: u2,
                reserved16: u2,
                ///  ABMODE
                ABMODE: u3,
                ///  ABDTR
                ABDTR: u1,
                ///  ABSIZE
                ABSIZE: u2,
                reserved24: u2,
                ///  DMODE
                DMODE: u3,
                ///  DDTR
                DDTR: u1,
                reserved29: u1,
                ///  DQSE
                DQSE: u1,
                padding: u2,
            }),
            reserved400: [4]u8,
            ///  WIR
            WIR: mmio.Mmio(packed struct(u32) {
                ///  DCYC
                DCYC: u5,
                padding: u27,
            }),
            reserved416: [12]u8,
            ///  WABR
            WABR: mmio.Mmio(packed struct(u32) {
                ///  INSTRUCTION
                INSTRUCTION: u32,
            }),
            reserved512: [92]u8,
            ///  HyperBusTM latency configuration register
            HLCR: mmio.Mmio(packed struct(u32) {
                ///  Alternate bytes
                ALTERNATE: u32,
            }),
        };

        ///  FMC
        pub const FMC = extern struct {
            ///  FMC_BCR1
            FMC_BCR1: mmio.Mmio(packed struct(u32) {
                ///  Memory bank enable bit This bit enables the memory bank. After reset Bank1 is enabled, all others are disabled. Accessing a disabled bank causes an ERROR on AXI bus.
                MBKEN: u1,
                ///  Address/data multiplexing enable bit When this bit is set, the address and data values are multiplexed on the data bus, valid only with NOR and PSRAM memories:
                MUXEN: u1,
                ///  Memory type These bits define the type of external memory attached to the corresponding memory bank:
                MTYP: u2,
                ///  Memory data bus width Defines the external memory device width, valid for all type of memories.
                MWID: u2,
                ///  Flash access enable This bit enables NOR Flash memory access operations.
                FACCEN: u1,
                reserved8: u1,
                ///  Burst enable bit This bit enables/disables synchronous accesses during read operations. It is valid only for synchronous memories operating in Burst mode:
                BURSTEN: u1,
                ///  Wait signal polarity bit This bit defines the polarity of the wait signal from memory used for either in synchronous or asynchronous mode:
                WAITPOL: u1,
                reserved11: u1,
                ///  Wait timing configuration The NWAIT signal indicates whether the data from the memory are valid or if a wait state must be inserted when accessing the memory in synchronous mode. This configuration bit determines if NWAIT is asserted by the memory one clock cycle before the wait state or during the wait state:
                WAITCFG: u1,
                ///  Write enable bit This bit indicates whether write operations are enabled/disabled in the bank by the FMC:
                WREN: u1,
                ///  Wait enable bit This bit enables/disables wait-state insertion via the NWAIT signal when accessing the memory in synchronous mode.
                WAITEN: u1,
                ///  Extended mode enable. This bit enables the FMC to program the write timings for asynchronous accesses inside the FMC_BWTR register, thus resulting in different timings for read and write operations. Note: When the extended mode is disabled, the FMC can operate in Mode1 or Mode2 as follows: ** Mode 1 is the default mode when the SRAM/PSRAM memory type is selected (MTYP =0x0 or 0x01) ** Mode 2 is the default mode when the NOR memory type is selected (MTYP = 0x10).
                EXTMOD: u1,
                ///  Wait signal during asynchronous transfers This bit enables/disables the FMC to use the wait signal even during an asynchronous protocol.
                ASYNCWAIT: u1,
                ///  CRAM Page Size These are used for Cellular RAM 1.5 which does not allow burst access to cross the address boundaries between pages. When these bits are configured, the FMC controller splits automatically the burst access when the memory page size is reached (refer to memory datasheet for page size). Other configuration: reserved.
                CPSIZE: u3,
                ///  Write burst enable For PSRAM (CRAM) operating in Burst mode, the bit enables synchronous accesses during write operations. The enable bit for synchronous read accesses is the BURSTEN bit in the FMC_BCRx register.
                CBURSTRW: u1,
                ///  Continuous Clock Enable This bit enables the FMC_CLK clock output to external memory devices. Note: The CCLKEN bit of the FMC_BCR2..4 registers is dont care. It is only enabled through the FMC_BCR1 register. Bank 1 must be configured in synchronous mode to generate the FMC_CLK continuous clock. If CCLKEN bit is set, the FMC_CLK clock ratio is specified by CLKDIV value in the FMC_BTR1 register. CLKDIV in FMC_BWTR1 is dont care. If the synchronous mode is used and CCLKEN bit is set, the synchronous memories connected to other banks than Bank 1 are clocked by the same clock (the CLKDIV value in the FMC_BTR2..4 and FMC_BWTR2..4 registers for other banks has no effect.)
                CCLKEN: u1,
                ///  Write FIFO Disable This bit disables the Write FIFO used by the FMC controller. Note: The WFDIS bit of the FMC_BCR2..4 registers is dont care. It is only enabled through the FMC_BCR1 register.
                WFDIS: u1,
                ///  NBLSET
                NBLSET: u2,
                padding: u8,
            }),
            ///  This register contains the control information of each memory bank, used for SRAMs, PSRAM and NOR Flash memories.If the EXTMOD bit is set in the FMC_BCRx register, then this register is partitioned for write and read access, that is, 2 registers are available: one to configure read accesses (this register) and one to configure write accesses (FMC_BWTRx registers).
            FMC_BTR1: mmio.Mmio(packed struct(u32) {
                ///  Address setup phase duration These bits are written by software to define the duration of the address setup phase (refer to Figure81 to Figure93), used in SRAMs, ROMs and asynchronous NOR Flash: For each access mode address setup phase duration, please refer to the respective figure (refer to Figure81 to Figure93). Note: In synchronous accesses, this value is dont care. In Muxed mode or Mode D, the minimum value for ADDSET is 1.
                ADDSET: u4,
                ///  Address-hold phase duration These bits are written by software to define the duration of the address hold phase (refer to Figure81 to Figure93), used in mode D or multiplexed accesses: For each access mode address-hold phase duration, please refer to the respective figure (Figure81 to Figure93). Note: In synchronous accesses, this value is not used, the address hold phase is always 1 memory clock period duration.
                ADDHLD: u4,
                ///  Data-phase duration These bits are written by software to define the duration of the data phase (refer to Figure81 to Figure93), used in asynchronous accesses: For each memory type and access mode data-phase duration, please refer to the respective figure (Figure81 to Figure93). Example: Mode1, write access, DATAST=1: Data-phase duration= DATAST+1 = 2 KCK_FMC clock cycles. Note: In synchronous accesses, this value is dont care.
                DATAST: u8,
                ///  Bus turnaround phase duration These bits are written by software to add a delay at the end of a write-to-read or read-to write transaction. The programmed bus turnaround delay is inserted between an asynchronous read (in muxed or mode D) or write transaction and any other asynchronous /synchronous read/write from/to a static bank. If a read operation is performed, the bank can be the same or a different one, whereas it must be different in case of write operation to the bank, except in muxed mode or mode D. In some cases, whatever the programmed BUSTRUN values, the bus turnaround delay is fixed as follows: The bus turnaround delay is not inserted between two consecutive asynchronous write transfers to the same static memory bank except in muxed mode and mode D. There is a bus turnaround delay of 1 FMC clock cycle between: Two consecutive asynchronous read transfers to the same static memory bank except for modes muxed and D. An asynchronous read to an asynchronous or synchronous write to any static bank or dynamic bank except in modes muxed and D mode. There is a bus turnaround delay of 2 FMC clock cycle between: Two consecutive synchronous write operations (in Burst or Single mode) to the same bank. A synchronous write (burst or single) access and an asynchronous write or read transfer to or from static memory bank (the bank can be the same or a different one in case of a read operation. Two consecutive synchronous read operations (in Burst or Single mode) followed by any synchronous/asynchronous read or write from/to another static memory bank. There is a bus turnaround delay of 3 FMC clock cycle between: Two consecutive synchronous write operations (in Burst or Single mode) to different static banks. A synchronous write access (in Burst or Single mode) and a synchronous read from the same or a different bank. The bus turnaround delay allows to match the minimum time between consecutive transactions (tEHEL from NEx high to NEx low) and the maximum time required by the memory to free the data bus after a read access (tEHQZ): (BUSTRUN + 1) KCK_FMC period &#8805; tEHELmin and (BUSTRUN + 2)KCK_FMC period &#8805; tEHQZmax if EXTMOD = 0 (BUSTRUN + 2)KCK_FMC period &#8805; max (tEHELmin, tEHQZmax) if EXTMOD = 126. ...
                BUSTURN: u4,
                ///  Clock divide ratio (for FMC_CLK signal) These bits define the period of FMC_CLK clock output signal, expressed in number of KCK_FMC cycles: In asynchronous NOR Flash, SRAM or PSRAM accesses, this value is dont care. Note: Refer to Section20.6.5: Synchronous transactions for FMC_CLK divider ratio formula)
                CLKDIV: u4,
                ///  Data latency for synchronous memory For synchronous access with read write burst mode enabled these bits define the number of memory clock cycles
                DATLAT: u4,
                ///  Access mode These bits specify the asynchronous access modes as shown in the timing diagrams. They are taken into account only when the EXTMOD bit in the FMC_BCRx register is 1.
                ACCMOD: u2,
                ///  DATAHLD
                DATAHLD: u2,
            }),
            ///  FMC_BCR2
            FMC_BCR2: mmio.Mmio(packed struct(u32) {
                ///  Memory bank enable bit This bit enables the memory bank. After reset Bank1 is enabled, all others are disabled. Accessing a disabled bank causes an ERROR on AXI bus.
                MBKEN: u1,
                ///  Address/data multiplexing enable bit When this bit is set, the address and data values are multiplexed on the data bus, valid only with NOR and PSRAM memories:
                MUXEN: u1,
                ///  Memory type These bits define the type of external memory attached to the corresponding memory bank:
                MTYP: u2,
                ///  Memory data bus width Defines the external memory device width, valid for all type of memories.
                MWID: u2,
                ///  Flash access enable This bit enables NOR Flash memory access operations.
                FACCEN: u1,
                reserved8: u1,
                ///  Burst enable bit This bit enables/disables synchronous accesses during read operations. It is valid only for synchronous memories operating in Burst mode:
                BURSTEN: u1,
                ///  Wait signal polarity bit This bit defines the polarity of the wait signal from memory used for either in synchronous or asynchronous mode:
                WAITPOL: u1,
                reserved11: u1,
                ///  Wait timing configuration The NWAIT signal indicates whether the data from the memory are valid or if a wait state must be inserted when accessing the memory in synchronous mode. This configuration bit determines if NWAIT is asserted by the memory one clock cycle before the wait state or during the wait state:
                WAITCFG: u1,
                ///  Write enable bit This bit indicates whether write operations are enabled/disabled in the bank by the FMC:
                WREN: u1,
                ///  Wait enable bit This bit enables/disables wait-state insertion via the NWAIT signal when accessing the memory in synchronous mode.
                WAITEN: u1,
                ///  Extended mode enable. This bit enables the FMC to program the write timings for asynchronous accesses inside the FMC_BWTR register, thus resulting in different timings for read and write operations. Note: When the extended mode is disabled, the FMC can operate in Mode1 or Mode2 as follows: ** Mode 1 is the default mode when the SRAM/PSRAM memory type is selected (MTYP =0x0 or 0x01) ** Mode 2 is the default mode when the NOR memory type is selected (MTYP = 0x10).
                EXTMOD: u1,
                ///  Wait signal during asynchronous transfers This bit enables/disables the FMC to use the wait signal even during an asynchronous protocol.
                ASYNCWAIT: u1,
                ///  CRAM Page Size These are used for Cellular RAM 1.5 which does not allow burst access to cross the address boundaries between pages. When these bits are configured, the FMC controller splits automatically the burst access when the memory page size is reached (refer to memory datasheet for page size). Other configuration: reserved.
                CPSIZE: u3,
                ///  Write burst enable For PSRAM (CRAM) operating in Burst mode, the bit enables synchronous accesses during write operations. The enable bit for synchronous read accesses is the BURSTEN bit in the FMC_BCRx register.
                CBURSTRW: u1,
                ///  Continuous Clock Enable This bit enables the FMC_CLK clock output to external memory devices. Note: The CCLKEN bit of the FMC_BCR2..4 registers is dont care. It is only enabled through the FMC_BCR1 register. Bank 1 must be configured in synchronous mode to generate the FMC_CLK continuous clock. If CCLKEN bit is set, the FMC_CLK clock ratio is specified by CLKDIV value in the FMC_BTR1 register. CLKDIV in FMC_BWTR1 is dont care. If the synchronous mode is used and CCLKEN bit is set, the synchronous memories connected to other banks than Bank 1 are clocked by the same clock (the CLKDIV value in the FMC_BTR2..4 and FMC_BWTR2..4 registers for other banks has no effect.)
                CCLKEN: u1,
                ///  Write FIFO Disable This bit disables the Write FIFO used by the FMC controller. Note: The WFDIS bit of the FMC_BCR2..4 registers is dont care. It is only enabled through the FMC_BCR1 register.
                WFDIS: u1,
                ///  NBLSET
                NBLSET: u2,
                padding: u8,
            }),
            ///  FMC_BTR2
            FMC_BTR2: mmio.Mmio(packed struct(u32) {
                ///  Address setup phase duration These bits are written by software to define the duration of the address setup phase (refer to Figure81 to Figure93), used in SRAMs, ROMs and asynchronous NOR Flash: For each access mode address setup phase duration, please refer to the respective figure (refer to Figure81 to Figure93). Note: In synchronous accesses, this value is dont care. In Muxed mode or Mode D, the minimum value for ADDSET is 1.
                ADDSET: u4,
                ///  Address-hold phase duration These bits are written by software to define the duration of the address hold phase (refer to Figure81 to Figure93), used in mode D or multiplexed accesses: For each access mode address-hold phase duration, please refer to the respective figure (Figure81 to Figure93). Note: In synchronous accesses, this value is not used, the address hold phase is always 1 memory clock period duration.
                ADDHLD: u4,
                ///  Data-phase duration These bits are written by software to define the duration of the data phase (refer to Figure81 to Figure93), used in asynchronous accesses: For each memory type and access mode data-phase duration, please refer to the respective figure (Figure81 to Figure93). Example: Mode1, write access, DATAST=1: Data-phase duration= DATAST+1 = 2 KCK_FMC clock cycles. Note: In synchronous accesses, this value is dont care.
                DATAST: u8,
                ///  Bus turnaround phase duration These bits are written by software to add a delay at the end of a write-to-read or read-to write transaction. The programmed bus turnaround delay is inserted between an asynchronous read (in muxed or mode D) or write transaction and any other asynchronous /synchronous read/write from/to a static bank. If a read operation is performed, the bank can be the same or a different one, whereas it must be different in case of write operation to the bank, except in muxed mode or mode D. In some cases, whatever the programmed BUSTRUN values, the bus turnaround delay is fixed as follows: The bus turnaround delay is not inserted between two consecutive asynchronous write transfers to the same static memory bank except in muxed mode and mode D. There is a bus turnaround delay of 1 FMC clock cycle between: Two consecutive asynchronous read transfers to the same static memory bank except for modes muxed and D. An asynchronous read to an asynchronous or synchronous write to any static bank or dynamic bank except in modes muxed and D mode. There is a bus turnaround delay of 2 FMC clock cycle between: Two consecutive synchronous write operations (in Burst or Single mode) to the same bank. A synchronous write (burst or single) access and an asynchronous write or read transfer to or from static memory bank (the bank can be the same or a different one in case of a read operation. Two consecutive synchronous read operations (in Burst or Single mode) followed by any synchronous/asynchronous read or write from/to another static memory bank. There is a bus turnaround delay of 3 FMC clock cycle between: Two consecutive synchronous write operations (in Burst or Single mode) to different static banks. A synchronous write access (in Burst or Single mode) and a synchronous read from the same or a different bank. The bus turnaround delay allows to match the minimum time between consecutive transactions (tEHEL from NEx high to NEx low) and the maximum time required by the memory to free the data bus after a read access (tEHQZ): (BUSTRUN + 1) KCK_FMC period &#8805; tEHELmin and (BUSTRUN + 2)KCK_FMC period &#8805; tEHQZmax if EXTMOD = 0 (BUSTRUN + 2)KCK_FMC period &#8805; max (tEHELmin, tEHQZmax) if EXTMOD = 126. ...
                BUSTURN: u4,
                ///  Clock divide ratio (for FMC_CLK signal) These bits define the period of FMC_CLK clock output signal, expressed in number of KCK_FMC cycles: In asynchronous NOR Flash, SRAM or PSRAM accesses, this value is dont care. Note: Refer to Section20.6.5: Synchronous transactions for FMC_CLK divider ratio formula)
                CLKDIV: u4,
                ///  Data latency for synchronous memory For synchronous access with read write burst mode enabled these bits define the number of memory clock cycles
                DATLAT: u4,
                ///  Access mode These bits specify the asynchronous access modes as shown in the timing diagrams. They are taken into account only when the EXTMOD bit in the FMC_BCRx register is 1.
                ACCMOD: u2,
                ///  DATAHLD
                DATAHLD: u2,
            }),
            ///  >FMC_BCR3
            FMC_BCR3: mmio.Mmio(packed struct(u32) {
                ///  Memory bank enable bit This bit enables the memory bank. After reset Bank1 is enabled, all others are disabled. Accessing a disabled bank causes an ERROR on AXI bus.
                MBKEN: u1,
                ///  Address/data multiplexing enable bit When this bit is set, the address and data values are multiplexed on the data bus, valid only with NOR and PSRAM memories:
                MUXEN: u1,
                ///  Memory type These bits define the type of external memory attached to the corresponding memory bank:
                MTYP: u2,
                ///  Memory data bus width Defines the external memory device width, valid for all type of memories.
                MWID: u2,
                ///  Flash access enable This bit enables NOR Flash memory access operations.
                FACCEN: u1,
                reserved8: u1,
                ///  Burst enable bit This bit enables/disables synchronous accesses during read operations. It is valid only for synchronous memories operating in Burst mode:
                BURSTEN: u1,
                ///  Wait signal polarity bit This bit defines the polarity of the wait signal from memory used for either in synchronous or asynchronous mode:
                WAITPOL: u1,
                reserved11: u1,
                ///  Wait timing configuration The NWAIT signal indicates whether the data from the memory are valid or if a wait state must be inserted when accessing the memory in synchronous mode. This configuration bit determines if NWAIT is asserted by the memory one clock cycle before the wait state or during the wait state:
                WAITCFG: u1,
                ///  Write enable bit This bit indicates whether write operations are enabled/disabled in the bank by the FMC:
                WREN: u1,
                ///  Wait enable bit This bit enables/disables wait-state insertion via the NWAIT signal when accessing the memory in synchronous mode.
                WAITEN: u1,
                ///  Extended mode enable. This bit enables the FMC to program the write timings for asynchronous accesses inside the FMC_BWTR register, thus resulting in different timings for read and write operations. Note: When the extended mode is disabled, the FMC can operate in Mode1 or Mode2 as follows: ** Mode 1 is the default mode when the SRAM/PSRAM memory type is selected (MTYP =0x0 or 0x01) ** Mode 2 is the default mode when the NOR memory type is selected (MTYP = 0x10).
                EXTMOD: u1,
                ///  Wait signal during asynchronous transfers This bit enables/disables the FMC to use the wait signal even during an asynchronous protocol.
                ASYNCWAIT: u1,
                ///  CRAM Page Size These are used for Cellular RAM 1.5 which does not allow burst access to cross the address boundaries between pages. When these bits are configured, the FMC controller splits automatically the burst access when the memory page size is reached (refer to memory datasheet for page size). Other configuration: reserved.
                CPSIZE: u3,
                ///  Write burst enable For PSRAM (CRAM) operating in Burst mode, the bit enables synchronous accesses during write operations. The enable bit for synchronous read accesses is the BURSTEN bit in the FMC_BCRx register.
                CBURSTRW: u1,
                ///  Continuous Clock Enable This bit enables the FMC_CLK clock output to external memory devices. Note: The CCLKEN bit of the FMC_BCR2..4 registers is dont care. It is only enabled through the FMC_BCR1 register. Bank 1 must be configured in synchronous mode to generate the FMC_CLK continuous clock. If CCLKEN bit is set, the FMC_CLK clock ratio is specified by CLKDIV value in the FMC_BTR1 register. CLKDIV in FMC_BWTR1 is dont care. If the synchronous mode is used and CCLKEN bit is set, the synchronous memories connected to other banks than Bank 1 are clocked by the same clock (the CLKDIV value in the FMC_BTR2..4 and FMC_BWTR2..4 registers for other banks has no effect.)
                CCLKEN: u1,
                ///  Write FIFO Disable This bit disables the Write FIFO used by the FMC controller. Note: The WFDIS bit of the FMC_BCR2..4 registers is dont care. It is only enabled through the FMC_BCR1 register.
                WFDIS: u1,
                ///  NBLSET
                NBLSET: u2,
                padding: u8,
            }),
            ///  FMC_BTR3
            FMC_BTR3: mmio.Mmio(packed struct(u32) {
                ///  Address setup phase duration These bits are written by software to define the duration of the address setup phase (refer to Figure81 to Figure93), used in SRAMs, ROMs and asynchronous NOR Flash: For each access mode address setup phase duration, please refer to the respective figure (refer to Figure81 to Figure93). Note: In synchronous accesses, this value is dont care. In Muxed mode or Mode D, the minimum value for ADDSET is 1.
                ADDSET: u4,
                ///  Address-hold phase duration These bits are written by software to define the duration of the address hold phase (refer to Figure81 to Figure93), used in mode D or multiplexed accesses: For each access mode address-hold phase duration, please refer to the respective figure (Figure81 to Figure93). Note: In synchronous accesses, this value is not used, the address hold phase is always 1 memory clock period duration.
                ADDHLD: u4,
                ///  Data-phase duration These bits are written by software to define the duration of the data phase (refer to Figure81 to Figure93), used in asynchronous accesses: For each memory type and access mode data-phase duration, please refer to the respective figure (Figure81 to Figure93). Example: Mode1, write access, DATAST=1: Data-phase duration= DATAST+1 = 2 KCK_FMC clock cycles. Note: In synchronous accesses, this value is dont care.
                DATAST: u8,
                ///  Bus turnaround phase duration These bits are written by software to add a delay at the end of a write-to-read or read-to write transaction. The programmed bus turnaround delay is inserted between an asynchronous read (in muxed or mode D) or write transaction and any other asynchronous /synchronous read/write from/to a static bank. If a read operation is performed, the bank can be the same or a different one, whereas it must be different in case of write operation to the bank, except in muxed mode or mode D. In some cases, whatever the programmed BUSTRUN values, the bus turnaround delay is fixed as follows: The bus turnaround delay is not inserted between two consecutive asynchronous write transfers to the same static memory bank except in muxed mode and mode D. There is a bus turnaround delay of 1 FMC clock cycle between: Two consecutive asynchronous read transfers to the same static memory bank except for modes muxed and D. An asynchronous read to an asynchronous or synchronous write to any static bank or dynamic bank except in modes muxed and D mode. There is a bus turnaround delay of 2 FMC clock cycle between: Two consecutive synchronous write operations (in Burst or Single mode) to the same bank. A synchronous write (burst or single) access and an asynchronous write or read transfer to or from static memory bank (the bank can be the same or a different one in case of a read operation. Two consecutive synchronous read operations (in Burst or Single mode) followed by any synchronous/asynchronous read or write from/to another static memory bank. There is a bus turnaround delay of 3 FMC clock cycle between: Two consecutive synchronous write operations (in Burst or Single mode) to different static banks. A synchronous write access (in Burst or Single mode) and a synchronous read from the same or a different bank. The bus turnaround delay allows to match the minimum time between consecutive transactions (tEHEL from NEx high to NEx low) and the maximum time required by the memory to free the data bus after a read access (tEHQZ): (BUSTRUN + 1) KCK_FMC period &#8805; tEHELmin and (BUSTRUN + 2)KCK_FMC period &#8805; tEHQZmax if EXTMOD = 0 (BUSTRUN + 2)KCK_FMC period &#8805; max (tEHELmin, tEHQZmax) if EXTMOD = 126. ...
                BUSTURN: u4,
                ///  Clock divide ratio (for FMC_CLK signal) These bits define the period of FMC_CLK clock output signal, expressed in number of KCK_FMC cycles: In asynchronous NOR Flash, SRAM or PSRAM accesses, this value is dont care. Note: Refer to Section20.6.5: Synchronous transactions for FMC_CLK divider ratio formula)
                CLKDIV: u4,
                ///  Data latency for synchronous memory For synchronous access with read write burst mode enabled these bits define the number of memory clock cycles
                DATLAT: u4,
                ///  Access mode These bits specify the asynchronous access modes as shown in the timing diagrams. They are taken into account only when the EXTMOD bit in the FMC_BCRx register is 1.
                ACCMOD: u2,
                ///  DATAHLD
                DATAHLD: u2,
            }),
            ///  >FMC_BCR4
            FMC_BCR4: mmio.Mmio(packed struct(u32) {
                ///  Memory bank enable bit This bit enables the memory bank. After reset Bank1 is enabled, all others are disabled. Accessing a disabled bank causes an ERROR on AXI bus.
                MBKEN: u1,
                ///  Address/data multiplexing enable bit When this bit is set, the address and data values are multiplexed on the data bus, valid only with NOR and PSRAM memories:
                MUXEN: u1,
                ///  Memory type These bits define the type of external memory attached to the corresponding memory bank:
                MTYP: u2,
                ///  Memory data bus width Defines the external memory device width, valid for all type of memories.
                MWID: u2,
                ///  Flash access enable This bit enables NOR Flash memory access operations.
                FACCEN: u1,
                reserved8: u1,
                ///  Burst enable bit This bit enables/disables synchronous accesses during read operations. It is valid only for synchronous memories operating in Burst mode:
                BURSTEN: u1,
                ///  Wait signal polarity bit This bit defines the polarity of the wait signal from memory used for either in synchronous or asynchronous mode:
                WAITPOL: u1,
                reserved11: u1,
                ///  Wait timing configuration The NWAIT signal indicates whether the data from the memory are valid or if a wait state must be inserted when accessing the memory in synchronous mode. This configuration bit determines if NWAIT is asserted by the memory one clock cycle before the wait state or during the wait state:
                WAITCFG: u1,
                ///  Write enable bit This bit indicates whether write operations are enabled/disabled in the bank by the FMC:
                WREN: u1,
                ///  Wait enable bit This bit enables/disables wait-state insertion via the NWAIT signal when accessing the memory in synchronous mode.
                WAITEN: u1,
                ///  Extended mode enable. This bit enables the FMC to program the write timings for asynchronous accesses inside the FMC_BWTR register, thus resulting in different timings for read and write operations. Note: When the extended mode is disabled, the FMC can operate in Mode1 or Mode2 as follows: ** Mode 1 is the default mode when the SRAM/PSRAM memory type is selected (MTYP =0x0 or 0x01) ** Mode 2 is the default mode when the NOR memory type is selected (MTYP = 0x10).
                EXTMOD: u1,
                ///  Wait signal during asynchronous transfers This bit enables/disables the FMC to use the wait signal even during an asynchronous protocol.
                ASYNCWAIT: u1,
                ///  CRAM Page Size These are used for Cellular RAM 1.5 which does not allow burst access to cross the address boundaries between pages. When these bits are configured, the FMC controller splits automatically the burst access when the memory page size is reached (refer to memory datasheet for page size). Other configuration: reserved.
                CPSIZE: u3,
                ///  Write burst enable For PSRAM (CRAM) operating in Burst mode, the bit enables synchronous accesses during write operations. The enable bit for synchronous read accesses is the BURSTEN bit in the FMC_BCRx register.
                CBURSTRW: u1,
                ///  Continuous Clock Enable This bit enables the FMC_CLK clock output to external memory devices. Note: The CCLKEN bit of the FMC_BCR2..4 registers is dont care. It is only enabled through the FMC_BCR1 register. Bank 1 must be configured in synchronous mode to generate the FMC_CLK continuous clock. If CCLKEN bit is set, the FMC_CLK clock ratio is specified by CLKDIV value in the FMC_BTR1 register. CLKDIV in FMC_BWTR1 is dont care. If the synchronous mode is used and CCLKEN bit is set, the synchronous memories connected to other banks than Bank 1 are clocked by the same clock (the CLKDIV value in the FMC_BTR2..4 and FMC_BWTR2..4 registers for other banks has no effect.)
                CCLKEN: u1,
                ///  Write FIFO Disable This bit disables the Write FIFO used by the FMC controller. Note: The WFDIS bit of the FMC_BCR2..4 registers is dont care. It is only enabled through the FMC_BCR1 register.
                WFDIS: u1,
                ///  NBLSET
                NBLSET: u2,
                padding: u8,
            }),
            ///  FMC_BTR4
            FMC_BTR4: mmio.Mmio(packed struct(u32) {
                ///  Address setup phase duration These bits are written by software to define the duration of the address setup phase (refer to Figure81 to Figure93), used in SRAMs, ROMs and asynchronous NOR Flash: For each access mode address setup phase duration, please refer to the respective figure (refer to Figure81 to Figure93). Note: In synchronous accesses, this value is dont care. In Muxed mode or Mode D, the minimum value for ADDSET is 1.
                ADDSET: u4,
                ///  Address-hold phase duration These bits are written by software to define the duration of the address hold phase (refer to Figure81 to Figure93), used in mode D or multiplexed accesses: For each access mode address-hold phase duration, please refer to the respective figure (Figure81 to Figure93). Note: In synchronous accesses, this value is not used, the address hold phase is always 1 memory clock period duration.
                ADDHLD: u4,
                ///  Data-phase duration These bits are written by software to define the duration of the data phase (refer to Figure81 to Figure93), used in asynchronous accesses: For each memory type and access mode data-phase duration, please refer to the respective figure (Figure81 to Figure93). Example: Mode1, write access, DATAST=1: Data-phase duration= DATAST+1 = 2 KCK_FMC clock cycles. Note: In synchronous accesses, this value is dont care.
                DATAST: u8,
                ///  Bus turnaround phase duration These bits are written by software to add a delay at the end of a write-to-read or read-to write transaction. The programmed bus turnaround delay is inserted between an asynchronous read (in muxed or mode D) or write transaction and any other asynchronous /synchronous read/write from/to a static bank. If a read operation is performed, the bank can be the same or a different one, whereas it must be different in case of write operation to the bank, except in muxed mode or mode D. In some cases, whatever the programmed BUSTRUN values, the bus turnaround delay is fixed as follows: The bus turnaround delay is not inserted between two consecutive asynchronous write transfers to the same static memory bank except in muxed mode and mode D. There is a bus turnaround delay of 1 FMC clock cycle between: Two consecutive asynchronous read transfers to the same static memory bank except for modes muxed and D. An asynchronous read to an asynchronous or synchronous write to any static bank or dynamic bank except in modes muxed and D mode. There is a bus turnaround delay of 2 FMC clock cycle between: Two consecutive synchronous write operations (in Burst or Single mode) to the same bank. A synchronous write (burst or single) access and an asynchronous write or read transfer to or from static memory bank (the bank can be the same or a different one in case of a read operation. Two consecutive synchronous read operations (in Burst or Single mode) followed by any synchronous/asynchronous read or write from/to another static memory bank. There is a bus turnaround delay of 3 FMC clock cycle between: Two consecutive synchronous write operations (in Burst or Single mode) to different static banks. A synchronous write access (in Burst or Single mode) and a synchronous read from the same or a different bank. The bus turnaround delay allows to match the minimum time between consecutive transactions (tEHEL from NEx high to NEx low) and the maximum time required by the memory to free the data bus after a read access (tEHQZ): (BUSTRUN + 1) KCK_FMC period &#8805; tEHELmin and (BUSTRUN + 2)KCK_FMC period &#8805; tEHQZmax if EXTMOD = 0 (BUSTRUN + 2)KCK_FMC period &#8805; max (tEHELmin, tEHQZmax) if EXTMOD = 126. ...
                BUSTURN: u4,
                ///  Clock divide ratio (for FMC_CLK signal) These bits define the period of FMC_CLK clock output signal, expressed in number of KCK_FMC cycles: In asynchronous NOR Flash, SRAM or PSRAM accesses, this value is dont care. Note: Refer to Section20.6.5: Synchronous transactions for FMC_CLK divider ratio formula)
                CLKDIV: u4,
                ///  Data latency for synchronous memory For synchronous access with read write burst mode enabled these bits define the number of memory clock cycles
                DATLAT: u4,
                ///  Access mode These bits specify the asynchronous access modes as shown in the timing diagrams. They are taken into account only when the EXTMOD bit in the FMC_BCRx register is 1.
                ACCMOD: u2,
                ///  DATAHLD
                DATAHLD: u2,
            }),
            ///  PCSCNTR
            PCSCNTR: mmio.Mmio(packed struct(u32) {
                ///  Chip select counter
                CSCOUNT: u16,
                ///  Counter Bank 1 enable
                CNTB1EN: u1,
                ///  Counter Bank 2 enable
                CNTB2EN: u1,
                ///  Counter Bank 3 enable
                CNTB3EN: u1,
                ///  Counter Bank 4 enable
                CNTB4EN: u1,
                padding: u12,
            }),
            reserved128: [92]u8,
            ///  NAND Flash control registers
            FMC_PCR: mmio.Mmio(packed struct(u32) {
                reserved1: u1,
                ///  Wait feature enable bit. This bit enables the Wait feature for the NAND Flash memory bank:
                PWAITEN: u1,
                ///  NAND Flash memory bank enable bit. This bit enables the memory bank. Accessing a disabled memory bank causes an ERROR on AXI bus
                PBKEN: u1,
                ///  Memory type
                PTYP: u1,
                ///  Data bus width. These bits define the external memory device width.
                PWID: u2,
                ///  ECC computation logic enable bit
                ECCEN: u1,
                reserved9: u2,
                ///  CLE to RE delay. These bits set time from CLE low to RE low in number of KCK_FMC clock cycles. The time is give by the following formula: t_clr = (TCLR + SET + 2) TKCK_FMC where TKCK_FMC is the KCK_FMC clock period Note: Set is MEMSET or ATTSET according to the addressed space.
                TCLR: u4,
                ///  ALE to RE delay. These bits set time from ALE low to RE low in number of KCK_FMC clock cycles. Time is: t_ar = (TAR + SET + 2) TKCK_FMC where TKCK_FMC is the FMC clock period Note: Set is MEMSET or ATTSET according to the addressed space.
                TAR: u4,
                ///  ECC page size. These bits define the page size for the extended ECC:
                ECCPS: u3,
                padding: u12,
            }),
            ///  This register contains information about the FIFO status and interrupt. The FMC features a FIFO that is used when writing to memories to transfer up to 16 words of data.This is used to quickly write to the FIFO and free the AXI bus for transactions to peripherals other than the FMC, while the FMC is draining its FIFO into the memory. One of these register bits indicates the status of the FIFO, for ECC purposes.The ECC is calculated while the data are written to the memory. To read the correct ECC, the software must consequently wait until the FIFO is empty.
            FMC_SR: mmio.Mmio(packed struct(u32) {
                ///  Interrupt rising edge status The flag is set by hardware and reset by software. Note: If this bit is written by software to 1 it will be set.
                IRS: u1,
                ///  Interrupt high-level status The flag is set by hardware and reset by software.
                ILS: u1,
                ///  Interrupt falling edge status The flag is set by hardware and reset by software. Note: If this bit is written by software to 1 it will be set.
                IFS: u1,
                ///  Interrupt rising edge detection enable bit
                IREN: u1,
                ///  Interrupt high-level detection enable bit
                ILEN: u1,
                ///  Interrupt falling edge detection enable bit
                IFEN: u1,
                ///  FIFO empty. Read-only bit that provides the status of the FIFO
                FEMPT: u1,
                padding: u25,
            }),
            ///  The FMC_PMEM read/write register contains the timing information for NAND Flash memory bank. This information is used to access either the common memory space of the NAND Flash for command, address write access and data read/write access.
            FMC_PMEM: mmio.Mmio(packed struct(u32) {
                ///  Common memory x setup time These bits define the number of KCK_FMC (+1) clock cycles to set up the address before the command assertion (NWE, NOE), for NAND Flash read or write access to common memory space:
                MEMSET: u8,
                ///  Common memory wait time These bits define the minimum number of KCK_FMC (+1) clock cycles to assert the command (NWE, NOE), for NAND Flash read or write access to common memory space. The duration of command assertion is extended if the wait signal (NWAIT) is active (low) at the end of the programmed value of KCK_FMC:
                MEMWAIT: u8,
                ///  Common memory hold time These bits define the number of KCK_FMC clock cycles for write accesses and KCK_FMC+1 clock cycles for read accesses during which the address is held (and data for write accesses) after the command is de-asserted (NWE, NOE), for NAND Flash read or write access to common memory space:
                MEMHOLD: u8,
                ///  Common memory x data bus Hi-Z time These bits define the number of KCK_FMC clock cycles during which the data bus is kept Hi-Z after the start of a NAND Flash write access to common memory space. This is only valid for write transactions:
                MEMHIZ: u8,
            }),
            ///  The FMC_PATT read/write register contains the timing information for NAND Flash memory bank. It is used for 8-bit accesses to the attribute memory space of the NAND Flash for the last address write access if the timing must differ from that of previous accesses (for Ready/Busy management, refer to Section20.8.5: NAND Flash prewait feature).
            FMC_PATT: mmio.Mmio(packed struct(u32) {
                ///  Attribute memory setup time These bits define the number of KCK_FMC (+1) clock cycles to set up address before the command assertion (NWE, NOE), for NAND Flash read or write access to attribute memory space:
                ATTSET: u8,
                ///  Attribute memory wait time These bits define the minimum number of x KCK_FMC (+1) clock cycles to assert the command (NWE, NOE), for NAND Flash read or write access to attribute memory space. The duration for command assertion is extended if the wait signal (NWAIT) is active (low) at the end of the programmed value of KCK_FMC:
                ATTWAIT: u8,
                ///  Attribute memory hold time These bits define the number of KCK_FMC clock cycles during which the address is held (and data for write access) after the command de-assertion (NWE, NOE), for NAND Flash read or write access to attribute memory space:
                ATTHOLD: u8,
                ///  Attribute memory data bus Hi-Z time These bits define the number of KCK_FMC clock cycles during which the data bus is kept in Hi-Z after the start of a NAND Flash write access to attribute memory space on socket. Only valid for writ transaction:
                ATTHIZ: u8,
            }),
            reserved148: [4]u8,
            ///  This register contain the current error correction code value computed by the ECC computation modules of the FMC NAND controller. When the CPU reads/writes the data from a NAND Flash memory page at the correct address (refer to Section20.8.6: Computation of the error correction code (ECC) in NAND Flash memory), the data read/written from/to the NAND Flash memory are processed automatically by the ECC computation module. When X bytes have been read (according to the ECCPS field in the FMC_PCR registers), the CPU must read the computed ECC value from the FMC_ECC registers. It then verifies if these computed parity data are the same as the parity value recorded in the spare area, to determine whether a page is valid, and, to correct it otherwise. The FMC_ECCR register should be cleared after being read by setting the ECCEN bit to 0. To compute a new data block, the ECCEN bit must be set to 1.
            FMC_ECCR: mmio.Mmio(packed struct(u32) {
                ///  ECC result This field contains the value computed by the ECC computation logic. Table167 describes the contents of these bit fields.
                ECC: u32,
            }),
            reserved260: [108]u8,
            ///  This register contains the control information of each memory bank. It is used for SRAMs, PSRAMs and NOR Flash memories. When the EXTMOD bit is set in the FMC_BCRx register, then this register is active for write access.
            FMC_BWTR1: mmio.Mmio(packed struct(u32) {
                ///  Address setup phase duration. These bits are written by software to define the duration of the address setup phase in KCK_FMC cycles (refer to Figure81 to Figure93), used in asynchronous accesses: ... Note: In synchronous accesses, this value is not used, the address setup phase is always 1 Flash clock period duration. In muxed mode, the minimum ADDSET value is 1.
                ADDSET: u4,
                ///  Address-hold phase duration. These bits are written by software to define the duration of the address hold phase (refer to Figure81 to Figure93), used in asynchronous multiplexed accesses: ... Note: In synchronous NOR Flash accesses, this value is not used, the address hold phase is always 1 Flash clock period duration.
                ADDHLD: u4,
                ///  Data-phase duration. These bits are written by software to define the duration of the data phase (refer to Figure81 to Figure93), used in asynchronous SRAM, PSRAM and NOR Flash memory accesses:
                DATAST: u8,
                ///  Bus turnaround phase duration These bits are written by software to add a delay at the end of a write transaction to match the minimum time between consecutive transactions (tEHEL from ENx high to ENx low): (BUSTRUN + 1) KCK_FMC period &#8805; tEHELmin. The programmed bus turnaround delay is inserted between a an asynchronous write transfer and any other asynchronous /synchronous read or write transfer to or from a static bank. If a read operation is performed, the bank can be the same or a different one, whereas it must be different in case of write operation to the bank, except in muxed mode or mode D. In some cases, whatever the programmed BUSTRUN values, the bus turnaround delay is fixed as follows: The bus turnaround delay is not inserted between two consecutive asynchronous write transfers to the same static memory bank except for muxed mode and mode D. There is a bus turnaround delay of 2 FMC clock cycle between: Two consecutive synchronous write operations (in Burst or Single mode) to the same bank A synchronous write transfer ((in Burst or Single mode) and an asynchronous write or read transfer to or from static memory bank. There is a bus turnaround delay of 3 FMC clock cycle between: Two consecutive synchronous write operations (in Burst or Single mode) to different static banks. A synchronous write transfer (in Burst or Single mode) and a synchronous read from the same or a different bank. ...
                BUSTURN: u4,
                reserved28: u8,
                ///  Access mode. These bits specify the asynchronous access modes as shown in the next timing diagrams.These bits are taken into account only when the EXTMOD bit in the FMC_BCRx register is 1.
                ACCMOD: u2,
                padding: u2,
            }),
            reserved268: [4]u8,
            ///  This register contains the control information of each memory bank. It is used for SRAMs, PSRAMs and NOR Flash memories. When the EXTMOD bit is set in the FMC_BCRx register, then this register is active for write access.
            FMC_BWTR2: mmio.Mmio(packed struct(u32) {
                ///  Address setup phase duration. These bits are written by software to define the duration of the address setup phase in KCK_FMC cycles (refer to Figure81 to Figure93), used in asynchronous accesses: ... Note: In synchronous accesses, this value is not used, the address setup phase is always 1 Flash clock period duration. In muxed mode, the minimum ADDSET value is 1.
                ADDSET: u4,
                ///  Address-hold phase duration. These bits are written by software to define the duration of the address hold phase (refer to Figure81 to Figure93), used in asynchronous multiplexed accesses: ... Note: In synchronous NOR Flash accesses, this value is not used, the address hold phase is always 1 Flash clock period duration.
                ADDHLD: u4,
                ///  Data-phase duration. These bits are written by software to define the duration of the data phase (refer to Figure81 to Figure93), used in asynchronous SRAM, PSRAM and NOR Flash memory accesses:
                DATAST: u8,
                ///  Bus turnaround phase duration These bits are written by software to add a delay at the end of a write transaction to match the minimum time between consecutive transactions (tEHEL from ENx high to ENx low): (BUSTRUN + 1) KCK_FMC period &#8805; tEHELmin. The programmed bus turnaround delay is inserted between a an asynchronous write transfer and any other asynchronous /synchronous read or write transfer to or from a static bank. If a read operation is performed, the bank can be the same or a different one, whereas it must be different in case of write operation to the bank, except in muxed mode or mode D. In some cases, whatever the programmed BUSTRUN values, the bus turnaround delay is fixed as follows: The bus turnaround delay is not inserted between two consecutive asynchronous write transfers to the same static memory bank except for muxed mode and mode D. There is a bus turnaround delay of 2 FMC clock cycle between: Two consecutive synchronous write operations (in Burst or Single mode) to the same bank A synchronous write transfer ((in Burst or Single mode) and an asynchronous write or read transfer to or from static memory bank. There is a bus turnaround delay of 3 FMC clock cycle between: Two consecutive synchronous write operations (in Burst or Single mode) to different static banks. A synchronous write transfer (in Burst or Single mode) and a synchronous read from the same or a different bank. ...
                BUSTURN: u4,
                reserved28: u8,
                ///  Access mode. These bits specify the asynchronous access modes as shown in the next timing diagrams.These bits are taken into account only when the EXTMOD bit in the FMC_BCRx register is 1.
                ACCMOD: u2,
                padding: u2,
            }),
            reserved276: [4]u8,
            ///  This register contains the control information of each memory bank. It is used for SRAMs, PSRAMs and NOR Flash memories. When the EXTMOD bit is set in the FMC_BCRx register, then this register is active for write access.
            FMC_BWTR3: mmio.Mmio(packed struct(u32) {
                ///  Address setup phase duration. These bits are written by software to define the duration of the address setup phase in KCK_FMC cycles (refer to Figure81 to Figure93), used in asynchronous accesses: ... Note: In synchronous accesses, this value is not used, the address setup phase is always 1 Flash clock period duration. In muxed mode, the minimum ADDSET value is 1.
                ADDSET: u4,
                ///  Address-hold phase duration. These bits are written by software to define the duration of the address hold phase (refer to Figure81 to Figure93), used in asynchronous multiplexed accesses: ... Note: In synchronous NOR Flash accesses, this value is not used, the address hold phase is always 1 Flash clock period duration.
                ADDHLD: u4,
                ///  Data-phase duration. These bits are written by software to define the duration of the data phase (refer to Figure81 to Figure93), used in asynchronous SRAM, PSRAM and NOR Flash memory accesses:
                DATAST: u8,
                ///  Bus turnaround phase duration These bits are written by software to add a delay at the end of a write transaction to match the minimum time between consecutive transactions (tEHEL from ENx high to ENx low): (BUSTRUN + 1) KCK_FMC period &#8805; tEHELmin. The programmed bus turnaround delay is inserted between a an asynchronous write transfer and any other asynchronous /synchronous read or write transfer to or from a static bank. If a read operation is performed, the bank can be the same or a different one, whereas it must be different in case of write operation to the bank, except in muxed mode or mode D. In some cases, whatever the programmed BUSTRUN values, the bus turnaround delay is fixed as follows: The bus turnaround delay is not inserted between two consecutive asynchronous write transfers to the same static memory bank except for muxed mode and mode D. There is a bus turnaround delay of 2 FMC clock cycle between: Two consecutive synchronous write operations (in Burst or Single mode) to the same bank A synchronous write transfer ((in Burst or Single mode) and an asynchronous write or read transfer to or from static memory bank. There is a bus turnaround delay of 3 FMC clock cycle between: Two consecutive synchronous write operations (in Burst or Single mode) to different static banks. A synchronous write transfer (in Burst or Single mode) and a synchronous read from the same or a different bank. ...
                BUSTURN: u4,
                reserved28: u8,
                ///  Access mode. These bits specify the asynchronous access modes as shown in the next timing diagrams.These bits are taken into account only when the EXTMOD bit in the FMC_BCRx register is 1.
                ACCMOD: u2,
                padding: u2,
            }),
            reserved284: [4]u8,
            ///  This register contains the control information of each memory bank. It is used for SRAMs, PSRAMs and NOR Flash memories. When the EXTMOD bit is set in the FMC_BCRx register, then this register is active for write access.
            FMC_BWTR4: mmio.Mmio(packed struct(u32) {
                ///  Address setup phase duration. These bits are written by software to define the duration of the address setup phase in KCK_FMC cycles (refer to Figure81 to Figure93), used in asynchronous accesses: ... Note: In synchronous accesses, this value is not used, the address setup phase is always 1 Flash clock period duration. In muxed mode, the minimum ADDSET value is 1.
                ADDSET: u4,
                ///  Address-hold phase duration. These bits are written by software to define the duration of the address hold phase (refer to Figure81 to Figure93), used in asynchronous multiplexed accesses: ... Note: In synchronous NOR Flash accesses, this value is not used, the address hold phase is always 1 Flash clock period duration.
                ADDHLD: u4,
                ///  Data-phase duration. These bits are written by software to define the duration of the data phase (refer to Figure81 to Figure93), used in asynchronous SRAM, PSRAM and NOR Flash memory accesses:
                DATAST: u8,
                ///  Bus turnaround phase duration These bits are written by software to add a delay at the end of a write transaction to match the minimum time between consecutive transactions (tEHEL from ENx high to ENx low): (BUSTRUN + 1) KCK_FMC period &#8805; tEHELmin. The programmed bus turnaround delay is inserted between a an asynchronous write transfer and any other asynchronous /synchronous read or write transfer to or from a static bank. If a read operation is performed, the bank can be the same or a different one, whereas it must be different in case of write operation to the bank, except in muxed mode or mode D. In some cases, whatever the programmed BUSTRUN values, the bus turnaround delay is fixed as follows: The bus turnaround delay is not inserted between two consecutive asynchronous write transfers to the same static memory bank except for muxed mode and mode D. There is a bus turnaround delay of 2 FMC clock cycle between: Two consecutive synchronous write operations (in Burst or Single mode) to the same bank A synchronous write transfer ((in Burst or Single mode) and an asynchronous write or read transfer to or from static memory bank. There is a bus turnaround delay of 3 FMC clock cycle between: Two consecutive synchronous write operations (in Burst or Single mode) to different static banks. A synchronous write transfer (in Burst or Single mode) and a synchronous read from the same or a different bank. ...
                BUSTURN: u4,
                reserved28: u8,
                ///  Access mode. These bits specify the asynchronous access modes as shown in the next timing diagrams.These bits are taken into account only when the EXTMOD bit in the FMC_BCRx register is 1.
                ACCMOD: u2,
                padding: u2,
            }),
        };

        ///  Nested vectored interrupt controller
        pub const NVIC_STIR = extern struct {
            ///  Software trigger interrupt register
            STIR: mmio.Mmio(packed struct(u32) {
                ///  Software generated interrupt ID
                INTID: u9,
                padding: u23,
            }),
        };

        ///  Nested Vectored Interrupt Controller
        pub const NVIC = extern struct {
            ///  Interrupt Set-Enable Register
            ISER0: mmio.Mmio(packed struct(u32) {
                ///  SETENA
                SETENA: u32,
            }),
            ///  Interrupt Set-Enable Register
            ISER1: mmio.Mmio(packed struct(u32) {
                ///  SETENA
                SETENA: u32,
            }),
            ///  Interrupt Set-Enable Register
            ISER2: mmio.Mmio(packed struct(u32) {
                ///  SETENA
                SETENA: u32,
            }),
            ///  Interrupt Set-Enable Register
            ISER3: u32,
            reserved128: [112]u8,
            ///  Interrupt Clear-Enable Register
            ICER0: mmio.Mmio(packed struct(u32) {
                ///  CLRENA
                CLRENA: u32,
            }),
            ///  Interrupt Clear-Enable Register
            ICER1: mmio.Mmio(packed struct(u32) {
                ///  CLRENA
                CLRENA: u32,
            }),
            ///  Interrupt Clear-Enable Register
            ICER2: mmio.Mmio(packed struct(u32) {
                ///  CLRENA
                CLRENA: u32,
            }),
            ///  Interrupt Clear-Enable Register
            ICER3: u32,
            reserved256: [112]u8,
            ///  Interrupt Set-Pending Register
            ISPR0: mmio.Mmio(packed struct(u32) {
                ///  SETPEND
                SETPEND: u32,
            }),
            ///  Interrupt Set-Pending Register
            ISPR1: mmio.Mmio(packed struct(u32) {
                ///  SETPEND
                SETPEND: u32,
            }),
            ///  Interrupt Set-Pending Register
            ISPR2: mmio.Mmio(packed struct(u32) {
                ///  SETPEND
                SETPEND: u32,
            }),
            ///  Interrupt Set-Pending Register
            ISPR3: u32,
            reserved384: [112]u8,
            ///  Interrupt Clear-Pending Register
            ICPR0: mmio.Mmio(packed struct(u32) {
                ///  CLRPEND
                CLRPEND: u32,
            }),
            ///  Interrupt Clear-Pending Register
            ICPR1: mmio.Mmio(packed struct(u32) {
                ///  CLRPEND
                CLRPEND: u32,
            }),
            ///  Interrupt Clear-Pending Register
            ICPR2: mmio.Mmio(packed struct(u32) {
                ///  CLRPEND
                CLRPEND: u32,
            }),
            ///  Interrupt Clear-Pending Register
            ICPR3: u32,
            reserved512: [112]u8,
            ///  Interrupt Active Bit Register
            IABR0: mmio.Mmio(packed struct(u32) {
                ///  ACTIVE
                ACTIVE: u32,
            }),
            ///  Interrupt Active Bit Register
            IABR1: mmio.Mmio(packed struct(u32) {
                ///  ACTIVE
                ACTIVE: u32,
            }),
            ///  Interrupt Active Bit Register
            IABR2: mmio.Mmio(packed struct(u32) {
                ///  ACTIVE
                ACTIVE: u32,
            }),
            ///  Interrupt Active Bit Register
            IABR3: u32,
            reserved768: [240]u8,
            ///  Interrupt Priority Register
            IPR0: mmio.Mmio(packed struct(u32) {
                ///  IPR_N0
                IPR_N0: u8,
                ///  IPR_N1
                IPR_N1: u8,
                ///  IPR_N2
                IPR_N2: u8,
                ///  IPR_N3
                IPR_N3: u8,
            }),
            ///  Interrupt Priority Register
            IPR1: mmio.Mmio(packed struct(u32) {
                ///  IPR_N0
                IPR_N0: u8,
                ///  IPR_N1
                IPR_N1: u8,
                ///  IPR_N2
                IPR_N2: u8,
                ///  IPR_N3
                IPR_N3: u8,
            }),
            ///  Interrupt Priority Register
            IPR2: mmio.Mmio(packed struct(u32) {
                ///  IPR_N0
                IPR_N0: u8,
                ///  IPR_N1
                IPR_N1: u8,
                ///  IPR_N2
                IPR_N2: u8,
                ///  IPR_N3
                IPR_N3: u8,
            }),
            ///  Interrupt Priority Register
            IPR3: mmio.Mmio(packed struct(u32) {
                ///  IPR_N0
                IPR_N0: u8,
                ///  IPR_N1
                IPR_N1: u8,
                ///  IPR_N2
                IPR_N2: u8,
                ///  IPR_N3
                IPR_N3: u8,
            }),
            ///  Interrupt Priority Register
            IPR4: mmio.Mmio(packed struct(u32) {
                ///  IPR_N0
                IPR_N0: u8,
                ///  IPR_N1
                IPR_N1: u8,
                ///  IPR_N2
                IPR_N2: u8,
                ///  IPR_N3
                IPR_N3: u8,
            }),
            ///  Interrupt Priority Register
            IPR5: mmio.Mmio(packed struct(u32) {
                ///  IPR_N0
                IPR_N0: u8,
                ///  IPR_N1
                IPR_N1: u8,
                ///  IPR_N2
                IPR_N2: u8,
                ///  IPR_N3
                IPR_N3: u8,
            }),
            ///  Interrupt Priority Register
            IPR6: mmio.Mmio(packed struct(u32) {
                ///  IPR_N0
                IPR_N0: u8,
                ///  IPR_N1
                IPR_N1: u8,
                ///  IPR_N2
                IPR_N2: u8,
                ///  IPR_N3
                IPR_N3: u8,
            }),
            ///  Interrupt Priority Register
            IPR7: mmio.Mmio(packed struct(u32) {
                ///  IPR_N0
                IPR_N0: u8,
                ///  IPR_N1
                IPR_N1: u8,
                ///  IPR_N2
                IPR_N2: u8,
                ///  IPR_N3
                IPR_N3: u8,
            }),
            ///  Interrupt Priority Register
            IPR8: mmio.Mmio(packed struct(u32) {
                ///  IPR_N0
                IPR_N0: u8,
                ///  IPR_N1
                IPR_N1: u8,
                ///  IPR_N2
                IPR_N2: u8,
                ///  IPR_N3
                IPR_N3: u8,
            }),
            ///  Interrupt Priority Register
            IPR9: mmio.Mmio(packed struct(u32) {
                ///  IPR_N0
                IPR_N0: u8,
                ///  IPR_N1
                IPR_N1: u8,
                ///  IPR_N2
                IPR_N2: u8,
                ///  IPR_N3
                IPR_N3: u8,
            }),
            ///  Interrupt Priority Register
            IPR10: mmio.Mmio(packed struct(u32) {
                ///  IPR_N0
                IPR_N0: u8,
                ///  IPR_N1
                IPR_N1: u8,
                ///  IPR_N2
                IPR_N2: u8,
                ///  IPR_N3
                IPR_N3: u8,
            }),
            ///  Interrupt Priority Register
            IPR11: mmio.Mmio(packed struct(u32) {
                ///  IPR_N0
                IPR_N0: u8,
                ///  IPR_N1
                IPR_N1: u8,
                ///  IPR_N2
                IPR_N2: u8,
                ///  IPR_N3
                IPR_N3: u8,
            }),
            ///  Interrupt Priority Register
            IPR12: mmio.Mmio(packed struct(u32) {
                ///  IPR_N0
                IPR_N0: u8,
                ///  IPR_N1
                IPR_N1: u8,
                ///  IPR_N2
                IPR_N2: u8,
                ///  IPR_N3
                IPR_N3: u8,
            }),
            ///  Interrupt Priority Register
            IPR13: mmio.Mmio(packed struct(u32) {
                ///  IPR_N0
                IPR_N0: u8,
                ///  IPR_N1
                IPR_N1: u8,
                ///  IPR_N2
                IPR_N2: u8,
                ///  IPR_N3
                IPR_N3: u8,
            }),
            ///  Interrupt Priority Register
            IPR14: mmio.Mmio(packed struct(u32) {
                ///  IPR_N0
                IPR_N0: u8,
                ///  IPR_N1
                IPR_N1: u8,
                ///  IPR_N2
                IPR_N2: u8,
                ///  IPR_N3
                IPR_N3: u8,
            }),
            ///  Interrupt Priority Register
            IPR15: mmio.Mmio(packed struct(u32) {
                ///  IPR_N0
                IPR_N0: u8,
                ///  IPR_N1
                IPR_N1: u8,
                ///  IPR_N2
                IPR_N2: u8,
                ///  IPR_N3
                IPR_N3: u8,
            }),
            ///  Interrupt Priority Register
            IPR16: mmio.Mmio(packed struct(u32) {
                ///  IPR_N0
                IPR_N0: u8,
                ///  IPR_N1
                IPR_N1: u8,
                ///  IPR_N2
                IPR_N2: u8,
                ///  IPR_N3
                IPR_N3: u8,
            }),
            ///  Interrupt Priority Register
            IPR17: mmio.Mmio(packed struct(u32) {
                ///  IPR_N0
                IPR_N0: u8,
                ///  IPR_N1
                IPR_N1: u8,
                ///  IPR_N2
                IPR_N2: u8,
                ///  IPR_N3
                IPR_N3: u8,
            }),
            ///  Interrupt Priority Register
            IPR18: mmio.Mmio(packed struct(u32) {
                ///  IPR_N0
                IPR_N0: u8,
                ///  IPR_N1
                IPR_N1: u8,
                ///  IPR_N2
                IPR_N2: u8,
                ///  IPR_N3
                IPR_N3: u8,
            }),
            ///  Interrupt Priority Register
            IPR19: mmio.Mmio(packed struct(u32) {
                ///  IPR_N0
                IPR_N0: u8,
                ///  IPR_N1
                IPR_N1: u8,
                ///  IPR_N2
                IPR_N2: u8,
                ///  IPR_N3
                IPR_N3: u8,
            }),
            ///  Interrupt Priority Register
            IPR20: mmio.Mmio(packed struct(u32) {
                ///  IPR_N0
                IPR_N0: u8,
                ///  IPR_N1
                IPR_N1: u8,
                ///  IPR_N2
                IPR_N2: u8,
                ///  IPR_N3
                IPR_N3: u8,
            }),
            ///  IPR21
            IPR21: u32,
            ///  IPR22
            IPR22: u32,
            ///  IPR23
            IPR23: u32,
            ///  IPR24
            IPR24: u32,
            ///  IPR25
            IPR25: u32,
            ///  IPR26
            IPR26: u32,
            ///  IPR27
            IPR27: u32,
            ///  IPR28
            IPR28: u32,
            ///  IPR29
            IPR29: u32,
        };

        ///  Advanced-timers
        pub const TIM1 = extern struct {
            ///  control register 1
            CR1: mmio.Mmio(packed struct(u32) {
                ///  Counter enable
                CEN: u1,
                ///  Update disable
                UDIS: u1,
                ///  Update request source
                URS: u1,
                ///  One-pulse mode
                OPM: u1,
                ///  Direction
                DIR: u1,
                ///  Center-aligned mode selection
                CMS: u2,
                ///  Auto-reload preload enable
                ARPE: u1,
                ///  Clock division
                CKD: u2,
                reserved11: u1,
                ///  UIF status bit remapping
                UIFREMAP: u1,
                padding: u20,
            }),
            ///  control register 2
            CR2: mmio.Mmio(packed struct(u32) {
                ///  Capture/compare preloaded control
                CCPC: u1,
                reserved2: u1,
                ///  Capture/compare control update selection
                CCUS: u1,
                ///  Capture/compare DMA selection
                CCDS: u1,
                ///  Master mode selection
                MMS: u3,
                ///  TI1 selection
                TI1S: u1,
                ///  Output Idle state 1
                OIS1: u1,
                ///  Output Idle state 1
                OIS1N: u1,
                ///  Output Idle state 2
                OIS2: u1,
                ///  Output Idle state 2
                OIS2N: u1,
                ///  Output Idle state 3
                OIS3: u1,
                ///  Output Idle state 3
                OIS3N: u1,
                ///  Output Idle state 4
                OIS4: u1,
                ///  Output Idle state 5 (OC5 output)
                OIS5: u1,
                ///  Output Idle state 6
                OIS6: u1,
                reserved20: u3,
                ///  Master mode selection 2
                MMS2: u4,
                padding: u8,
            }),
            ///  slave mode control register
            SMCR: mmio.Mmio(packed struct(u32) {
                ///  Slave mode selection
                SMS: u3,
                reserved4: u1,
                ///  Trigger selection
                TS: u3,
                ///  Master/Slave mode
                MSM: u1,
                ///  External trigger filter
                ETF: u4,
                ///  External trigger prescaler
                ETPS: u2,
                ///  External clock enable
                ECE: u1,
                ///  External trigger polarity
                ETP: u1,
                ///  Slave mode selection - bit 3
                SMS_bit3: u1,
                padding: u15,
            }),
            ///  DMA/Interrupt enable register
            DIER: mmio.Mmio(packed struct(u32) {
                ///  Update interrupt enable
                UIE: u1,
                ///  Capture/Compare 1 interrupt enable
                CC1IE: u1,
                ///  Capture/Compare 2 interrupt enable
                CC2IE: u1,
                ///  Capture/Compare 3 interrupt enable
                CC3IE: u1,
                ///  Capture/Compare 4 interrupt enable
                CC4IE: u1,
                ///  COM interrupt enable
                COMIE: u1,
                ///  Trigger interrupt enable
                TIE: u1,
                ///  Break interrupt enable
                BIE: u1,
                ///  Update DMA request enable
                UDE: u1,
                ///  Capture/Compare 1 DMA request enable
                CC1DE: u1,
                ///  Capture/Compare 2 DMA request enable
                CC2DE: u1,
                ///  Capture/Compare 3 DMA request enable
                CC3DE: u1,
                ///  Capture/Compare 4 DMA request enable
                CC4DE: u1,
                ///  COM DMA request enable
                COMDE: u1,
                ///  Trigger DMA request enable
                TDE: u1,
                padding: u17,
            }),
            ///  status register
            SR: mmio.Mmio(packed struct(u32) {
                ///  Update interrupt flag
                UIF: u1,
                ///  Capture/compare 1 interrupt flag
                CC1IF: u1,
                ///  Capture/Compare 2 interrupt flag
                CC2IF: u1,
                ///  Capture/Compare 3 interrupt flag
                CC3IF: u1,
                ///  Capture/Compare 4 interrupt flag
                CC4IF: u1,
                ///  COM interrupt flag
                COMIF: u1,
                ///  Trigger interrupt flag
                TIF: u1,
                ///  Break interrupt flag
                BIF: u1,
                reserved9: u1,
                ///  Capture/Compare 1 overcapture flag
                CC1OF: u1,
                ///  Capture/compare 2 overcapture flag
                CC2OF: u1,
                ///  Capture/Compare 3 overcapture flag
                CC3OF: u1,
                ///  Capture/Compare 4 overcapture flag
                CC4OF: u1,
                ///  System Break interrupt flag
                SBIF: u1,
                reserved16: u2,
                ///  Compare 5 interrupt flag
                CC5IF: u1,
                ///  Compare 6 interrupt flag
                CC6IF: u1,
                padding: u14,
            }),
            ///  event generation register
            EGR: mmio.Mmio(packed struct(u32) {
                ///  Update generation
                UG: u1,
                ///  Capture/compare 1 generation
                CC1G: u1,
                ///  Capture/compare 2 generation
                CC2G: u1,
                ///  Capture/compare 3 generation
                CC3G: u1,
                ///  Capture/compare 4 generation
                CC4G: u1,
                ///  Capture/Compare control update generation
                COMG: u1,
                ///  Trigger generation
                TG: u1,
                ///  Break generation
                BG: u1,
                ///  Break 2 generation
                B2G: u1,
                padding: u23,
            }),
            ///  capture/compare mode register 1 (output mode)
            CCMR1_Output: mmio.Mmio(packed struct(u32) {
                ///  Capture/Compare 1 selection
                CC1S: u2,
                ///  Output Compare 1 fast enable
                OC1FE: u1,
                ///  Output Compare 1 preload enable
                OC1PE: u1,
                ///  Output Compare 1 mode
                OC1M: u3,
                ///  Output Compare 1 clear enable
                OC1CE: u1,
                ///  Capture/Compare 2 selection
                CC2S: u2,
                ///  Output Compare 2 fast enable
                OC2FE: u1,
                ///  Output Compare 2 preload enable
                OC2PE: u1,
                ///  Output Compare 2 mode
                OC2M: u3,
                ///  Output Compare 2 clear enable
                OC2CE: u1,
                ///  Output Compare 1 mode - bit 3
                OC1M_bit3: u1,
                reserved24: u7,
                ///  Output Compare 2 mode - bit 3
                OC2M_bit3: u1,
                padding: u7,
            }),
            ///  capture/compare mode register 2 (output mode)
            CCMR2_Output: mmio.Mmio(packed struct(u32) {
                ///  Capture/Compare 3 selection
                CC3S: u2,
                ///  Output compare 3 fast enable
                OC3FE: u1,
                ///  Output compare 3 preload enable
                OC3PE: u1,
                ///  Output compare 3 mode
                OC3M: u3,
                ///  Output compare 3 clear enable
                OC3CE: u1,
                ///  Capture/Compare 4 selection
                CC4S: u2,
                ///  Output compare 4 fast enable
                OC4FE: u1,
                ///  Output compare 4 preload enable
                OC4PE: u1,
                ///  Output compare 4 mode
                OC4M: u3,
                ///  Output compare 4 clear enable
                OC4CE: u1,
                ///  Output Compare 3 mode - bit 3
                OC3M_bit3: u1,
                reserved24: u7,
                ///  Output Compare 4 mode - bit 3
                OC4M_bit3: u1,
                padding: u7,
            }),
            ///  capture/compare enable register
            CCER: mmio.Mmio(packed struct(u32) {
                ///  Capture/Compare 1 output enable
                CC1E: u1,
                ///  Capture/Compare 1 output Polarity
                CC1P: u1,
                ///  Capture/Compare 1 complementary output enable
                CC1NE: u1,
                ///  Capture/Compare 1 output Polarity
                CC1NP: u1,
                ///  Capture/Compare 2 output enable
                CC2E: u1,
                ///  Capture/Compare 2 output Polarity
                CC2P: u1,
                ///  Capture/Compare 2 complementary output enable
                CC2NE: u1,
                ///  Capture/Compare 2 output Polarity
                CC2NP: u1,
                ///  Capture/Compare 3 output enable
                CC3E: u1,
                ///  Capture/Compare 3 output Polarity
                CC3P: u1,
                ///  Capture/Compare 3 complementary output enable
                CC3NE: u1,
                ///  Capture/Compare 3 output Polarity
                CC3NP: u1,
                ///  Capture/Compare 4 output enable
                CC4E: u1,
                ///  Capture/Compare 3 output Polarity
                CC4P: u1,
                reserved15: u1,
                ///  Capture/Compare 4 complementary output polarity
                CC4NP: u1,
                ///  Capture/Compare 5 output enable
                CC5E: u1,
                ///  Capture/Compare 5 output polarity
                CC5P: u1,
                reserved20: u2,
                ///  Capture/Compare 6 output enable
                CC6E: u1,
                ///  Capture/Compare 6 output polarity
                CC6P: u1,
                padding: u10,
            }),
            ///  counter
            CNT: mmio.Mmio(packed struct(u32) {
                ///  counter value
                CNT: u16,
                reserved31: u15,
                ///  UIF copy
                UIFCPY: u1,
            }),
            ///  prescaler
            PSC: mmio.Mmio(packed struct(u32) {
                ///  Prescaler value
                PSC: u16,
                padding: u16,
            }),
            ///  auto-reload register
            ARR: mmio.Mmio(packed struct(u32) {
                ///  Auto-reload value
                ARR: u16,
                padding: u16,
            }),
            ///  repetition counter register
            RCR: mmio.Mmio(packed struct(u32) {
                ///  Repetition counter value
                REP: u8,
                padding: u24,
            }),
            ///  capture/compare register 1
            CCR1: mmio.Mmio(packed struct(u32) {
                ///  Capture/Compare 1 value
                CCR1: u16,
                padding: u16,
            }),
            ///  capture/compare register 2
            CCR2: mmio.Mmio(packed struct(u32) {
                ///  Capture/Compare 2 value
                CCR2: u16,
                padding: u16,
            }),
            ///  capture/compare register 3
            CCR3: mmio.Mmio(packed struct(u32) {
                ///  Capture/Compare value
                CCR3: u16,
                padding: u16,
            }),
            ///  capture/compare register 4
            CCR4: mmio.Mmio(packed struct(u32) {
                ///  Capture/Compare value
                CCR4: u16,
                padding: u16,
            }),
            ///  break and dead-time register
            BDTR: mmio.Mmio(packed struct(u32) {
                ///  Dead-time generator setup
                DTG: u8,
                ///  Lock configuration
                LOCK: u2,
                ///  Off-state selection for Idle mode
                OSSI: u1,
                ///  Off-state selection for Run mode
                OSSR: u1,
                ///  Break enable
                BKE: u1,
                ///  Break polarity
                BKP: u1,
                ///  Automatic output enable
                AOE: u1,
                ///  Main output enable
                MOE: u1,
                ///  Break filter
                BKF: u4,
                ///  Break 2 filter
                BK2F: u4,
                ///  Break 2 enable
                BK2E: u1,
                ///  Break 2 polarity
                BK2P: u1,
                ///  Break Disarm
                BKDSRM: u1,
                ///  Break2 Disarm
                BK2DSRM: u1,
                ///  Break Bidirectional
                BKBID: u1,
                ///  Break2 bidirectional
                BK2BID: u1,
                padding: u2,
            }),
            ///  DMA control register
            DCR: mmio.Mmio(packed struct(u32) {
                ///  DMA base address
                DBA: u5,
                reserved8: u3,
                ///  DMA burst length
                DBL: u5,
                padding: u19,
            }),
            ///  DMA address for full transfer
            DMAR: mmio.Mmio(packed struct(u32) {
                ///  DMA register for burst accesses
                DMAB: u32,
            }),
            ///  DMA address for full transfer
            OR1: mmio.Mmio(packed struct(u32) {
                ///  External trigger remap on ADC1 analog watchdog
                ETR_ADC1_RMP: u2,
                reserved4: u2,
                ///  Input Capture 1 remap
                TI1_RMP: u1,
                padding: u27,
            }),
            ///  capture/compare mode register 2 (output mode)
            CCMR3_Output: mmio.Mmio(packed struct(u32) {
                reserved2: u2,
                ///  Output compare 5 fast enable
                OC5FE: u1,
                ///  Output compare 5 preload enable
                OC5PE: u1,
                ///  Output compare 5 mode
                OC5M: u3,
                ///  Output compare 5 clear enable
                OC5CE: u1,
                reserved10: u2,
                ///  Output compare 6 fast enable
                OC6FE: u1,
                ///  Output compare 6 preload enable
                OC6PE: u1,
                ///  Output compare 6 mode
                OC6M: u3,
                ///  Output compare 6 clear enable
                OC6CE: u1,
                ///  Output Compare 5 mode bit 3
                OC5M_bit3: u3,
                reserved24: u5,
                ///  Output Compare 6 mode bit 3
                OC6M_bit3: u1,
                padding: u7,
            }),
            ///  capture/compare register 4
            CCR5: mmio.Mmio(packed struct(u32) {
                ///  Capture/Compare value
                CCR5: u16,
                reserved29: u13,
                ///  Group Channel 5 and Channel 1
                GC5C1: u1,
                ///  Group Channel 5 and Channel 2
                GC5C2: u1,
                ///  Group Channel 5 and Channel 3
                GC5C3: u1,
            }),
            ///  capture/compare register 4
            CCR6: mmio.Mmio(packed struct(u32) {
                ///  Capture/Compare value
                CCR6: u16,
                padding: u16,
            }),
            ///  DMA address for full transfer
            OR2: mmio.Mmio(packed struct(u32) {
                ///  BRK BKIN input enable
                BKINE: u1,
                ///  BRK COMP1 enable
                BKCMP1E: u1,
                ///  BRK COMP2 enable
                BKCMP2E: u1,
                reserved8: u5,
                ///  BRK DFSDM_BREAK0 enable
                BKDFBK0E: u1,
                ///  BRK BKIN input polarity
                BKINP: u1,
                ///  BRK COMP1 input polarity
                BKCMP1P: u1,
                ///  BRK COMP2 input polarity
                BKCMP2P: u1,
                reserved14: u2,
                ///  ETR source selection
                ETRSEL: u3,
                padding: u15,
            }),
            ///  DMA address for full transfer
            OR3: mmio.Mmio(packed struct(u32) {
                ///  BRK2 BKIN input enable
                BK2INE: u1,
                ///  BRK2 COMP1 enable
                BK2CMP1E: u1,
                ///  BRK2 COMP2 enable
                BK2CMP2E: u1,
                reserved8: u5,
                ///  BRK2 DFSDM_BREAK0 enable
                BK2DFBK0E: u1,
                ///  BRK2 BKIN input polarity
                BK2INP: u1,
                ///  BRK2 COMP1 input polarity
                BK2CMP1P: u1,
                ///  BRK2 COMP2 input polarity
                BK2CMP2P: u1,
                padding: u20,
            }),
        };

        ///  Analog-to-Digital Converter
        pub const ADC2 = extern struct {
            ///  interrupt and status register
            ISR: mmio.Mmio(packed struct(u32) {
                ///  ADRDY
                ADRDY: u1,
                ///  EOSMP
                EOSMP: u1,
                ///  EOC
                EOC: u1,
                ///  EOS
                EOS: u1,
                ///  OVR
                OVR: u1,
                ///  JEOC
                JEOC: u1,
                ///  JEOS
                JEOS: u1,
                ///  AWD1
                AWD1: u1,
                ///  AWD2
                AWD2: u1,
                ///  AWD3
                AWD3: u1,
                ///  JQOVF
                JQOVF: u1,
                padding: u21,
            }),
            ///  interrupt enable register
            IER: mmio.Mmio(packed struct(u32) {
                ///  ADRDYIE
                ADRDYIE: u1,
                ///  EOSMPIE
                EOSMPIE: u1,
                ///  EOCIE
                EOCIE: u1,
                ///  EOSIE
                EOSIE: u1,
                ///  OVRIE
                OVRIE: u1,
                ///  JEOCIE
                JEOCIE: u1,
                ///  JEOSIE
                JEOSIE: u1,
                ///  AWD1IE
                AWD1IE: u1,
                ///  AWD2IE
                AWD2IE: u1,
                ///  AWD3IE
                AWD3IE: u1,
                ///  JQOVFIE
                JQOVFIE: u1,
                padding: u21,
            }),
            ///  control register
            CR: mmio.Mmio(packed struct(u32) {
                ///  ADEN
                ADEN: u1,
                ///  ADDIS
                ADDIS: u1,
                ///  ADSTART
                ADSTART: u1,
                ///  JADSTART
                JADSTART: u1,
                ///  ADSTP
                ADSTP: u1,
                ///  JADSTP
                JADSTP: u1,
                reserved28: u22,
                ///  ADVREGEN
                ADVREGEN: u1,
                ///  DEEPPWD
                DEEPPWD: u1,
                ///  ADCALDIF
                ADCALDIF: u1,
                ///  ADCAL
                ADCAL: u1,
            }),
            ///  configuration register
            CFGR: mmio.Mmio(packed struct(u32) {
                ///  DMAEN
                DMAEN: u1,
                ///  DMACFG
                DMACFG: u1,
                reserved3: u1,
                ///  RES
                RES: u2,
                ///  ALIGN
                ALIGN: u1,
                ///  EXTSEL
                EXTSEL: u4,
                ///  EXTEN
                EXTEN: u2,
                ///  OVRMOD
                OVRMOD: u1,
                ///  CONT
                CONT: u1,
                ///  AUTDLY
                AUTDLY: u1,
                reserved16: u1,
                ///  DISCEN
                DISCEN: u1,
                ///  DISCNUM
                DISCNUM: u3,
                ///  JDISCEN
                JDISCEN: u1,
                ///  JQM
                JQM: u1,
                ///  AWD1SGL
                AWD1SGL: u1,
                ///  AWD1EN
                AWD1EN: u1,
                ///  JAWD1EN
                JAWD1EN: u1,
                ///  JAUTO
                JAUTO: u1,
                ///  AWDCH1CH
                AWDCH1CH: u5,
                ///  JQDIS
                JQDIS: u1,
            }),
            ///  configuration register
            CFGR2: mmio.Mmio(packed struct(u32) {
                ///  DMAEN
                ROVSE: u1,
                ///  DMACFG
                JOVSE: u1,
                ///  RES
                OVSR: u3,
                ///  ALIGN
                OVSS: u4,
                ///  EXTSEL
                TOVS: u1,
                ///  EXTEN
                ROVSM: u1,
                padding: u21,
            }),
            ///  sample time register 1
            SMPR1: mmio.Mmio(packed struct(u32) {
                ///  SMP0
                SMP0: u3,
                ///  SMP1
                SMP1: u3,
                ///  SMP2
                SMP2: u3,
                ///  SMP3
                SMP3: u3,
                ///  SMP4
                SMP4: u3,
                ///  SMP5
                SMP5: u3,
                ///  SMP6
                SMP6: u3,
                ///  SMP7
                SMP7: u3,
                ///  SMP8
                SMP8: u3,
                ///  SMP9
                SMP9: u3,
                padding: u2,
            }),
            ///  sample time register 2
            SMPR2: mmio.Mmio(packed struct(u32) {
                ///  SMP10
                SMP10: u3,
                ///  SMP11
                SMP11: u3,
                ///  SMP12
                SMP12: u3,
                ///  SMP13
                SMP13: u3,
                ///  SMP14
                SMP14: u3,
                ///  SMP15
                SMP15: u3,
                ///  SMP16
                SMP16: u3,
                ///  SMP17
                SMP17: u3,
                ///  SMP18
                SMP18: u3,
                padding: u5,
            }),
            reserved32: [4]u8,
            ///  watchdog threshold register 1
            TR1: mmio.Mmio(packed struct(u32) {
                ///  LT1
                LT1: u12,
                reserved16: u4,
                ///  HT1
                HT1: u12,
                padding: u4,
            }),
            ///  watchdog threshold register
            TR2: mmio.Mmio(packed struct(u32) {
                ///  LT2
                LT2: u8,
                reserved16: u8,
                ///  HT2
                HT2: u8,
                padding: u8,
            }),
            ///  watchdog threshold register 3
            TR3: mmio.Mmio(packed struct(u32) {
                ///  LT3
                LT3: u8,
                reserved16: u8,
                ///  HT3
                HT3: u8,
                padding: u8,
            }),
            reserved48: [4]u8,
            ///  regular sequence register 1
            SQR1: mmio.Mmio(packed struct(u32) {
                ///  L
                L: u4,
                reserved6: u2,
                ///  SQ1
                SQ1: u5,
                reserved12: u1,
                ///  SQ2
                SQ2: u5,
                reserved18: u1,
                ///  SQ3
                SQ3: u5,
                reserved24: u1,
                ///  SQ4
                SQ4: u5,
                padding: u3,
            }),
            ///  regular sequence register 2
            SQR2: mmio.Mmio(packed struct(u32) {
                ///  SQ5
                SQ5: u5,
                reserved6: u1,
                ///  SQ6
                SQ6: u5,
                reserved12: u1,
                ///  SQ7
                SQ7: u5,
                reserved18: u1,
                ///  SQ8
                SQ8: u5,
                reserved24: u1,
                ///  SQ9
                SQ9: u5,
                padding: u3,
            }),
            ///  regular sequence register 3
            SQR3: mmio.Mmio(packed struct(u32) {
                ///  SQ10
                SQ10: u5,
                reserved6: u1,
                ///  SQ11
                SQ11: u5,
                reserved12: u1,
                ///  SQ12
                SQ12: u5,
                reserved18: u1,
                ///  SQ13
                SQ13: u5,
                reserved24: u1,
                ///  SQ14
                SQ14: u5,
                padding: u3,
            }),
            ///  regular sequence register 4
            SQR4: mmio.Mmio(packed struct(u32) {
                ///  SQ15
                SQ15: u5,
                reserved6: u1,
                ///  SQ16
                SQ16: u5,
                padding: u21,
            }),
            ///  regular Data Register
            DR: mmio.Mmio(packed struct(u32) {
                ///  regularDATA
                RDATA: u16,
                padding: u16,
            }),
            reserved76: [8]u8,
            ///  injected sequence register
            JSQR: mmio.Mmio(packed struct(u32) {
                ///  JL
                JL: u2,
                ///  JEXTSEL
                JEXTSEL: u4,
                ///  JEXTEN
                JEXTEN: u2,
                ///  JSQ1
                JSQ1: u5,
                reserved14: u1,
                ///  JSQ2
                JSQ2: u5,
                reserved20: u1,
                ///  JSQ3
                JSQ3: u5,
                reserved26: u1,
                ///  JSQ4
                JSQ4: u5,
                padding: u1,
            }),
            reserved96: [16]u8,
            ///  offset register 1
            OFR1: mmio.Mmio(packed struct(u32) {
                ///  OFFSET1
                OFFSET1: u12,
                reserved26: u14,
                ///  OFFSET1_CH
                OFFSET1_CH: u5,
                ///  OFFSET1_EN
                OFFSET1_EN: u1,
            }),
            ///  offset register 2
            OFR2: mmio.Mmio(packed struct(u32) {
                ///  OFFSET2
                OFFSET2: u12,
                reserved26: u14,
                ///  OFFSET2_CH
                OFFSET2_CH: u5,
                ///  OFFSET2_EN
                OFFSET2_EN: u1,
            }),
            ///  offset register 3
            OFR3: mmio.Mmio(packed struct(u32) {
                ///  OFFSET3
                OFFSET3: u12,
                reserved26: u14,
                ///  OFFSET3_CH
                OFFSET3_CH: u5,
                ///  OFFSET3_EN
                OFFSET3_EN: u1,
            }),
            ///  offset register 4
            OFR4: mmio.Mmio(packed struct(u32) {
                ///  OFFSET4
                OFFSET4: u12,
                reserved26: u14,
                ///  OFFSET4_CH
                OFFSET4_CH: u5,
                ///  OFFSET4_EN
                OFFSET4_EN: u1,
            }),
            reserved128: [16]u8,
            ///  injected data register 1
            JDR1: mmio.Mmio(packed struct(u32) {
                ///  JDATA1
                JDATA: u16,
                padding: u16,
            }),
            ///  injected data register 2
            JDR2: mmio.Mmio(packed struct(u32) {
                ///  JDATA2
                JDATA: u16,
                padding: u16,
            }),
            ///  injected data register 3
            JDR3: mmio.Mmio(packed struct(u32) {
                ///  JDATA3
                JDATA: u16,
                padding: u16,
            }),
            ///  injected data register 4
            JDR4: mmio.Mmio(packed struct(u32) {
                ///  JDATA4
                JDATA: u16,
                padding: u16,
            }),
            reserved160: [16]u8,
            ///  Analog Watchdog 2 Configuration Register
            AWD2CR: mmio.Mmio(packed struct(u32) {
                ///  AWD2CH
                AWD2CH: u19,
                padding: u13,
            }),
            ///  Analog Watchdog 3 Configuration Register
            AWD3CR: mmio.Mmio(packed struct(u32) {
                ///  AWD3CH
                AWD3CH: u19,
                padding: u13,
            }),
            reserved176: [8]u8,
            ///  Differential Mode Selection Register 2
            DIFSEL: mmio.Mmio(packed struct(u32) {
                ///  Differential mode for channel 0
                DIFSEL_0: u1,
                ///  Differential mode for channels 15 to 1
                DIFSEL_1_15: u15,
                ///  Differential mode for channels 18 to 16
                DIFSEL_16_18: u3,
                padding: u13,
            }),
            ///  Calibration Factors
            CALFACT: mmio.Mmio(packed struct(u32) {
                ///  CALFACT_S
                CALFACT_S: u7,
                reserved16: u9,
                ///  CALFACT_D
                CALFACT_D: u7,
                padding: u9,
            }),
        };

        ///  PKA
        pub const PKA = extern struct {
            ///  PKA control register
            PKA_CR: mmio.Mmio(packed struct(u32) {
                ///  PKA Enable
                EN: u1,
                ///  Start the operation
                START: u1,
                reserved8: u6,
                ///  PKA operation code
                MODE: u6,
                reserved17: u3,
                ///  End of operation interrupt enable
                PROCENDIE: u1,
                reserved19: u1,
                ///  RAM error interrupt enable
                RAMERRIE: u1,
                ///  Address error interrupt enable
                ADDRERRIE: u1,
                padding: u11,
            }),
            ///  PKA status register
            PKA_SR: mmio.Mmio(packed struct(u32) {
                reserved16: u16,
                ///  PKA operation in progress
                BUSY: u1,
                ///  PKA end of operation flag
                PROCENDF: u1,
                reserved19: u1,
                ///  PKA ram error flag
                RAMERRF: u1,
                ///  address er flag
                ADDRERRF: u1,
                padding: u11,
            }),
            ///  PKA clear flag register
            PKA_CLRFR: mmio.Mmio(packed struct(u32) {
                reserved17: u17,
                ///  clear PKA end of operation flag
                PROCENDFC: u1,
                reserved19: u1,
                ///  CLEAR PKA RAM ERROR FLAG
                RAMERRFC: u1,
                ///  clear address error flag
                ADDRERRFC: u1,
                padding: u11,
            }),
        };

        ///  Analog-to-Digital Converter
        pub const ADC1 = extern struct {
            ///  interrupt and status register
            ISR: mmio.Mmio(packed struct(u32) {
                ///  ADRDY
                ADRDY: u1,
                ///  EOSMP
                EOSMP: u1,
                ///  EOC
                EOC: u1,
                ///  EOS
                EOS: u1,
                ///  OVR
                OVR: u1,
                ///  JEOC
                JEOC: u1,
                ///  JEOS
                JEOS: u1,
                ///  AWD1
                AWD1: u1,
                ///  AWD2
                AWD2: u1,
                ///  AWD3
                AWD3: u1,
                ///  JQOVF
                JQOVF: u1,
                padding: u21,
            }),
            ///  interrupt enable register
            IER: mmio.Mmio(packed struct(u32) {
                ///  ADRDYIE
                ADRDYIE: u1,
                ///  EOSMPIE
                EOSMPIE: u1,
                ///  EOCIE
                EOCIE: u1,
                ///  EOSIE
                EOSIE: u1,
                ///  OVRIE
                OVRIE: u1,
                ///  JEOCIE
                JEOCIE: u1,
                ///  JEOSIE
                JEOSIE: u1,
                ///  AWD1IE
                AWD1IE: u1,
                ///  AWD2IE
                AWD2IE: u1,
                ///  AWD3IE
                AWD3IE: u1,
                ///  JQOVFIE
                JQOVFIE: u1,
                padding: u21,
            }),
            ///  control register
            CR: mmio.Mmio(packed struct(u32) {
                ///  ADEN
                ADEN: u1,
                ///  ADDIS
                ADDIS: u1,
                ///  ADSTART
                ADSTART: u1,
                ///  JADSTART
                JADSTART: u1,
                ///  ADSTP
                ADSTP: u1,
                ///  JADSTP
                JADSTP: u1,
                reserved28: u22,
                ///  ADVREGEN
                ADVREGEN: u1,
                ///  DEEPPWD
                DEEPPWD: u1,
                ///  ADCALDIF
                ADCALDIF: u1,
                ///  ADCAL
                ADCAL: u1,
            }),
            ///  configuration register
            CFGR: mmio.Mmio(packed struct(u32) {
                ///  DMAEN
                DMAEN: u1,
                ///  DMACFG
                DMACFG: u1,
                reserved3: u1,
                ///  RES
                RES: u2,
                ///  ALIGN
                ALIGN: u1,
                ///  EXTSEL
                EXTSEL: u4,
                ///  EXTEN
                EXTEN: u2,
                ///  OVRMOD
                OVRMOD: u1,
                ///  CONT
                CONT: u1,
                ///  AUTDLY
                AUTDLY: u1,
                reserved16: u1,
                ///  DISCEN
                DISCEN: u1,
                ///  DISCNUM
                DISCNUM: u3,
                ///  JDISCEN
                JDISCEN: u1,
                ///  JQM
                JQM: u1,
                ///  AWD1SGL
                AWD1SGL: u1,
                ///  AWD1EN
                AWD1EN: u1,
                ///  JAWD1EN
                JAWD1EN: u1,
                ///  JAUTO
                JAUTO: u1,
                ///  AWDCH1CH
                AWDCH1CH: u5,
                ///  JQDIS
                JQDIS: u1,
            }),
            ///  configuration register
            CFGR2: mmio.Mmio(packed struct(u32) {
                ///  DMAEN
                ROVSE: u1,
                ///  DMACFG
                JOVSE: u1,
                ///  RES
                OVSR: u3,
                ///  ALIGN
                OVSS: u4,
                ///  EXTSEL
                TOVS: u1,
                ///  EXTEN
                ROVSM: u1,
                padding: u21,
            }),
            ///  sample time register 1
            SMPR1: mmio.Mmio(packed struct(u32) {
                ///  SMP0
                SMP0: u3,
                ///  SMP1
                SMP1: u3,
                ///  SMP2
                SMP2: u3,
                ///  SMP3
                SMP3: u3,
                ///  SMP4
                SMP4: u3,
                ///  SMP5
                SMP5: u3,
                ///  SMP6
                SMP6: u3,
                ///  SMP7
                SMP7: u3,
                ///  SMP8
                SMP8: u3,
                ///  SMP9
                SMP9: u3,
                padding: u2,
            }),
            ///  sample time register 2
            SMPR2: mmio.Mmio(packed struct(u32) {
                ///  SMP10
                SMP10: u3,
                ///  SMP11
                SMP11: u3,
                ///  SMP12
                SMP12: u3,
                ///  SMP13
                SMP13: u3,
                ///  SMP14
                SMP14: u3,
                ///  SMP15
                SMP15: u3,
                ///  SMP16
                SMP16: u3,
                ///  SMP17
                SMP17: u3,
                ///  SMP18
                SMP18: u3,
                padding: u5,
            }),
            reserved32: [4]u8,
            ///  watchdog threshold register 1
            TR1: mmio.Mmio(packed struct(u32) {
                ///  LT1
                LT1: u12,
                reserved16: u4,
                ///  HT1
                HT1: u12,
                padding: u4,
            }),
            ///  watchdog threshold register
            TR2: mmio.Mmio(packed struct(u32) {
                ///  LT2
                LT2: u8,
                reserved16: u8,
                ///  HT2
                HT2: u8,
                padding: u8,
            }),
            ///  watchdog threshold register 3
            TR3: mmio.Mmio(packed struct(u32) {
                ///  LT3
                LT3: u8,
                reserved16: u8,
                ///  HT3
                HT3: u8,
                padding: u8,
            }),
            reserved48: [4]u8,
            ///  regular sequence register 1
            SQR1: mmio.Mmio(packed struct(u32) {
                ///  L
                L: u4,
                reserved6: u2,
                ///  SQ1
                SQ1: u5,
                reserved12: u1,
                ///  SQ2
                SQ2: u5,
                reserved18: u1,
                ///  SQ3
                SQ3: u5,
                reserved24: u1,
                ///  SQ4
                SQ4: u5,
                padding: u3,
            }),
            ///  regular sequence register 2
            SQR2: mmio.Mmio(packed struct(u32) {
                ///  SQ5
                SQ5: u5,
                reserved6: u1,
                ///  SQ6
                SQ6: u5,
                reserved12: u1,
                ///  SQ7
                SQ7: u5,
                reserved18: u1,
                ///  SQ8
                SQ8: u5,
                reserved24: u1,
                ///  SQ9
                SQ9: u5,
                padding: u3,
            }),
            ///  regular sequence register 3
            SQR3: mmio.Mmio(packed struct(u32) {
                ///  SQ10
                SQ10: u5,
                reserved6: u1,
                ///  SQ11
                SQ11: u5,
                reserved12: u1,
                ///  SQ12
                SQ12: u5,
                reserved18: u1,
                ///  SQ13
                SQ13: u5,
                reserved24: u1,
                ///  SQ14
                SQ14: u5,
                padding: u3,
            }),
            ///  regular sequence register 4
            SQR4: mmio.Mmio(packed struct(u32) {
                ///  SQ15
                SQ15: u5,
                reserved6: u1,
                ///  SQ16
                SQ16: u5,
                padding: u21,
            }),
            ///  regular Data Register
            DR: mmio.Mmio(packed struct(u32) {
                ///  regularDATA
                RDATA: u16,
                padding: u16,
            }),
            reserved76: [8]u8,
            ///  injected sequence register
            JSQR: mmio.Mmio(packed struct(u32) {
                ///  JL
                JL: u2,
                ///  JEXTSEL
                JEXTSEL: u4,
                ///  JEXTEN
                JEXTEN: u2,
                ///  JSQ1
                JSQ1: u5,
                reserved14: u1,
                ///  JSQ2
                JSQ2: u5,
                reserved20: u1,
                ///  JSQ3
                JSQ3: u5,
                reserved26: u1,
                ///  JSQ4
                JSQ4: u5,
                padding: u1,
            }),
            reserved96: [16]u8,
            ///  offset register 1
            OFR1: mmio.Mmio(packed struct(u32) {
                ///  OFFSET1
                OFFSET1: u12,
                reserved26: u14,
                ///  OFFSET1_CH
                OFFSET1_CH: u5,
                ///  OFFSET1_EN
                OFFSET1_EN: u1,
            }),
            ///  offset register 2
            OFR2: mmio.Mmio(packed struct(u32) {
                ///  OFFSET2
                OFFSET2: u12,
                reserved26: u14,
                ///  OFFSET2_CH
                OFFSET2_CH: u5,
                ///  OFFSET2_EN
                OFFSET2_EN: u1,
            }),
            ///  offset register 3
            OFR3: mmio.Mmio(packed struct(u32) {
                ///  OFFSET3
                OFFSET3: u12,
                reserved26: u14,
                ///  OFFSET3_CH
                OFFSET3_CH: u5,
                ///  OFFSET3_EN
                OFFSET3_EN: u1,
            }),
            ///  offset register 4
            OFR4: mmio.Mmio(packed struct(u32) {
                ///  OFFSET4
                OFFSET4: u12,
                reserved26: u14,
                ///  OFFSET4_CH
                OFFSET4_CH: u5,
                ///  OFFSET4_EN
                OFFSET4_EN: u1,
            }),
            reserved128: [16]u8,
            ///  injected data register 1
            JDR1: mmio.Mmio(packed struct(u32) {
                ///  JDATA1
                JDATA: u16,
                padding: u16,
            }),
            ///  injected data register 2
            JDR2: mmio.Mmio(packed struct(u32) {
                ///  JDATA2
                JDATA: u16,
                padding: u16,
            }),
            ///  injected data register 3
            JDR3: mmio.Mmio(packed struct(u32) {
                ///  JDATA3
                JDATA: u16,
                padding: u16,
            }),
            ///  injected data register 4
            JDR4: mmio.Mmio(packed struct(u32) {
                ///  JDATA4
                JDATA: u16,
                padding: u16,
            }),
            reserved160: [16]u8,
            ///  Analog Watchdog 2 Configuration Register
            AWD2CR: mmio.Mmio(packed struct(u32) {
                ///  AWD2CH
                AWD2CH: u19,
                padding: u13,
            }),
            ///  Analog Watchdog 3 Configuration Register
            AWD3CR: mmio.Mmio(packed struct(u32) {
                ///  AWD3CH
                AWD3CH: u19,
                padding: u13,
            }),
            reserved176: [8]u8,
            ///  Differential Mode Selection Register 2
            DIFSEL: mmio.Mmio(packed struct(u32) {
                ///  Differential mode for channel 0
                DIFSEL_0: u1,
                ///  Differential mode for channels 15 to 1
                DIFSEL_1_15: u15,
                ///  Differential mode for channels 18 to 16
                DIFSEL_16_18: u3,
                padding: u13,
            }),
            ///  Calibration Factors
            CALFACT: mmio.Mmio(packed struct(u32) {
                ///  CALFACT_S
                CALFACT_S: u7,
                reserved16: u9,
                ///  CALFACT_D
                CALFACT_D: u7,
                padding: u9,
            }),
        };

        ///  General-purpose I/Os
        pub const GPIOH = extern struct {
            ///  GPIO port mode register
            MODER: mmio.Mmio(packed struct(u32) {
                ///  Port x configuration bits (y = 0..15)
                MODER0: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER1: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER2: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER3: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER4: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER5: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER6: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER7: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER8: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER9: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER10: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER11: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER12: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER13: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER14: u2,
                ///  Port x configuration bits (y = 0..15)
                MODER15: u2,
            }),
            ///  GPIO port output type register
            OTYPER: mmio.Mmio(packed struct(u32) {
                ///  Port x configuration bits (y = 0..15)
                OT0: u1,
                ///  Port x configuration bits (y = 0..15)
                OT1: u1,
                ///  Port x configuration bits (y = 0..15)
                OT2: u1,
                ///  Port x configuration bits (y = 0..15)
                OT3: u1,
                ///  Port x configuration bits (y = 0..15)
                OT4: u1,
                ///  Port x configuration bits (y = 0..15)
                OT5: u1,
                ///  Port x configuration bits (y = 0..15)
                OT6: u1,
                ///  Port x configuration bits (y = 0..15)
                OT7: u1,
                ///  Port x configuration bits (y = 0..15)
                OT8: u1,
                ///  Port x configuration bits (y = 0..15)
                OT9: u1,
                ///  Port x configuration bits (y = 0..15)
                OT10: u1,
                ///  Port x configuration bits (y = 0..15)
                OT11: u1,
                ///  Port x configuration bits (y = 0..15)
                OT12: u1,
                ///  Port x configuration bits (y = 0..15)
                OT13: u1,
                ///  Port x configuration bits (y = 0..15)
                OT14: u1,
                ///  Port x configuration bits (y = 0..15)
                OT15: u1,
                padding: u16,
            }),
            ///  GPIO port output speed register
            OSPEEDR: mmio.Mmio(packed struct(u32) {
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR0: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR1: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR2: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR3: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR4: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR5: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR6: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR7: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR8: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR9: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR10: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR11: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR12: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR13: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR14: u2,
                ///  Port x configuration bits (y = 0..15)
                OSPEEDR15: u2,
            }),
            ///  GPIO port pull-up/pull-down register
            PUPDR: mmio.Mmio(packed struct(u32) {
                ///  Port x configuration bits (y = 0..15)
                PUPDR0: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR1: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR2: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR3: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR4: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR5: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR6: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR7: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR8: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR9: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR10: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR11: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR12: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR13: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR14: u2,
                ///  Port x configuration bits (y = 0..15)
                PUPDR15: u2,
            }),
            ///  GPIO port input data register
            IDR: mmio.Mmio(packed struct(u32) {
                ///  Port input data (y = 0..15)
                IDR0: u1,
                ///  Port input data (y = 0..15)
                IDR1: u1,
                ///  Port input data (y = 0..15)
                IDR2: u1,
                ///  Port input data (y = 0..15)
                IDR3: u1,
                ///  Port input data (y = 0..15)
                IDR4: u1,
                ///  Port input data (y = 0..15)
                IDR5: u1,
                ///  Port input data (y = 0..15)
                IDR6: u1,
                ///  Port input data (y = 0..15)
                IDR7: u1,
                ///  Port input data (y = 0..15)
                IDR8: u1,
                ///  Port input data (y = 0..15)
                IDR9: u1,
                ///  Port input data (y = 0..15)
                IDR10: u1,
                ///  Port input data (y = 0..15)
                IDR11: u1,
                ///  Port input data (y = 0..15)
                IDR12: u1,
                ///  Port input data (y = 0..15)
                IDR13: u1,
                ///  Port input data (y = 0..15)
                IDR14: u1,
                ///  Port input data (y = 0..15)
                IDR15: u1,
                padding: u16,
            }),
            ///  GPIO port output data register
            ODR: mmio.Mmio(packed struct(u32) {
                ///  Port output data (y = 0..15)
                ODR0: u1,
                ///  Port output data (y = 0..15)
                ODR1: u1,
                ///  Port output data (y = 0..15)
                ODR2: u1,
                ///  Port output data (y = 0..15)
                ODR3: u1,
                ///  Port output data (y = 0..15)
                ODR4: u1,
                ///  Port output data (y = 0..15)
                ODR5: u1,
                ///  Port output data (y = 0..15)
                ODR6: u1,
                ///  Port output data (y = 0..15)
                ODR7: u1,
                ///  Port output data (y = 0..15)
                ODR8: u1,
                ///  Port output data (y = 0..15)
                ODR9: u1,
                ///  Port output data (y = 0..15)
                ODR10: u1,
                ///  Port output data (y = 0..15)
                ODR11: u1,
                ///  Port output data (y = 0..15)
                ODR12: u1,
                ///  Port output data (y = 0..15)
                ODR13: u1,
                ///  Port output data (y = 0..15)
                ODR14: u1,
                ///  Port output data (y = 0..15)
                ODR15: u1,
                padding: u16,
            }),
            ///  GPIO port bit set/reset register
            BSRR: mmio.Mmio(packed struct(u32) {
                ///  Port x set bit y (y= 0..15)
                BS0: u1,
                ///  Port x set bit y (y= 0..15)
                BS1: u1,
                ///  Port x set bit y (y= 0..15)
                BS2: u1,
                ///  Port x set bit y (y= 0..15)
                BS3: u1,
                ///  Port x set bit y (y= 0..15)
                BS4: u1,
                ///  Port x set bit y (y= 0..15)
                BS5: u1,
                ///  Port x set bit y (y= 0..15)
                BS6: u1,
                ///  Port x set bit y (y= 0..15)
                BS7: u1,
                ///  Port x set bit y (y= 0..15)
                BS8: u1,
                ///  Port x set bit y (y= 0..15)
                BS9: u1,
                ///  Port x set bit y (y= 0..15)
                BS10: u1,
                ///  Port x set bit y (y= 0..15)
                BS11: u1,
                ///  Port x set bit y (y= 0..15)
                BS12: u1,
                ///  Port x set bit y (y= 0..15)
                BS13: u1,
                ///  Port x set bit y (y= 0..15)
                BS14: u1,
                ///  Port x set bit y (y= 0..15)
                BS15: u1,
                ///  Port x set bit y (y= 0..15)
                BR0: u1,
                ///  Port x reset bit y (y = 0..15)
                BR1: u1,
                ///  Port x reset bit y (y = 0..15)
                BR2: u1,
                ///  Port x reset bit y (y = 0..15)
                BR3: u1,
                ///  Port x reset bit y (y = 0..15)
                BR4: u1,
                ///  Port x reset bit y (y = 0..15)
                BR5: u1,
                ///  Port x reset bit y (y = 0..15)
                BR6: u1,
                ///  Port x reset bit y (y = 0..15)
                BR7: u1,
                ///  Port x reset bit y (y = 0..15)
                BR8: u1,
                ///  Port x reset bit y (y = 0..15)
                BR9: u1,
                ///  Port x reset bit y (y = 0..15)
                BR10: u1,
                ///  Port x reset bit y (y = 0..15)
                BR11: u1,
                ///  Port x reset bit y (y = 0..15)
                BR12: u1,
                ///  Port x reset bit y (y = 0..15)
                BR13: u1,
                ///  Port x reset bit y (y = 0..15)
                BR14: u1,
                ///  Port x reset bit y (y = 0..15)
                BR15: u1,
            }),
            ///  GPIO port configuration lock register
            LCKR: mmio.Mmio(packed struct(u32) {
                ///  Port x lock bit y (y= 0..15)
                LCK0: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK1: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK2: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK3: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK4: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK5: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK6: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK7: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK8: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK9: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK10: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK11: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK12: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK13: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK14: u1,
                ///  Port x lock bit y (y= 0..15)
                LCK15: u1,
                ///  Port x lock bit y (y= 0..15)
                LCKK: u1,
                padding: u15,
            }),
            ///  GPIO alternate function low register
            AFRL: mmio.Mmio(packed struct(u32) {
                ///  Alternate function selection for port x bit y (y = 0..7)
                AFSEL0: u4,
                ///  Alternate function selection for port x bit y (y = 0..7)
                AFSEL1: u4,
                ///  Alternate function selection for port x bit y (y = 0..7)
                AFSEL2: u4,
                ///  Alternate function selection for port x bit y (y = 0..7)
                AFSEL3: u4,
                ///  Alternate function selection for port x bit y (y = 0..7)
                AFSEL4: u4,
                ///  Alternate function selection for port x bit y (y = 0..7)
                AFSEL5: u4,
                ///  Alternate function selection for port x bit y (y = 0..7)
                AFSEL6: u4,
                ///  Alternate function selection for port x bit y (y = 0..7)
                AFSEL7: u4,
            }),
            ///  GPIO alternate function high register
            AFRH: mmio.Mmio(packed struct(u32) {
                ///  Alternate function selection for port x bit y (y = 8..15)
                AFSEL8: u4,
                ///  Alternate function selection for port x bit y (y = 8..15)
                AFSEL9: u4,
                ///  Alternate function selection for port x bit y (y = 8..15)
                AFSEL10: u4,
                ///  Alternate function selection for port x bit y (y = 8..15)
                AFSEL11: u4,
                ///  Alternate function selection for port x bit y (y = 8..15)
                AFSEL12: u4,
                ///  Alternate function selection for port x bit y (y = 8..15)
                AFSEL13: u4,
                ///  Alternate function selection for port x bit y (y = 8..15)
                AFSEL14: u4,
                ///  Alternate function selection for port x bit y (y = 8..15)
                AFSEL15: u4,
            }),
            ///  GPIO port bit reset register
            BRR: mmio.Mmio(packed struct(u32) {
                ///  Port x reset IO pin y
                BR0: u1,
                ///  Port x reset IO pin y
                BR1: u1,
                ///  Port x reset IO pin y
                BR2: u1,
                ///  Port x reset IO pin y
                BR3: u1,
                ///  Port x reset IO pin y
                BR4: u1,
                ///  Port x reset IO pin y
                BR5: u1,
                ///  Port x reset IO pin y
                BR6: u1,
                ///  Port x reset IO pin y
                BR7: u1,
                ///  Port x reset IO pin y
                BR8: u1,
                ///  Port x reset IO pin y
                BR9: u1,
                ///  Port x reset IO pin y
                BR10: u1,
                ///  Port x reset IO pin y
                BR11: u1,
                ///  Port x reset IO pin y
                BR12: u1,
                ///  Port x reset IO pin y
                BR13: u1,
                ///  Port x reset IO pin y
                BR14: u1,
                ///  Port x reset IO pin y
                BR15: u1,
                padding: u16,
            }),
            reserved48: [4]u8,
            ///  GPIO secure configuration register
            SECCFGR: mmio.Mmio(packed struct(u32) {
                ///  I/O pin of Port x secure bit enable
                SEC0: u1,
                ///  I/O pin of Port x secure bit enable
                SEC1: u1,
                ///  I/O pin of Port x secure bit enable
                SEC2: u1,
                ///  I/O pin of Port x secure bit enable
                SEC3: u1,
                ///  I/O pin of Port x secure bit enable
                SEC4: u1,
                ///  I/O pin of Port x secure bit enable
                SEC5: u1,
                ///  I/O pin of Port x secure bit enable
                SEC6: u1,
                ///  I/O pin of Port x secure bit enable
                SEC7: u1,
                ///  I/O pin of Port x secure bit enable
                SEC8: u1,
                ///  I/O pin of Port x secure bit enable
                SEC9: u1,
                ///  I/O pin of Port x secure bit enable
                SEC10: u1,
                ///  I/O pin of Port x secure bit enable
                SEC11: u1,
                ///  I/O pin of Port x secure bit enable
                SEC12: u1,
                ///  I/O pin of Port x secure bit enable
                SEC13: u1,
                ///  I/O pin of Port x secure bit enable
                SEC14: u1,
                ///  I/O pin of Port x secure bit enable
                SEC15: u1,
                padding: u16,
            }),
        };

        ///  General purpose timers
        pub const TIM15 = extern struct {
            ///  control register 1
            CR1: mmio.Mmio(packed struct(u32) {
                ///  Counter enable
                CEN: u1,
                ///  Update disable
                UDIS: u1,
                ///  Update request source
                URS: u1,
                ///  One-pulse mode
                OPM: u1,
                reserved7: u3,
                ///  Auto-reload preload enable
                ARPE: u1,
                ///  Clock division
                CKD: u2,
                reserved11: u1,
                ///  UIF status bit remapping
                UIFREMAP: u1,
                padding: u20,
            }),
            ///  control register 2
            CR2: mmio.Mmio(packed struct(u32) {
                ///  Capture/compare preloaded control
                CCPC: u1,
                reserved2: u1,
                ///  Capture/compare control update selection
                CCUS: u1,
                ///  Capture/compare DMA selection
                CCDS: u1,
                ///  Master mode selection
                MMS: u2,
                reserved7: u1,
                ///  TI1 selection
                TI1S: u1,
                ///  Output Idle state 1
                OIS1: u1,
                ///  Output Idle state 1
                OIS1N: u1,
                ///  Output idle state 2 (OC2 output)
                OIS2: u1,
                padding: u21,
            }),
            ///  TIM15 slave mode control register
            SMCR: mmio.Mmio(packed struct(u32) {
                ///  Slave mode selection
                SMS: u3,
                reserved4: u1,
                ///  Trigger selection
                TS: u3,
                ///  Master/slave mode
                MSM: u1,
                reserved16: u8,
                ///  Slave mode selection - bit 3
                SMS_bit3: u1,
                padding: u15,
            }),
            ///  DMA/Interrupt enable register
            DIER: mmio.Mmio(packed struct(u32) {
                ///  Update interrupt enable
                UIE: u1,
                ///  Capture/Compare 1 interrupt enable
                CC1IE: u1,
                ///  Capture/Compare 2 interrupt enable
                CC2IE: u1,
                reserved5: u2,
                ///  COM interrupt enable
                COMIE: u1,
                ///  Trigger interrupt enable
                TIE: u1,
                ///  Break interrupt enable
                BIE: u1,
                ///  Update DMA request enable
                UDE: u1,
                ///  Capture/Compare 1 DMA request enable
                CC1DE: u1,
                ///  Capture/Compare 2 DMA request enable
                CC2DE: u1,
                reserved13: u2,
                ///  COM DMA request enable
                COMDE: u1,
                ///  Trigger DMA request enable
                TDE: u1,
                padding: u17,
            }),
            ///  status register
            SR: mmio.Mmio(packed struct(u32) {
                ///  Update interrupt flag
                UIF: u1,
                ///  Capture/compare 1 interrupt flag
                CC1IF: u1,
                ///  Capture/Compare 2 interrupt flag
                CC2IF: u1,
                reserved5: u2,
                ///  COM interrupt flag
                COMIF: u1,
                ///  Trigger interrupt flag
                TIF: u1,
                ///  Break interrupt flag
                BIF: u1,
                reserved9: u1,
                ///  Capture/Compare 1 overcapture flag
                CC1OF: u1,
                ///  Capture/Compare 2 overcapture flag
                CC2OF: u1,
                padding: u21,
            }),
            ///  event generation register
            EGR: mmio.Mmio(packed struct(u32) {
                ///  Update generation
                UG: u1,
                ///  Capture/compare 1 generation
                CC1G: u1,
                ///  Capture/Compare 2 generation
                CC2G: u1,
                reserved5: u2,
                ///  Capture/Compare control update generation
                COMG: u1,
                ///  Trigger generation
                TG: u1,
                ///  Break generation
                BG: u1,
                padding: u24,
            }),
            ///  capture/compare mode register (output mode)
            CCMR1_Output: mmio.Mmio(packed struct(u32) {
                ///  Capture/Compare 1 selection
                CC1S: u2,
                ///  Output Compare 1 fast enable
                OC1FE: u1,
                ///  Output Compare 1 preload enable
                OC1PE: u1,
                ///  Output Compare 1 mode
                OC1M: u3,
                reserved8: u1,
                ///  Capture/Compare 2 selection
                CC2S: u2,
                reserved11: u1,
                ///  Output Compare 2 preload enable
                OC2PE: u1,
                ///  Output Compare 2 mode
                OC2M: u3,
                reserved16: u1,
                ///  Output Compare 1 mode
                OC1M_bit3: u1,
                reserved24: u7,
                ///  Output Compare 2 mode - bit 3
                OC2M_bit3: u1,
                padding: u7,
            }),
            reserved32: [4]u8,
            ///  capture/compare enable register
            CCER: mmio.Mmio(packed struct(u32) {
                ///  Capture/Compare 1 output enable
                CC1E: u1,
                ///  Capture/Compare 1 output Polarity
                CC1P: u1,
                ///  Capture/Compare 1 complementary output enable
                CC1NE: u1,
                ///  Capture/Compare 1 output Polarity
                CC1NP: u1,
                ///  Capture/Compare 2 output enable
                CC2E: u1,
                ///  Capture/Compare 2 output polarity
                CC2P: u1,
                reserved7: u1,
                ///  Capture/Compare 2 complementary output polarity
                CC2NP: u1,
                padding: u24,
            }),
            ///  counter
            CNT: mmio.Mmio(packed struct(u32) {
                ///  counter value
                CNT: u16,
                reserved31: u15,
                ///  UIF Copy
                UIFCPY: u1,
            }),
            ///  prescaler
            PSC: mmio.Mmio(packed struct(u32) {
                ///  Prescaler value
                PSC: u16,
                padding: u16,
            }),
            ///  auto-reload register
            ARR: mmio.Mmio(packed struct(u32) {
                ///  Auto-reload value
                ARR: u16,
                padding: u16,
            }),
            ///  repetition counter register
            RCR: mmio.Mmio(packed struct(u32) {
                ///  Repetition counter value
                REP: u8,
                padding: u24,
            }),
            ///  capture/compare register 1
            CCR1: mmio.Mmio(packed struct(u32) {
                ///  Capture/Compare 1 value
                CCR1: u16,
                padding: u16,
            }),
            reserved68: [12]u8,
            ///  break and dead-time register
            BDTR: mmio.Mmio(packed struct(u32) {
                ///  Dead-time generator setup
                DTG: u8,
                ///  Lock configuration
                LOCK: u2,
                ///  Off-state selection for Idle mode
                OSSI: u1,
                ///  Off-state selection for Run mode
                OSSR: u1,
                ///  Break enable
                BKE: u1,
                ///  Break polarity
                BKP: u1,
                ///  Automatic output enable
                AOE: u1,
                ///  Main output enable
                MOE: u1,
                reserved26: u10,
                ///  Break Disarm
                BKDSRM: u1,
                reserved28: u1,
                ///  Break Bidirectional
                BKBID: u1,
                padding: u3,
            }),
            ///  DMA control register
            DCR: mmio.Mmio(packed struct(u32) {
                ///  DMA base address
                DBA: u5,
                reserved8: u3,
                ///  DMA burst length
                DBL: u5,
                padding: u19,
            }),
            ///  DMA address for full transfer
            DMAR: mmio.Mmio(packed struct(u32) {
                ///  DMA register for burst accesses
                DMAB: u16,
                padding: u16,
            }),
            ///  TIM15 option register 1
            OR1: mmio.Mmio(packed struct(u32) {
                ///  Input capture 1 remap
                TI1_RMP: u1,
                ///  Encoder mode
                ENCODER_MODE: u2,
                padding: u29,
            }),
            reserved96: [12]u8,
            ///  TIM15 option register 2
            OR2: mmio.Mmio(packed struct(u32) {
                ///  BRK BKIN input enable
                BKINE: u1,
                ///  BRK COMP1 enable
                BKCMP1E: u1,
                ///  BRK COMP2 enable
                BKCMP2E: u1,
                reserved8: u5,
                ///  BRK dfsdm1_break[0] enable
                BKDF1BK0E: u1,
                ///  BRK BKIN input polarity
                BKINP: u1,
                ///  BRK COMP1 input polarity
                BKCMP1P: u1,
                ///  BRK COMP2 input polarity
                BKCMP2P: u1,
                padding: u20,
            }),
        };

        ///  Tamper and backup registers
        pub const TAMP = extern struct {
            ///  control register 1
            CR1: mmio.Mmio(packed struct(u32) {
                ///  TAMP1E
                TAMP1E: u1,
                ///  TAMP2E
                TAMP2E: u1,
                ///  TAMP3E
                TAMP3E: u1,
                ///  TAMP4E
                TAMP4E: u1,
                ///  TAMP5E
                TAMP5E: u1,
                ///  TAMP6E
                TAMP6E: u1,
                ///  TAMP7E
                TAMP7E: u1,
                ///  TAMP8E
                TAMP8E: u1,
                reserved16: u8,
                ///  ITAMP1E
                ITAMP1E: u1,
                ///  ITAMP2E
                ITAMP2E: u1,
                ///  ITAMP3E
                ITAMP3E: u1,
                reserved20: u1,
                ///  ITAMP5E
                ITAMP5E: u1,
                reserved23: u2,
                ///  ITAMP5E
                ITAMP8E: u1,
                padding: u8,
            }),
            ///  control register 2
            CR2: mmio.Mmio(packed struct(u32) {
                ///  TAMP1NOER
                TAMP1NOER: u1,
                ///  TAMP2NOER
                TAMP2NOER: u1,
                ///  TAMP3NOER
                TAMP3NOER: u1,
                ///  TAMP4NOER
                TAMP4NOER: u1,
                ///  TAMP5NOER
                TAMP5NOER: u1,
                ///  TAMP6NOER
                TAMP6NOER: u1,
                ///  TAMP7NOER
                TAMP7NOER: u1,
                ///  TAMP8NOER
                TAMP8NOER: u1,
                reserved16: u8,
                ///  TAMP1MSK
                TAMP1MSK: u1,
                ///  TAMP2MSK
                TAMP2MSK: u1,
                ///  TAMP3MSK
                TAMP3MSK: u1,
                reserved23: u4,
                ///  BKERASE
                BKERASE: u1,
                ///  TAMP1TRG
                TAMP1TRG: u1,
                ///  TAMP2TRG
                TAMP2TRG: u1,
                ///  TAMP3TRG
                TAMP3TRG: u1,
                ///  TAMP4TRG
                TAMP4TRG: u1,
                ///  TAMP5TRG
                TAMP5TRG: u1,
                ///  TAMP6TRG
                TAMP6TRG: u1,
                ///  TAMP7TRG
                TAMP7TRG: u1,
                ///  TAMP8TRG
                TAMP8TRG: u1,
            }),
            ///  control register 3
            CR3: mmio.Mmio(packed struct(u32) {
                ///  ITAMP1NOER
                ITAMP1NOER: u1,
                ///  ITAMP2NOER
                ITAMP2NOER: u1,
                ///  ITAMP3NOER
                ITAMP3NOER: u1,
                reserved4: u1,
                ///  ITAMP5NOER
                ITAMP5NOER: u1,
                reserved7: u2,
                ///  ITAMP8NOER
                ITAMP8NOER: u1,
                padding: u24,
            }),
            ///  TAMP filter control register
            FLTCR: mmio.Mmio(packed struct(u32) {
                ///  TAMPFREQ
                TAMPFREQ: u3,
                ///  TAMPFLT
                TAMPFLT: u2,
                ///  TAMPPRCH
                TAMPPRCH: u2,
                ///  TAMPPUDIS
                TAMPPUDIS: u1,
                padding: u24,
            }),
            ///  TAMP active tamper control register 1
            ATCR1: mmio.Mmio(packed struct(u32) {
                ///  TAMP1AM
                TAMP1AM: u1,
                ///  TAMP2AM
                TAMP2AM: u1,
                ///  TAMP3AM
                TAMP3AM: u1,
                ///  TAMP4AM
                TAMP4AM: u1,
                ///  TAMP5AM
                TAMP5AM: u1,
                ///  TAMP6AM
                TAMP6AM: u1,
                ///  TAMP7AM
                TAMP7AM: u1,
                ///  TAMP8AM
                TAMP8AM: u1,
                ///  ATOSEL1
                ATOSEL1: u2,
                ///  ATOSEL2
                ATOSEL2: u2,
                ///  ATOSEL3
                ATOSEL3: u2,
                ///  ATOSEL4
                ATOSEL4: u2,
                ///  ATCKSEL
                ATCKSEL: u2,
                reserved24: u6,
                ///  ATPER
                ATPER: u2,
                reserved30: u4,
                ///  ATOSHARE
                ATOSHARE: u1,
                ///  FLTEN
                FLTEN: u1,
            }),
            ///  TAMP active tamper seed register
            ATSEEDR: mmio.Mmio(packed struct(u32) {
                ///  Pseudo-random generator seed value
                SEED: u32,
            }),
            ///  TAMP active tamper output register
            ATOR: mmio.Mmio(packed struct(u32) {
                ///  Pseudo-random generator value
                PRNG: u8,
                reserved14: u6,
                ///  Seed running flag
                SEEDF: u1,
                ///  Active tamper initialization status
                INITS: u1,
                padding: u16,
            }),
            ///  TAMP active tamper control register 2
            ATCR2: mmio.Mmio(packed struct(u32) {
                reserved8: u8,
                ///  ATOSEL1
                ATOSEL1: u3,
                ///  ATOSEL2
                ATOSEL2: u3,
                ///  ATOSEL3
                ATOSEL3: u3,
                ///  ATOSEL4
                ATOSEL4: u3,
                ///  ATOSEL5
                ATOSEL5: u3,
                ///  ATOSEL6
                ATOSEL6: u3,
                ///  ATOSEL7
                ATOSEL7: u3,
                ///  ATOSEL8
                ATOSEL8: u3,
            }),
            ///  TAMP secure mode register
            SMCR: mmio.Mmio(packed struct(u32) {
                ///  Backup registers read/write protection offset
                BKPRWDPROT: u8,
                reserved16: u8,
                ///  Backup registers write protection offset
                BKPWDPROT: u8,
                reserved31: u7,
                ///  Tamper protection
                TAMPDPROT: u1,
            }),
            ///  TAMP privilege mode control register
            PRIVCR: mmio.Mmio(packed struct(u32) {
                reserved29: u29,
                ///  Backup registers zone 1 privilege protection
                BKPRWPRIV: u1,
                ///  Backup registers zone 2 privilege protection
                BKPWPRIV: u1,
                ///  Tamper privilege protection
                TAMPPRIV: u1,
            }),
            reserved44: [4]u8,
            ///  TAMP interrupt enable register
            IER: mmio.Mmio(packed struct(u32) {
                ///  TAMP1IE
                TAMP1IE: u1,
                ///  TAMP2IE
                TAMP2IE: u1,
                ///  TAMP3IE
                TAMP3IE: u1,
                ///  TAMP4IE
                TAMP4IE: u1,
                ///  TAMP5IE
                TAMP5IE: u1,
                ///  TAMP6IE
                TAMP6IE: u1,
                ///  TAMP7IE
                TAMP7IE: u1,
                ///  TAMP8IE
                TAMP8IE: u1,
                reserved16: u8,
                ///  ITAMP1IE
                ITAMP1IE: u1,
                ///  ITAMP2IE
                ITAMP2IE: u1,
                ///  ITAMP3IE
                ITAMP3IE: u1,
                reserved20: u1,
                ///  ITAMP5IE
                ITAMP5IE: u1,
                reserved23: u2,
                ///  ITAMP8IE
                ITAMP8IE: u1,
                padding: u8,
            }),
            ///  TAMP status register
            SR: mmio.Mmio(packed struct(u32) {
                ///  TAMP1F
                TAMP1F: u1,
                ///  TAMP2F
                TAMP2F: u1,
                ///  TAMP3F
                TAMP3F: u1,
                ///  TAMP4F
                TAMP4F: u1,
                ///  TAMP5F
                TAMP5F: u1,
                ///  TAMP6F
                TAMP6F: u1,
                ///  TAMP7F
                TAMP7F: u1,
                ///  TAMP8F
                TAMP8F: u1,
                reserved16: u8,
                ///  ITAMP1F
                ITAMP1F: u1,
                ///  ITAMP2F
                ITAMP2F: u1,
                ///  ITAMP3F
                ITAMP3F: u1,
                reserved20: u1,
                ///  ITAMP5F
                ITAMP5F: u1,
                reserved23: u2,
                ///  ITAMP8F
                ITAMP8F: u1,
                padding: u8,
            }),
            ///  TAMP masked interrupt status register
            MISR: mmio.Mmio(packed struct(u32) {
                ///  TAMP1MF:
                TAMP1MF: u1,
                ///  TAMP2MF
                TAMP2MF: u1,
                ///  TAMP3MF
                TAMP3MF: u1,
                ///  TAMP4MF
                TAMP4MF: u1,
                ///  TAMP5MF
                TAMP5MF: u1,
                ///  TAMP6MF
                TAMP6MF: u1,
                ///  TAMP7MF:
                TAMP7MF: u1,
                ///  TAMP8MF
                TAMP8MF: u1,
                reserved16: u8,
                ///  ITAMP1MF
                ITAMP1MF: u1,
                ///  ITAMP2MF
                ITAMP2MF: u1,
                ///  ITAMP3MF
                ITAMP3MF: u1,
                reserved20: u1,
                ///  ITAMP5MF
                ITAMP5MF: u1,
                reserved23: u2,
                ///  ITAMP8MF
                ITAMP8MF: u1,
                padding: u8,
            }),
            ///  TAMP secure masked interrupt status register
            SMISR: mmio.Mmio(packed struct(u32) {
                ///  TAMP1MF:
                TAMP1MF: u1,
                ///  TAMP2MF
                TAMP2MF: u1,
                ///  TAMP3MF
                TAMP3MF: u1,
                ///  TAMP4MF
                TAMP4MF: u1,
                ///  TAMP5MF
                TAMP5MF: u1,
                ///  TAMP6MF
                TAMP6MF: u1,
                ///  TAMP7MF:
                TAMP7MF: u1,
                ///  TAMP8MF
                TAMP8MF: u1,
                reserved16: u8,
                ///  ITAMP1MF
                ITAMP1MF: u1,
                ///  ITAMP2MF
                ITAMP2MF: u1,
                ///  ITAMP3MF
                ITAMP3MF: u1,
                reserved20: u1,
                ///  ITAMP5MF
                ITAMP5MF: u1,
                reserved23: u2,
                ///  ITAMP8MF
                ITAMP8MF: u1,
                padding: u8,
            }),
            ///  TAMP status clear register
            SCR: mmio.Mmio(packed struct(u32) {
                ///  CTAMP1F
                CTAMP1F: u1,
                ///  CTAMP2F
                CTAMP2F: u1,
                ///  CTAMP3F
                CTAMP3F: u1,
                ///  CTAMP4F
                CTAMP4F: u1,
                ///  CTAMP5F
                CTAMP5F: u1,
                ///  CTAMP6F
                CTAMP6F: u1,
                ///  CTAMP7F
                CTAMP7F: u1,
                ///  CTAMP8F
                CTAMP8F: u1,
                reserved16: u8,
                ///  CITAMP1F
                CITAMP1F: u1,
                ///  CITAMP2F
                CITAMP2F: u1,
                ///  CITAMP3F
                CITAMP3F: u1,
                reserved20: u1,
                ///  CITAMP5F
                CITAMP5F: u1,
                reserved23: u2,
                ///  CITAMP8F
                CITAMP8F: u1,
                padding: u8,
            }),
            ///  TAMP monotonic counter register
            COUNTR: mmio.Mmio(packed struct(u32) {
                ///  COUNT
                COUNT: u32,
            }),
            reserved80: [12]u8,
            ///  TAMP configuration register
            CFGR: mmio.Mmio(packed struct(u32) {
                reserved1: u1,
                ///  TMONEN
                TMONEN: u1,
                ///  VMONEN
                VMONEN: u1,
                ///  WUTMONEN
                WUTMONEN: u1,
                padding: u28,
            }),
            reserved256: [172]u8,
            ///  TAMP backup register
            BKP0R: mmio.Mmio(packed struct(u32) {
                ///  BKP
                BKP: u32,
            }),
            ///  TAMP backup register
            BKP1R: mmio.Mmio(packed struct(u32) {
                ///  BKP
                BKP: u32,
            }),
            ///  TAMP backup register
            BKP2R: mmio.Mmio(packed struct(u32) {
                ///  BKP
                BKP: u32,
            }),
            ///  TAMP backup register
            BKP3R: mmio.Mmio(packed struct(u32) {
                ///  BKP
                BKP: u32,
            }),
            ///  TAMP backup register
            BKP4R: mmio.Mmio(packed struct(u32) {
                ///  BKP
                BKP: u32,
            }),
            ///  TAMP backup register
            BKP5R: mmio.Mmio(packed struct(u32) {
                ///  BKP
                BKP: u32,
            }),
            ///  TAMP backup register
            BKP6R: mmio.Mmio(packed struct(u32) {
                ///  BKP
                BKP: u32,
            }),
            ///  TAMP backup register
            BKP7R: mmio.Mmio(packed struct(u32) {
                ///  BKP
                BKP: u32,
            }),
            ///  TAMP backup register
            BKP8R: mmio.Mmio(packed struct(u32) {
                ///  BKP
                BKP: u32,
            }),
            ///  TAMP backup register
            BKP9R: mmio.Mmio(packed struct(u32) {
                ///  BKP
                BKP: u32,
            }),
            ///  TAMP backup register
            BKP10R: mmio.Mmio(packed struct(u32) {
                ///  BKP
                BKP: u32,
            }),
            ///  TAMP backup register
            BKP11R: mmio.Mmio(packed struct(u32) {
                ///  BKP
                BKP: u32,
            }),
            ///  TAMP backup register
            BKP12R: mmio.Mmio(packed struct(u32) {
                ///  BKP
                BKP: u32,
            }),
            ///  TAMP backup register
            BKP13R: mmio.Mmio(packed struct(u32) {
                ///  BKP
                BKP: u32,
            }),
            ///  TAMP backup register
            BKP14R: mmio.Mmio(packed struct(u32) {
                ///  BKP
                BKP: u32,
            }),
            ///  TAMP backup register
            BKP15R: mmio.Mmio(packed struct(u32) {
                ///  BKP
                BKP: u32,
            }),
            ///  TAMP backup register
            BKP16R: mmio.Mmio(packed struct(u32) {
                ///  BKP
                BKP: u32,
            }),
            ///  TAMP backup register
            BKP17R: mmio.Mmio(packed struct(u32) {
                ///  BKP
                BKP: u32,
            }),
            ///  TAMP backup register
            BKP18R: mmio.Mmio(packed struct(u32) {
                ///  BKP
                BKP: u32,
            }),
            ///  TAMP backup register
            BKP19R: mmio.Mmio(packed struct(u32) {
                ///  BKP
                BKP: u32,
            }),
            ///  TAMP backup register
            BKP20R: mmio.Mmio(packed struct(u32) {
                ///  BKP
                BKP: u32,
            }),
            ///  TAMP backup register
            BKP21R: mmio.Mmio(packed struct(u32) {
                ///  BKP
                BKP: u32,
            }),
            ///  TAMP backup register
            BKP22R: mmio.Mmio(packed struct(u32) {
                ///  BKP
                BKP: u32,
            }),
            ///  TAMP backup register
            BKP23R: mmio.Mmio(packed struct(u32) {
                ///  BKP
                BKP: u32,
            }),
            ///  TAMP backup register
            BKP24R: mmio.Mmio(packed struct(u32) {
                ///  BKP
                BKP: u32,
            }),
            ///  TAMP backup register
            BKP25R: mmio.Mmio(packed struct(u32) {
                ///  BKP
                BKP: u32,
            }),
            ///  TAMP backup register
            BKP26R: mmio.Mmio(packed struct(u32) {
                ///  BKP
                BKP: u32,
            }),
            ///  TAMP backup register
            BKP27R: mmio.Mmio(packed struct(u32) {
                ///  BKP
                BKP: u32,
            }),
            ///  TAMP backup register
            BKP28R: mmio.Mmio(packed struct(u32) {
                ///  BKP
                BKP: u32,
            }),
            ///  TAMP backup register
            BKP29R: mmio.Mmio(packed struct(u32) {
                ///  BKP
                BKP: u32,
            }),
            ///  TAMP backup register
            BKP30R: mmio.Mmio(packed struct(u32) {
                ///  BKP
                BKP: u32,
            }),
            ///  TAMP backup register
            BKP31R: mmio.Mmio(packed struct(u32) {
                ///  BKP
                BKP: u32,
            }),
        };

        ///  Analog-to-Digital Converter
        pub const ADC_Common = extern struct {
            ///  ADC Common status register
            CSR: mmio.Mmio(packed struct(u32) {
                ///  ADDRDY_MST
                ADDRDY_MST: u1,
                ///  EOSMP_MST
                EOSMP_MST: u1,
                ///  EOC_MST
                EOC_MST: u1,
                ///  EOS_MST
                EOS_MST: u1,
                ///  OVR_MST
                OVR_MST: u1,
                ///  JEOC_MST
                JEOC_MST: u1,
                ///  JEOS_MST
                JEOS_MST: u1,
                ///  AWD1_MST
                AWD1_MST: u1,
                ///  AWD2_MST
                AWD2_MST: u1,
                ///  AWD3_MST
                AWD3_MST: u1,
                ///  JQOVF_MST
                JQOVF_MST: u1,
                reserved16: u5,
                ///  ADRDY_SLV
                ADRDY_SLV: u1,
                ///  EOSMP_SLV
                EOSMP_SLV: u1,
                ///  EOC_SLV
                EOC_SLV: u1,
                ///  EOS_SLV
                EOS_SLV: u1,
                ///  OVR_SLV
                OVR_SLV: u1,
                ///  JEOC_SLV
                JEOC_SLV: u1,
                ///  JEOS_SLV
                JEOS_SLV: u1,
                ///  AWD1_SLV
                AWD1_SLV: u1,
                ///  AWD2_SLV
                AWD2_SLV: u1,
                ///  AWD3_SLV
                AWD3_SLV: u1,
                ///  JQOVF_SLV
                JQOVF_SLV: u1,
                padding: u5,
            }),
            reserved8: [4]u8,
            ///  ADC common control register
            CCR: mmio.Mmio(packed struct(u32) {
                ///  DUAL
                DUAL: u5,
                reserved8: u3,
                ///  DELAY
                DELAY: u3,
                reserved13: u2,
                ///  DMACFG
                DMACFG: u1,
                ///  MDMA
                MDMA: u2,
                ///  ADC clock mode
                CKMODE: u2,
                ///  ADC prescaler
                PRESC: u4,
                ///  VREFINT enable
                VREFEN: u1,
                ///  CH17SEL
                CH17SEL: u1,
                ///  CH18SEL
                CH18SEL: u1,
                padding: u7,
            }),
            ///  Common regular data register for dual mode
            CDR: mmio.Mmio(packed struct(u32) {
                ///  RDATA_MST
                RDATA_MST: u16,
                ///  RDATA_SLV
                RDATA_SLV: u16,
            }),
        };

        ///  Inter-integrated circuit
        pub const I2C1 = extern struct {
            ///  Control register 1
            CR1: mmio.Mmio(packed struct(u32) {
                ///  Peripheral enable
                PE: u1,
                ///  TX Interrupt enable
                TXIE: u1,
                ///  RX Interrupt enable
                RXIE: u1,
                ///  Address match interrupt enable (slave only)
                ADDRIE: u1,
                ///  Not acknowledge received interrupt enable
                NACKIE: u1,
                ///  STOP detection Interrupt enable
                STOPIE: u1,
                ///  Transfer Complete interrupt enable
                TCIE: u1,
                ///  Error interrupts enable
                ERRIE: u1,
                ///  Digital noise filter
                DNF: u4,
                ///  Analog noise filter OFF
                ANFOFF: u1,
                reserved14: u1,
                ///  DMA transmission requests enable
                TXDMAEN: u1,
                ///  DMA reception requests enable
                RXDMAEN: u1,
                ///  Slave byte control
                SBC: u1,
                ///  Clock stretching disable
                NOSTRETCH: u1,
                ///  Wakeup from STOP enable
                WUPEN: u1,
                ///  General call enable
                GCEN: u1,
                ///  SMBus Host address enable
                SMBHEN: u1,
                ///  SMBus Device Default address enable
                SMBDEN: u1,
                ///  SMBUS alert enable
                ALERTEN: u1,
                ///  PEC enable
                PECEN: u1,
                padding: u8,
            }),
            ///  Control register 2
            CR2: mmio.Mmio(packed struct(u32) {
                ///  Slave address bit (master mode)
                SADD: u10,
                ///  Transfer direction (master mode)
                RD_WRN: u1,
                ///  10-bit addressing mode (master mode)
                ADD10: u1,
                ///  10-bit address header only read direction (master receiver mode)
                HEAD10R: u1,
                ///  Start generation
                START: u1,
                ///  Stop generation (master mode)
                STOP: u1,
                ///  NACK generation (slave mode)
                NACK: u1,
                ///  Number of bytes
                NBYTES: u8,
                ///  NBYTES reload mode
                RELOAD: u1,
                ///  Automatic end mode (master mode)
                AUTOEND: u1,
                ///  Packet error checking byte
                PECBYTE: u1,
                padding: u5,
            }),
            ///  Own address register 1
            OAR1: mmio.Mmio(packed struct(u32) {
                ///  Interface address
                OA1: u10,
                ///  Own Address 1 10-bit mode
                OA1MODE: u1,
                reserved15: u4,
                ///  Own Address 1 enable
                OA1EN: u1,
                padding: u16,
            }),
            ///  Own address register 2
            OAR2: mmio.Mmio(packed struct(u32) {
                reserved1: u1,
                ///  Interface address
                OA2: u7,
                ///  Own Address 2 masks
                OA2MSK: u3,
                reserved15: u4,
                ///  Own Address 2 enable
                OA2EN: u1,
                padding: u16,
            }),
            ///  Timing register
            TIMINGR: mmio.Mmio(packed struct(u32) {
                ///  SCL low period (master mode)
                SCLL: u8,
                ///  SCL high period (master mode)
                SCLH: u8,
                ///  Data hold time
                SDADEL: u4,
                ///  Data setup time
                SCLDEL: u4,
                reserved28: u4,
                ///  Timing prescaler
                PRESC: u4,
            }),
            ///  Status register 1
            TIMEOUTR: mmio.Mmio(packed struct(u32) {
                ///  Bus timeout A
                TIMEOUTA: u12,
                ///  Idle clock timeout detection
                TIDLE: u1,
                reserved15: u2,
                ///  Clock timeout enable
                TIMOUTEN: u1,
                ///  Bus timeout B
                TIMEOUTB: u12,
                reserved31: u3,
                ///  Extended clock timeout enable
                TEXTEN: u1,
            }),
            ///  Interrupt and Status register
            ISR: mmio.Mmio(packed struct(u32) {
                ///  Transmit data register empty (transmitters)
                TXE: u1,
                ///  Transmit interrupt status (transmitters)
                TXIS: u1,
                ///  Receive data register not empty (receivers)
                RXNE: u1,
                ///  Address matched (slave mode)
                ADDR: u1,
                ///  Not acknowledge received flag
                NACKF: u1,
                ///  Stop detection flag
                STOPF: u1,
                ///  Transfer Complete (master mode)
                TC: u1,
                ///  Transfer Complete Reload
                TCR: u1,
                ///  Bus error
                BERR: u1,
                ///  Arbitration lost
                ARLO: u1,
                ///  Overrun/Underrun (slave mode)
                OVR: u1,
                ///  PEC Error in reception
                PECERR: u1,
                ///  Timeout or t_low detection flag
                TIMEOUT: u1,
                ///  SMBus alert
                ALERT: u1,
                reserved15: u1,
                ///  Bus busy
                BUSY: u1,
                ///  Transfer direction (Slave mode)
                DIR: u1,
                ///  Address match code (Slave mode)
                ADDCODE: u7,
                padding: u8,
            }),
            ///  Interrupt clear register
            ICR: mmio.Mmio(packed struct(u32) {
                reserved3: u3,
                ///  Address Matched flag clear
                ADDRCF: u1,
                ///  Not Acknowledge flag clear
                NACKCF: u1,
                ///  Stop detection flag clear
                STOPCF: u1,
                reserved8: u2,
                ///  Bus error flag clear
                BERRCF: u1,
                ///  Arbitration lost flag clear
                ARLOCF: u1,
                ///  Overrun/Underrun flag clear
                OVRCF: u1,
                ///  PEC Error flag clear
                PECCF: u1,
                ///  Timeout detection flag clear
                TIMOUTCF: u1,
                ///  Alert flag clear
                ALERTCF: u1,
                padding: u18,
            }),
            ///  PEC register
            PECR: mmio.Mmio(packed struct(u32) {
                ///  Packet error checking register
                PEC: u8,
                padding: u24,
            }),
            ///  Receive data register
            RXDR: mmio.Mmio(packed struct(u32) {
                ///  8-bit receive data
                RXDATA: u8,
                padding: u24,
            }),
            ///  Transmit data register
            TXDR: mmio.Mmio(packed struct(u32) {
                ///  8-bit transmit data
                TXDATA: u8,
                padding: u24,
            }),
        };

        ///  Universal serial bus full-speed device interface
        pub const USB = extern struct {
            ///  endpoint 0 register
            EP0R: mmio.Mmio(packed struct(u16) {
                ///  Endpoint address
                EA: u4,
                ///  Status bits, for transmission transfers
                STAT_TX: u2,
                ///  Data Toggle, for transmission transfers
                DTOG_TX: u1,
                ///  Correct Transfer for transmission
                CTR_TX: u1,
                ///  Endpoint kind
                EP_KIND: u1,
                ///  Endpoint type
                EP_TYPE: u2,
                ///  Setup transaction completed
                SETUP: u1,
                ///  Status bits, for reception transfers
                STAT_RX: u2,
                ///  Data Toggle, for reception transfers
                DTOG_RX: u1,
                ///  Correct transfer for reception
                CTR_RX: u1,
            }),
            reserved4: [2]u8,
            ///  endpoint 1 register
            EP1R: mmio.Mmio(packed struct(u16) {
                ///  Endpoint address
                EA: u4,
                ///  Status bits, for transmission transfers
                STAT_TX: u2,
                ///  Data Toggle, for transmission transfers
                DTOG_TX: u1,
                ///  Correct Transfer for transmission
                CTR_TX: u1,
                ///  Endpoint kind
                EP_KIND: u1,
                ///  Endpoint type
                EP_TYPE: u2,
                ///  Setup transaction completed
                SETUP: u1,
                ///  Status bits, for reception transfers
                STAT_RX: u2,
                ///  Data Toggle, for reception transfers
                DTOG_RX: u1,
                ///  Correct transfer for reception
                CTR_RX: u1,
            }),
            reserved8: [2]u8,
            ///  endpoint 2 register
            EP2R: mmio.Mmio(packed struct(u16) {
                ///  Endpoint address
                EA: u4,
                ///  Status bits, for transmission transfers
                STAT_TX: u2,
                ///  Data Toggle, for transmission transfers
                DTOG_TX: u1,
                ///  Correct Transfer for transmission
                CTR_TX: u1,
                ///  Endpoint kind
                EP_KIND: u1,
                ///  Endpoint type
                EP_TYPE: u2,
                ///  Setup transaction completed
                SETUP: u1,
                ///  Status bits, for reception transfers
                STAT_RX: u2,
                ///  Data Toggle, for reception transfers
                DTOG_RX: u1,
                ///  Correct transfer for reception
                CTR_RX: u1,
            }),
            reserved12: [2]u8,
            ///  endpoint 3 register
            EP3R: mmio.Mmio(packed struct(u16) {
                ///  Endpoint address
                EA: u4,
                ///  Status bits, for transmission transfers
                STAT_TX: u2,
                ///  Data Toggle, for transmission transfers
                DTOG_TX: u1,
                ///  Correct Transfer for transmission
                CTR_TX: u1,
                ///  Endpoint kind
                EP_KIND: u1,
                ///  Endpoint type
                EP_TYPE: u2,
                ///  Setup transaction completed
                SETUP: u1,
                ///  Status bits, for reception transfers
                STAT_RX: u2,
                ///  Data Toggle, for reception transfers
                DTOG_RX: u1,
                ///  Correct transfer for reception
                CTR_RX: u1,
            }),
            reserved16: [2]u8,
            ///  endpoint 4 register
            EP4R: mmio.Mmio(packed struct(u16) {
                ///  Endpoint address
                EA: u4,
                ///  Status bits, for transmission transfers
                STAT_TX: u2,
                ///  Data Toggle, for transmission transfers
                DTOG_TX: u1,
                ///  Correct Transfer for transmission
                CTR_TX: u1,
                ///  Endpoint kind
                EP_KIND: u1,
                ///  Endpoint type
                EP_TYPE: u2,
                ///  Setup transaction completed
                SETUP: u1,
                ///  Status bits, for reception transfers
                STAT_RX: u2,
                ///  Data Toggle, for reception transfers
                DTOG_RX: u1,
                ///  Correct transfer for reception
                CTR_RX: u1,
            }),
            reserved20: [2]u8,
            ///  endpoint 5 register
            EP5R: mmio.Mmio(packed struct(u16) {
                ///  Endpoint address
                EA: u4,
                ///  Status bits, for transmission transfers
                STAT_TX: u2,
                ///  Data Toggle, for transmission transfers
                DTOG_TX: u1,
                ///  Correct Transfer for transmission
                CTR_TX: u1,
                ///  Endpoint kind
                EP_KIND: u1,
                ///  Endpoint type
                EP_TYPE: u2,
                ///  Setup transaction completed
                SETUP: u1,
                ///  Status bits, for reception transfers
                STAT_RX: u2,
                ///  Data Toggle, for reception transfers
                DTOG_RX: u1,
                ///  Correct transfer for reception
                CTR_RX: u1,
            }),
            reserved24: [2]u8,
            ///  endpoint 6 register
            EP6R: mmio.Mmio(packed struct(u16) {
                ///  Endpoint address
                EA: u4,
                ///  Status bits, for transmission transfers
                STAT_TX: u2,
                ///  Data Toggle, for transmission transfers
                DTOG_TX: u1,
                ///  Correct Transfer for transmission
                CTR_TX: u1,
                ///  Endpoint kind
                EP_KIND: u1,
                ///  Endpoint type
                EP_TYPE: u2,
                ///  Setup transaction completed
                SETUP: u1,
                ///  Status bits, for reception transfers
                STAT_RX: u2,
                ///  Data Toggle, for reception transfers
                DTOG_RX: u1,
                ///  Correct transfer for reception
                CTR_RX: u1,
            }),
            reserved28: [2]u8,
            ///  endpoint 7 register
            EP7R: mmio.Mmio(packed struct(u16) {
                ///  Endpoint address
                EA: u4,
                ///  Status bits, for transmission transfers
                STAT_TX: u2,
                ///  Data Toggle, for transmission transfers
                DTOG_TX: u1,
                ///  Correct Transfer for transmission
                CTR_TX: u1,
                ///  Endpoint kind
                EP_KIND: u1,
                ///  Endpoint type
                EP_TYPE: u2,
                ///  Setup transaction completed
                SETUP: u1,
                ///  Status bits, for reception transfers
                STAT_RX: u2,
                ///  Data Toggle, for reception transfers
                DTOG_RX: u1,
                ///  Correct transfer for reception
                CTR_RX: u1,
            }),
            reserved64: [34]u8,
            ///  control register
            CNTR: mmio.Mmio(packed struct(u16) {
                ///  Force USB Reset
                FRES: u1,
                ///  Power down
                PDWN: u1,
                ///  Low-power mode
                LPMODE: u1,
                ///  Force suspend
                FSUSP: u1,
                ///  Resume request
                RESUME: u1,
                ///  LPM L1 Resume request
                L1RESUME: u1,
                reserved7: u1,
                ///  LPM L1 state request interrupt mask
                L1REQM: u1,
                ///  Expected start of frame interrupt mask
                ESOFM: u1,
                ///  Start of frame interrupt mask
                SOFM: u1,
                ///  USB reset interrupt mask
                RESETM: u1,
                ///  Suspend mode interrupt mask
                SUSPM: u1,
                ///  Wakeup interrupt mask
                WKUPM: u1,
                ///  Error interrupt mask
                ERRM: u1,
                ///  Packet memory area over / underrun interrupt mask
                PMAOVRM: u1,
                ///  Correct transfer interrupt mask
                CTRM: u1,
            }),
            reserved68: [2]u8,
            ///  interrupt status register
            ISTR: mmio.Mmio(packed struct(u16) {
                ///  Endpoint Identifier
                EP_ID: u4,
                ///  Direction of transaction
                DIR: u1,
                reserved7: u2,
                ///  LPM L1 state request
                L1REQ: u1,
                ///  Expected start frame
                ESOF: u1,
                ///  start of frame
                SOF: u1,
                ///  reset request
                RESET: u1,
                ///  Suspend mode request
                SUSP: u1,
                ///  Wakeup
                WKUP: u1,
                ///  Error
                ERR: u1,
                ///  Packet memory area over / underrun
                PMAOVR: u1,
                ///  Correct transfer
                CTR: u1,
            }),
            reserved72: [2]u8,
            ///  frame number register
            FNR: mmio.Mmio(packed struct(u16) {
                ///  Frame number
                FN: u11,
                ///  Lost SOF
                LSOF: u2,
                ///  Locked
                LCK: u1,
                ///  Receive data - line status
                RXDM: u1,
                ///  Receive data + line status
                RXDP: u1,
            }),
            reserved76: [2]u8,
            ///  device address
            DADDR: mmio.Mmio(packed struct(u16) {
                ///  Device address
                ADD: u7,
                ///  Enable function
                EF: u1,
                padding: u8,
            }),
            reserved80: [2]u8,
            ///  Buffer table address
            BTABLE: mmio.Mmio(packed struct(u16) {
                reserved3: u3,
                ///  Buffer table
                BTABLE: u13,
            }),
            reserved84: [2]u8,
            ///  LPM control and status register
            LPMCSR: mmio.Mmio(packed struct(u16) {
                ///  LPM support enable
                LPMEN: u1,
                ///  LPM Token acknowledge enable
                LPMACK: u1,
                reserved3: u1,
                ///  RemoteWake value
                REMWAKE: u1,
                ///  BESL value
                BESL: u4,
                padding: u8,
            }),
            reserved88: [2]u8,
            ///  Battery charging detector
            BCDR: mmio.Mmio(packed struct(u16) {
                ///  Battery charging detector (BCD) enable
                BCDEN: u1,
                ///  Data contact detection (DCD) mode enable
                DCDEN: u1,
                ///  Primary detection (PD) mode enable
                PDEN: u1,
                ///  Secondary detection (SD) mode enable
                SDEN: u1,
                ///  Data contact detection (DCD) status
                DCDET: u1,
                ///  Primary detection (PD) status
                PDET: u1,
                ///  Secondary detection (SD) status
                SDET: u1,
                ///  DM pull-up detection status
                PS2DET: u1,
                reserved15: u7,
                ///  DP pull-up control
                DPPU: u1,
            }),
        };

        ///  General purpose timers
        pub const TIM16 = extern struct {
            ///  control register 1
            CR1: mmio.Mmio(packed struct(u32) {
                ///  Counter enable
                CEN: u1,
                ///  Update disable
                UDIS: u1,
                ///  Update request source
                URS: u1,
                ///  One-pulse mode
                OPM: u1,
                reserved7: u3,
                ///  Auto-reload preload enable
                ARPE: u1,
                ///  Clock division
                CKD: u2,
                reserved11: u1,
                ///  UIF status bit remapping
                UIFREMAP: u1,
                padding: u20,
            }),
            ///  control register 2
            CR2: mmio.Mmio(packed struct(u32) {
                ///  Capture/compare preloaded control
                CCPC: u1,
                reserved2: u1,
                ///  Capture/compare control update selection
                CCUS: u1,
                ///  Capture/compare DMA selection
                CCDS: u1,
                reserved8: u4,
                ///  Output Idle state 1
                OIS1: u1,
                ///  Output Idle state 1
                OIS1N: u1,
                padding: u22,
            }),
            reserved12: [4]u8,
            ///  DMA/Interrupt enable register
            DIER: mmio.Mmio(packed struct(u32) {
                ///  Update interrupt enable
                UIE: u1,
                ///  Capture/Compare 1 interrupt enable
                CC1IE: u1,
                reserved5: u3,
                ///  COM interrupt enable
                COMIE: u1,
                reserved7: u1,
                ///  Break interrupt enable
                BIE: u1,
                ///  Update DMA request enable
                UDE: u1,
                ///  Capture/Compare 1 DMA request enable
                CC1DE: u1,
                reserved13: u3,
                ///  COM DMA request enable
                COMDE: u1,
                padding: u18,
            }),
            ///  status register
            SR: mmio.Mmio(packed struct(u32) {
                ///  Update interrupt flag
                UIF: u1,
                ///  Capture/compare 1 interrupt flag
                CC1IF: u1,
                reserved5: u3,
                ///  COM interrupt flag
                COMIF: u1,
                reserved7: u1,
                ///  Break interrupt flag
                BIF: u1,
                reserved9: u1,
                ///  Capture/Compare 1 overcapture flag
                CC1OF: u1,
                padding: u22,
            }),
            ///  event generation register
            EGR: mmio.Mmio(packed struct(u32) {
                ///  Update generation
                UG: u1,
                ///  Capture/compare 1 generation
                CC1G: u1,
                reserved5: u3,
                ///  Capture/Compare control update generation
                COMG: u1,
                reserved7: u1,
                ///  Break generation
                BG: u1,
                padding: u24,
            }),
            ///  capture/compare mode register (output mode)
            CCMR1_Output: mmio.Mmio(packed struct(u32) {
                ///  Capture/Compare 1 selection
                CC1S: u2,
                ///  Output Compare 1 fast enable
                OC1FE: u1,
                ///  Output Compare 1 preload enable
                OC1PE: u1,
                ///  Output Compare 1 mode
                OC1M: u3,
                reserved16: u9,
                ///  Output Compare 1 mode
                OC1M_2: u1,
                padding: u15,
            }),
            reserved32: [4]u8,
            ///  capture/compare enable register
            CCER: mmio.Mmio(packed struct(u32) {
                ///  Capture/Compare 1 output enable
                CC1E: u1,
                ///  Capture/Compare 1 output Polarity
                CC1P: u1,
                ///  Capture/Compare 1 complementary output enable
                CC1NE: u1,
                ///  Capture/Compare 1 output Polarity
                CC1NP: u1,
                padding: u28,
            }),
            ///  counter
            CNT: mmio.Mmio(packed struct(u32) {
                ///  counter value
                CNT: u16,
                reserved31: u15,
                ///  UIF Copy
                UIFCPY: u1,
            }),
            ///  prescaler
            PSC: mmio.Mmio(packed struct(u32) {
                ///  Prescaler value
                PSC: u16,
                padding: u16,
            }),
            ///  auto-reload register
            ARR: mmio.Mmio(packed struct(u32) {
                ///  Auto-reload value
                ARR: u16,
                padding: u16,
            }),
            ///  repetition counter register
            RCR: mmio.Mmio(packed struct(u32) {
                ///  Repetition counter value
                REP: u8,
                padding: u24,
            }),
            ///  capture/compare register 1
            CCR1: mmio.Mmio(packed struct(u32) {
                ///  Capture/Compare 1 value
                CCR1: u16,
                padding: u16,
            }),
            reserved68: [12]u8,
            ///  break and dead-time register
            BDTR: mmio.Mmio(packed struct(u32) {
                ///  Dead-time generator setup
                DTG: u8,
                ///  Lock configuration
                LOCK: u2,
                ///  Off-state selection for Idle mode
                OSSI: u1,
                ///  Off-state selection for Run mode
                OSSR: u1,
                ///  Break enable
                BKE: u1,
                ///  Break polarity
                BKP: u1,
                ///  Automatic output enable
                AOE: u1,
                ///  Main output enable
                MOE: u1,
                reserved26: u10,
                ///  Break Disarm
                BKDSRM: u1,
                reserved28: u1,
                ///  Break Bidirectional
                BKBID: u1,
                padding: u3,
            }),
            ///  DMA control register
            DCR: mmio.Mmio(packed struct(u32) {
                ///  DMA base address
                DBA: u5,
                reserved8: u3,
                ///  DMA burst length
                DBL: u5,
                padding: u19,
            }),
            ///  DMA address for full transfer
            DMAR: mmio.Mmio(packed struct(u32) {
                ///  DMA register for burst accesses
                DMAB: u16,
                padding: u16,
            }),
            ///  TIM16 option register 1
            OR1: mmio.Mmio(packed struct(u32) {
                ///  Input capture 1 remap
                TI1_RMP: u2,
                padding: u30,
            }),
            reserved96: [12]u8,
            ///  TIM17 option register 1
            OR2: mmio.Mmio(packed struct(u32) {
                ///  BRK BKIN input enable
                BKINE: u1,
                ///  BRK COMP1 enable
                BKCMP1E: u1,
                ///  BRK COMP2 enable
                BKCMP2E: u1,
                reserved8: u5,
                ///  BRK dfsdm1_break[1] enable
                BKDF1BK1E: u1,
                ///  BRK BKIN input polarity
                BKINP: u1,
                ///  BRK COMP1 input polarity
                BKCMP1P: u1,
                ///  BRK COMP2 input polarit
                BKCMP2P: u1,
                padding: u20,
            }),
        };

        ///  MCU debug component
        pub const DBGMCU = extern struct {
            ///  DBGMCU_IDCODE
            IDCODE: mmio.Mmio(packed struct(u32) {
                ///  Device identifier
                DEV_ID: u12,
                reserved16: u4,
                ///  Revision identifie
                REV_ID: u16,
            }),
            ///  Debug MCU configuration register
            CR: mmio.Mmio(packed struct(u32) {
                reserved1: u1,
                ///  Debug Stop mode
                DBG_STOP: u1,
                ///  Debug Standby mode
                DBG_STANDBY: u1,
                reserved4: u1,
                ///  Trace pin assignment control
                TRACE_IOEN: u1,
                ///  trace port and clock enable
                TRACE_EN: u1,
                ///  Trace pin assignment control
                TRACE_MODE: u2,
                padding: u24,
            }),
            ///  Debug MCU APB1 freeze register1
            APB1LFZR: mmio.Mmio(packed struct(u32) {
                ///  TIM2 counter stopped when core is halted
                DBG_TIM2_STOP: u1,
                ///  TIM3 stop in debug
                DBG_TIM3_STOP: u1,
                ///  TIM4 stop in debug
                DBG_TIM4_STOP: u1,
                ///  TIM5 stop in debug
                DBG_TIM5_STOP: u1,
                ///  TIM6 counter stopped when core is halted
                DBG_TIM6_STOP: u1,
                ///  TIM7 counter stopped when core is halted
                DBG_TIM7_STOP: u1,
                reserved10: u4,
                ///  RTC counter stopped when core is halted
                DBG_RTC_STOP: u1,
                ///  Window watchdog counter stopped when core is halted
                DBG_WWDG_STOP: u1,
                ///  Independent watchdog counter stopped when core is halted
                DBG_IWDG_STOP: u1,
                reserved21: u8,
                ///  I2C1 SMBUS timeout counter stopped when core is halted
                DBG_I2C1_STOP: u1,
                ///  I2C2 SMBUS timeout counter stopped when core is halted
                DBG_I2C2_STOP: u1,
                ///  I2C3 SMBUS timeout counter stopped when core is halted
                DBG_I2C3_STOP: u1,
                reserved31: u7,
                ///  LPTIM1 counter stopped when core is halted
                DBG_LPTIM1_STOP: u1,
            }),
            ///  Debug MCU APB1 freeze register 2
            APB1HFZR: mmio.Mmio(packed struct(u32) {
                reserved1: u1,
                ///  I2C4 stop in debug
                DBG_I2C4_STOP: u1,
                reserved5: u3,
                ///  LPTIM2 counter stopped when core is halted
                DBG_LPTIM2_STOP: u1,
                ///  LPTIM3 stop in debug
                DBG_LPTIM3_STOP: u1,
                padding: u25,
            }),
            ///  Debug MCU APB2 freeze register
            APB2FZR: mmio.Mmio(packed struct(u32) {
                reserved11: u11,
                ///  TIM1 counter stopped when core is halted
                DBG_TIM1_STOP: u1,
                reserved13: u1,
                ///  TIM8 stop in debug
                DBG_TIM8_STOP: u1,
                reserved16: u2,
                ///  TIM15 counter stopped when core is halted
                DBG_TIM15_STOP: u1,
                ///  TIM16 counter stopped when core is halted
                DBG_TIM16_STOP: u1,
                ///  DBG_TIM17_STOP
                DBG_TIM17_STOP: u1,
                padding: u13,
            }),
        };

        ///  General purpose timers
        pub const TIM17 = extern struct {
            ///  control register 1
            CR1: mmio.Mmio(packed struct(u32) {
                ///  Counter enable
                CEN: u1,
                ///  Update disable
                UDIS: u1,
                ///  Update request source
                URS: u1,
                ///  One-pulse mode
                OPM: u1,
                reserved7: u3,
                ///  Auto-reload preload enable
                ARPE: u1,
                ///  Clock division
                CKD: u2,
                reserved11: u1,
                ///  UIF status bit remapping
                UIFREMAP: u1,
                padding: u20,
            }),
            ///  control register 2
            CR2: mmio.Mmio(packed struct(u32) {
                ///  Capture/compare preloaded control
                CCPC: u1,
                reserved2: u1,
                ///  Capture/compare control update selection
                CCUS: u1,
                ///  Capture/compare DMA selection
                CCDS: u1,
                reserved8: u4,
                ///  Output Idle state 1
                OIS1: u1,
                ///  Output Idle state 1
                OIS1N: u1,
                padding: u22,
            }),
            reserved12: [4]u8,
            ///  DMA/Interrupt enable register
            DIER: mmio.Mmio(packed struct(u32) {
                ///  Update interrupt enable
                UIE: u1,
                ///  Capture/Compare 1 interrupt enable
                CC1IE: u1,
                reserved5: u3,
                ///  COM interrupt enable
                COMIE: u1,
                reserved7: u1,
                ///  Break interrupt enable
                BIE: u1,
                ///  Update DMA request enable
                UDE: u1,
                ///  Capture/Compare 1 DMA request enable
                CC1DE: u1,
                reserved13: u3,
                ///  COM DMA request enable
                COMDE: u1,
                padding: u18,
            }),
            ///  status register
            SR: mmio.Mmio(packed struct(u32) {
                ///  Update interrupt flag
                UIF: u1,
                ///  Capture/compare 1 interrupt flag
                CC1IF: u1,
                reserved5: u3,
                ///  COM interrupt flag
                COMIF: u1,
                reserved7: u1,
                ///  Break interrupt flag
                BIF: u1,
                reserved9: u1,
                ///  Capture/Compare 1 overcapture flag
                CC1OF: u1,
                padding: u22,
            }),
            ///  event generation register
            EGR: mmio.Mmio(packed struct(u32) {
                ///  Update generation
                UG: u1,
                ///  Capture/compare 1 generation
                CC1G: u1,
                reserved5: u3,
                ///  Capture/Compare control update generation
                COMG: u1,
                reserved7: u1,
                ///  Break generation
                BG: u1,
                padding: u24,
            }),
            ///  capture/compare mode register (output mode)
            CCMR1_Output: mmio.Mmio(packed struct(u32) {
                ///  Capture/Compare 1 selection
                CC1S: u2,
                ///  Output Compare 1 fast enable
                OC1FE: u1,
                ///  Output Compare 1 preload enable
                OC1PE: u1,
                ///  Output Compare 1 mode
                OC1M: u3,
                reserved16: u9,
                ///  Output Compare 1 mode
                OC1M_2: u1,
                padding: u15,
            }),
            reserved32: [4]u8,
            ///  capture/compare enable register
            CCER: mmio.Mmio(packed struct(u32) {
                ///  Capture/Compare 1 output enable
                CC1E: u1,
                ///  Capture/Compare 1 output Polarity
                CC1P: u1,
                ///  Capture/Compare 1 complementary output enable
                CC1NE: u1,
                ///  Capture/Compare 1 output Polarity
                CC1NP: u1,
                padding: u28,
            }),
            ///  counter
            CNT: mmio.Mmio(packed struct(u32) {
                ///  counter value
                CNT: u16,
                reserved31: u15,
                ///  UIF Copy
                UIFCPY: u1,
            }),
            ///  prescaler
            PSC: mmio.Mmio(packed struct(u32) {
                ///  Prescaler value
                PSC: u16,
                padding: u16,
            }),
            ///  auto-reload register
            ARR: mmio.Mmio(packed struct(u32) {
                ///  Auto-reload value
                ARR: u16,
                padding: u16,
            }),
            ///  repetition counter register
            RCR: mmio.Mmio(packed struct(u32) {
                ///  Repetition counter value
                REP: u8,
                padding: u24,
            }),
            ///  capture/compare register 1
            CCR1: mmio.Mmio(packed struct(u32) {
                ///  Capture/Compare 1 value
                CCR1: u16,
                padding: u16,
            }),
            reserved68: [12]u8,
            ///  break and dead-time register
            BDTR: mmio.Mmio(packed struct(u32) {
                ///  Dead-time generator setup
                DTG: u8,
                ///  Lock configuration
                LOCK: u2,
                ///  Off-state selection for Idle mode
                OSSI: u1,
                ///  Off-state selection for Run mode
                OSSR: u1,
                ///  Break enable
                BKE: u1,
                ///  Break polarity
                BKP: u1,
                ///  Automatic output enable
                AOE: u1,
                ///  Main output enable
                MOE: u1,
                reserved26: u10,
                ///  Break Disarm
                BKDSRM: u1,
                reserved28: u1,
                ///  Break Bidirectional
                BKBID: u1,
                padding: u3,
            }),
            ///  DMA control register
            DCR: mmio.Mmio(packed struct(u32) {
                ///  DMA base address
                DBA: u5,
                reserved8: u3,
                ///  DMA burst length
                DBL: u5,
                padding: u19,
            }),
            ///  DMA address for full transfer
            DMAR: mmio.Mmio(packed struct(u32) {
                ///  DMA register for burst accesses
                DMAB: u16,
                padding: u16,
            }),
            ///  TIM16 option register 1
            OR1: mmio.Mmio(packed struct(u32) {
                ///  Input capture 1 remap
                TI1_RMP: u2,
                padding: u30,
            }),
            reserved96: [12]u8,
            ///  TIM17 option register 1
            OR2: mmio.Mmio(packed struct(u32) {
                ///  BRK BKIN input enable
                BKINE: u1,
                ///  BRK COMP1 enable
                BKCMP1E: u1,
                ///  BRK COMP2 enable
                BKCMP2E: u1,
                reserved8: u5,
                ///  BRK dfsdm1_break[2] enable
                BKDF1BK2E: u1,
                ///  BRK BKIN input polarity
                BKINP: u1,
                ///  BRK COMP1 input polarity
                BKCMP1P: u1,
                ///  BRK COMP2 input polarit
                BKCMP2P: u1,
                padding: u20,
            }),
        };

        ///  Operational amplifiers
        pub const OPAMP = extern struct {
            ///  OPAMP1 control/status register
            OPAMP1_CSR: mmio.Mmio(packed struct(u32) {
                ///  Operational amplifier Enable
                OPAEN: u1,
                ///  Operational amplifier Low Power Mode
                OPALPM: u1,
                ///  Operational amplifier PGA mode
                OPAMODE: u2,
                ///  Operational amplifier Programmable amplifier gain value
                PGA_GAIN: u2,
                reserved8: u2,
                ///  inverting input selection
                VM_SEL: u2,
                ///  non inverted input selection
                VP_SEL: u1,
                reserved12: u1,
                ///  calibration mode enable
                CALON: u1,
                ///  calibration selection
                CALSEL: u1,
                ///  User trimming enable
                USERTRIM: u1,
                ///  Operational amplifier calibration output
                CALOUT: u1,
                reserved31: u15,
                ///  Operational amplifier power supply range for stability
                OPA_RANGE: u1,
            }),
            ///  OPAMP1 offset trimming register in normal mode
            OPAMP1_OTR: mmio.Mmio(packed struct(u32) {
                ///  Trim for NMOS differential pairs
                TRIMOFFSETN: u5,
                reserved8: u3,
                ///  Trim for PMOS differential pairs
                TRIMOFFSETP: u5,
                padding: u19,
            }),
            ///  OPAMP1 offset trimming register in low-powe mode
            OPAMP1_LPOTR: mmio.Mmio(packed struct(u32) {
                ///  Trim for NMOS differential pairs
                TRIMLPOFFSETN: u5,
                reserved8: u3,
                ///  Trim for PMOS differential pairs
                TRIMLPOFFSETP: u5,
                padding: u19,
            }),
            reserved16: [4]u8,
            ///  OPAMP2 control/status register
            OPAMP2_CRS: mmio.Mmio(packed struct(u32) {
                ///  Operational amplifier Enable
                OPAEN: u1,
                ///  Operational amplifier Low Power Mode
                OPALPM: u1,
                ///  Operational amplifier PGA mode
                OPAMODE: u2,
                ///  Operational amplifier Programmable amplifier gain value
                PGA_GAIN: u2,
                reserved8: u2,
                ///  inverting input selection
                VM_SEL: u2,
                ///  non inverted input selection
                VP_SEL: u1,
                reserved12: u1,
                ///  calibration mode enable
                CALON: u1,
                ///  calibration selection
                CALSEL: u1,
                ///  User trimming enable
                USERTRIM: u1,
                ///  Operational amplifier calibration output
                CALOUT: u1,
                padding: u16,
            }),
            ///  OPAMP2 offset trimming register in normal mode
            OPAMP2_OTR: mmio.Mmio(packed struct(u32) {
                ///  Trim for NMOS differential pairs
                TRIMOFFSETN: u5,
                reserved8: u3,
                ///  Trim for PMOS differential pairs
                TRIMOFFSETP: u5,
                padding: u19,
            }),
            ///  OPAMP2 offset trimming register in low-power mode
            OPAMP2_LPOTR: mmio.Mmio(packed struct(u32) {
                ///  Trim for NMOS differential pairs
                TRIMLPOFFSETN: u5,
                reserved8: u3,
                ///  Trim for PMOS differential pairs
                TRIMLPOFFSETP: u5,
                padding: u19,
            }),
        };

        ///  General-purpose-timers
        pub const TIM2 = extern struct {
            ///  control register 1
            CR1: mmio.Mmio(packed struct(u32) {
                ///  Counter enable
                CEN: u1,
                ///  Update disable
                UDIS: u1,
                ///  Update request source
                URS: u1,
                ///  One-pulse mode
                OPM: u1,
                ///  Direction
                DIR: u1,
                ///  Center-aligned mode selection
                CMS: u2,
                ///  Auto-reload preload enable
                ARPE: u1,
                ///  Clock division
                CKD: u2,
                reserved11: u1,
                ///  UIF status bit remapping
                UIFREMAP: u1,
                padding: u20,
            }),
            ///  control register 2
            CR2: mmio.Mmio(packed struct(u32) {
                reserved3: u3,
                ///  Capture/compare DMA selection
                CCDS: u1,
                ///  Master mode selection
                MMS: u3,
                ///  TI1 selection
                TI1S: u1,
                padding: u24,
            }),
            ///  slave mode control register
            SMCR: mmio.Mmio(packed struct(u32) {
                ///  Slave mode selection
                SMS: u3,
                reserved4: u1,
                ///  Trigger selection
                TS: u3,
                ///  Master/Slave mode
                MSM: u1,
                ///  External trigger filter
                ETF: u4,
                ///  External trigger prescaler
                ETPS: u2,
                ///  External clock enable
                ECE: u1,
                ///  External trigger polarity
                ETP: u1,
                ///  Slave mode selection - bit 3
                SMS_bit3: u1,
                padding: u15,
            }),
            ///  DMA/Interrupt enable register
            DIER: mmio.Mmio(packed struct(u32) {
                ///  Update interrupt enable
                UIE: u1,
                ///  Capture/Compare 1 interrupt enable
                CC1IE: u1,
                ///  Capture/Compare 2 interrupt enable
                CC2IE: u1,
                ///  Capture/Compare 3 interrupt enable
                CC3IE: u1,
                ///  Capture/Compare 4 interrupt enable
                CC4IE: u1,
                reserved6: u1,
                ///  Trigger interrupt enable
                TIE: u1,
                reserved8: u1,
                ///  Update DMA request enable
                UDE: u1,
                ///  Capture/Compare 1 DMA request enable
                CC1DE: u1,
                ///  Capture/Compare 2 DMA request enable
                CC2DE: u1,
                ///  Capture/Compare 3 DMA request enable
                CC3DE: u1,
                ///  Capture/Compare 4 DMA request enable
                CC4DE: u1,
                reserved14: u1,
                ///  Trigger DMA request enable
                TDE: u1,
                padding: u17,
            }),
            ///  status register
            SR: mmio.Mmio(packed struct(u32) {
                ///  Update interrupt flag
                UIF: u1,
                ///  Capture/compare 1 interrupt flag
                CC1IF: u1,
                ///  Capture/Compare 2 interrupt flag
                CC2IF: u1,
                ///  Capture/Compare 3 interrupt flag
                CC3IF: u1,
                ///  Capture/Compare 4 interrupt flag
                CC4IF: u1,
                reserved6: u1,
                ///  Trigger interrupt flag
                TIF: u1,
                reserved9: u2,
                ///  Capture/Compare 1 overcapture flag
                CC1OF: u1,
                ///  Capture/compare 2 overcapture flag
                CC2OF: u1,
                ///  Capture/Compare 3 overcapture flag
                CC3OF: u1,
                ///  Capture/Compare 4 overcapture flag
                CC4OF: u1,
                padding: u19,
            }),
            ///  event generation register
            EGR: mmio.Mmio(packed struct(u32) {
                ///  Update generation
                UG: u1,
                ///  Capture/compare 1 generation
                CC1G: u1,
                ///  Capture/compare 2 generation
                CC2G: u1,
                ///  Capture/compare 3 generation
                CC3G: u1,
                ///  Capture/compare 4 generation
                CC4G: u1,
                reserved6: u1,
                ///  Trigger generation
                TG: u1,
                padding: u25,
            }),
            ///  capture/compare mode register 1 (output mode)
            CCMR1_Output: mmio.Mmio(packed struct(u32) {
                ///  Capture/Compare 1 selection
                CC1S: u2,
                ///  Output compare 1 fast enable
                OC1FE: u1,
                ///  Output compare 1 preload enable
                OC1PE: u1,
                ///  Output compare 1 mode
                OC1M: u3,
                ///  Output compare 1 clear enable
                OC1CE: u1,
                ///  Capture/Compare 2 selection
                CC2S: u2,
                ///  Output compare 2 fast enable
                OC2FE: u1,
                ///  Output compare 2 preload enable
                OC2PE: u1,
                ///  Output compare 2 mode
                OC2M: u3,
                ///  Output compare 2 clear enable
                OC2CE: u1,
                ///  Output Compare 1 mode - bit 3
                OC1M_bit3: u1,
                reserved24: u7,
                ///  Output Compare 2 mode - bit 3
                OC2M_bit3: u1,
                padding: u7,
            }),
            ///  capture/compare mode register 2 (output mode)
            CCMR2_Output: mmio.Mmio(packed struct(u32) {
                ///  Capture/Compare 3 selection
                CC3S: u2,
                ///  Output compare 3 fast enable
                OC3FE: u1,
                ///  Output compare 3 preload enable
                OC3PE: u1,
                ///  Output compare 3 mode
                OC3M: u3,
                ///  Output compare 3 clear enable
                OC3CE: u1,
                ///  Capture/Compare 4 selection
                CC4S: u2,
                ///  Output compare 4 fast enable
                OC4FE: u1,
                ///  Output compare 4 preload enable
                OC4PE: u1,
                ///  Output compare 4 mode
                OC4M: u3,
                ///  Output compare 4 clear enable
                OC4CE: u1,
                ///  Output Compare 1 mode - bit 3
                OC3M_bit3: u1,
                reserved24: u7,
                ///  Output Compare 2 mode - bit 3
                OC4M_bit3: u1,
                padding: u7,
            }),
            ///  capture/compare enable register
            CCER: mmio.Mmio(packed struct(u32) {
                ///  Capture/Compare 1 output enable
                CC1E: u1,
                ///  Capture/Compare 1 output Polarity
                CC1P: u1,
                reserved3: u1,
                ///  Capture/Compare 1 output Polarity
                CC1NP: u1,
                ///  Capture/Compare 2 output enable
                CC2E: u1,
                ///  Capture/Compare 2 output Polarity
                CC2P: u1,
                reserved7: u1,
                ///  Capture/Compare 2 output Polarity
                CC2NP: u1,
                ///  Capture/Compare 3 output enable
                CC3E: u1,
                ///  Capture/Compare 3 output Polarity
                CC3P: u1,
                reserved11: u1,
                ///  Capture/Compare 3 output Polarity
                CC3NP: u1,
                ///  Capture/Compare 4 output enable
                CC4E: u1,
                ///  Capture/Compare 3 output Polarity
                CC4P: u1,
                reserved15: u1,
                ///  Capture/Compare 4 output Polarity
                CC4NP: u1,
                padding: u16,
            }),
            ///  counter
            CNT: mmio.Mmio(packed struct(u32) {
                ///  Least significant part of counter value
                CNT_L: u16,
                ///  Most significant part counter value (on TIM2 and TIM5)
                CNT_H: u15,
                ///  Most significant bit of counter value (on TIM2 and TIM5)
                CNT_bit31: u1,
            }),
            ///  prescaler
            PSC: mmio.Mmio(packed struct(u32) {
                ///  Prescaler value
                PSC: u16,
                padding: u16,
            }),
            ///  auto-reload register
            ARR: mmio.Mmio(packed struct(u32) {
                ///  Low Auto-reload value
                ARR_L: u16,
                ///  High Auto-reload value (TIM2 only)
                ARR_H: u16,
            }),
            reserved52: [4]u8,
            ///  capture/compare register 1
            CCR1: mmio.Mmio(packed struct(u32) {
                ///  Low Capture/Compare 1 value
                CCR1_L: u16,
                ///  High Capture/Compare 1 value (TIM2 only)
                CCR1_H: u16,
            }),
            ///  capture/compare register 2
            CCR2: mmio.Mmio(packed struct(u32) {
                ///  Low Capture/Compare 2 value
                CCR2_L: u16,
                ///  High Capture/Compare 2 value (TIM2 only)
                CCR2_H: u16,
            }),
            ///  capture/compare register 3
            CCR3: mmio.Mmio(packed struct(u32) {
                ///  Low Capture/Compare value
                CCR3_L: u16,
                ///  High Capture/Compare value (TIM2 only)
                CCR3_H: u16,
            }),
            ///  capture/compare register 4
            CCR4: mmio.Mmio(packed struct(u32) {
                ///  Low Capture/Compare value
                CCR4_L: u16,
                ///  High Capture/Compare value (TIM2 only)
                CCR4_H: u16,
            }),
            reserved72: [4]u8,
            ///  DMA control register
            DCR: mmio.Mmio(packed struct(u32) {
                ///  DMA base address
                DBA: u5,
                reserved8: u3,
                ///  DMA burst length
                DBL: u5,
                padding: u19,
            }),
            ///  DMA address for full transfer
            DMAR: mmio.Mmio(packed struct(u32) {
                ///  Low Capture/Compare 2 value
                DMAB: u16,
                padding: u16,
            }),
            ///  TIM2 option register
            OR1: mmio.Mmio(packed struct(u32) {
                ///  Internal trigger 1 remap
                ITR1_RMP: u1,
                ///  External trigger remap
                ETR1_RMP: u1,
                ///  Input Capture 4 remap
                TI4_RMP: u2,
                padding: u28,
            }),
            reserved96: [12]u8,
            ///  TIM3 option register 2
            OR2: mmio.Mmio(packed struct(u32) {
                reserved14: u14,
                ///  ETR source selection
                ETRSEL: u3,
                padding: u15,
            }),
        };

        ///  System configuration controller
        pub const SYSCFG = extern struct {
            ///  SYSCFG secure configuration register
            SECCFGR: mmio.Mmio(packed struct(u32) {
                ///  SYSCFG clock control security
                SYSCFGSEC: u1,
                ///  ClassB security
                CLASSBSEC: u1,
                ///  SRAM2 security
                SRAM2SEC: u1,
                ///  FPUSEC
                FPUSEC: u1,
                padding: u28,
            }),
            ///  configuration register 1
            CFGR1: mmio.Mmio(packed struct(u32) {
                reserved8: u8,
                ///  I/O analog switch voltage booster enable
                BOOSTEN: u1,
                ///  GPIO analog switch control voltage selection
                ANASWVDD: u1,
                reserved16: u6,
                ///  Fast-mode Plus (Fm+) driving capability activation on PB6
                I2C_PB6_FMP: u1,
                ///  Fast-mode Plus (Fm+) driving capability activation on PB7
                I2C_PB7_FMP: u1,
                ///  Fast-mode Plus (Fm+) driving capability activation on PB8
                I2C_PB8_FMP: u1,
                ///  Fast-mode Plus (Fm+) driving capability activation on PB9
                I2C_PB9_FMP: u1,
                ///  I2C1 Fast-mode Plus driving capability activation
                I2C1_FMP: u1,
                ///  I2C2 Fast-mode Plus driving capability activation
                I2C2_FMP: u1,
                ///  I2C3 Fast-mode Plus driving capability activation
                I2C3_FMP: u1,
                ///  I2C4_FMP
                I2C4_FMP: u1,
                padding: u8,
            }),
            ///  FPU interrupt mask register
            FPUIMR: mmio.Mmio(packed struct(u32) {
                ///  Floating point unit interrupts enable bits
                FPU_IE: u6,
                padding: u26,
            }),
            ///  SYSCFG CPU non-secure lock register
            CNSLCKR: mmio.Mmio(packed struct(u32) {
                ///  VTOR_NS register lock
                LOCKNSVTOR: u1,
                ///  Non-secure MPU registers lock
                LOCKNSMPU: u1,
                padding: u30,
            }),
            ///  SYSCFG CPU secure lock register
            CSLOCKR: mmio.Mmio(packed struct(u32) {
                ///  LOCKSVTAIRCR
                LOCKSVTAIRCR: u1,
                ///  LOCKSMPU
                LOCKSMPU: u1,
                ///  LOCKSAU
                LOCKSAU: u1,
                padding: u29,
            }),
            ///  CFGR2
            CFGR2: mmio.Mmio(packed struct(u32) {
                ///  LOCKUP (hardfault) output enable bit
                CLL: u1,
                ///  SRAM2 parity lock bit
                SPL: u1,
                ///  PVD lock enable bit
                PVDL: u1,
                ///  ECC Lock
                ECCL: u1,
                reserved8: u4,
                ///  SRAM2 parity error flag
                SPF: u1,
                padding: u23,
            }),
            ///  SCSR
            SCSR: mmio.Mmio(packed struct(u32) {
                ///  SRAM2 Erase
                SRAM2ER: u1,
                ///  SRAM2 busy by erase operation
                SRAM2BSY: u1,
                padding: u30,
            }),
            ///  SKR
            SKR: mmio.Mmio(packed struct(u32) {
                ///  SRAM2 write protection key for software erase
                KEY: u8,
                padding: u24,
            }),
            ///  SWPR
            SWPR: mmio.Mmio(packed struct(u32) {
                ///  P0WP
                P0WP: u1,
                ///  P1WP
                P1WP: u1,
                ///  P2WP
                P2WP: u1,
                ///  P3WP
                P3WP: u1,
                ///  P4WP
                P4WP: u1,
                ///  P5WP
                P5WP: u1,
                ///  P6WP
                P6WP: u1,
                ///  P7WP
                P7WP: u1,
                ///  P8WP
                P8WP: u1,
                ///  P9WP
                P9WP: u1,
                ///  P10WP
                P10WP: u1,
                ///  P11WP
                P11WP: u1,
                ///  P12WP
                P12WP: u1,
                ///  P13WP
                P13WP: u1,
                ///  P14WP
                P14WP: u1,
                ///  P15WP
                P15WP: u1,
                ///  P16WP
                P16WP: u1,
                ///  P17WP
                P17WP: u1,
                ///  P18WP
                P18WP: u1,
                ///  P19WP
                P19WP: u1,
                ///  P20WP
                P20WP: u1,
                ///  P21WP
                P21WP: u1,
                ///  P22WP
                P22WP: u1,
                ///  P23WP
                P23WP: u1,
                ///  P24WP
                P24WP: u1,
                ///  P25WP
                P25WP: u1,
                ///  P26WP
                P26WP: u1,
                ///  P27WP
                P27WP: u1,
                ///  P28WP
                P28WP: u1,
                ///  P29WP
                P29WP: u1,
                ///  P30WP
                P30WP: u1,
                ///  SRAM2 page 31 write protection
                P31WP: u1,
            }),
            ///  SWPR2
            SWPR2: mmio.Mmio(packed struct(u32) {
                ///  P32WP
                P32WP: u1,
                ///  P33WP
                P33WP: u1,
                ///  P34WP
                P34WP: u1,
                ///  P35WP
                P35WP: u1,
                ///  P36WP
                P36WP: u1,
                ///  P37WP
                P37WP: u1,
                ///  P38WP
                P38WP: u1,
                ///  P39WP
                P39WP: u1,
                ///  P40WP
                P40WP: u1,
                ///  P41WP
                P41WP: u1,
                ///  P42WP
                P42WP: u1,
                ///  P43WP
                P43WP: u1,
                ///  P44WP
                P44WP: u1,
                ///  P45WP
                P45WP: u1,
                ///  P46WP
                P46WP: u1,
                ///  P47WP
                P47WP: u1,
                ///  P48WP
                P48WP: u1,
                ///  P49WP
                P49WP: u1,
                ///  P50WP
                P50WP: u1,
                ///  P51WP
                P51WP: u1,
                ///  P52WP
                P52WP: u1,
                ///  P53WP
                P53WP: u1,
                ///  P54WP
                P54WP: u1,
                ///  P55WP
                P55WP: u1,
                ///  P56WP
                P56WP: u1,
                ///  P57WP
                P57WP: u1,
                ///  P58WP
                P58WP: u1,
                ///  P59WP
                P59WP: u1,
                ///  P60WP
                P60WP: u1,
                ///  P61WP
                P61WP: u1,
                ///  P62WP
                P62WP: u1,
                ///  P63WP
                P63WP: u1,
            }),
            reserved44: [4]u8,
            ///  RSSCMDR
            RSSCMDR: mmio.Mmio(packed struct(u32) {
                ///  RSS commands
                RSSCMD: u8,
                padding: u24,
            }),
        };

        ///  ICache
        pub const ICache = extern struct {
            ///  ICACHE control register
            ICACHE_CR: mmio.Mmio(packed struct(u32) {
                ///  EN
                EN: u1,
                ///  CACHEINV
                CACHEINV: u1,
                ///  WAYSEL
                WAYSEL: u1,
                reserved16: u13,
                ///  HITMEN
                HITMEN: u1,
                ///  MISSMEN
                MISSMEN: u1,
                ///  HITMRST
                HITMRST: u1,
                ///  MISSMRST
                MISSMRST: u1,
                padding: u12,
            }),
            ///  ICACHE status register
            ICACHE_SR: mmio.Mmio(packed struct(u32) {
                ///  BUSYF
                BUSYF: u1,
                ///  BSYENDF
                BSYENDF: u1,
                ///  ERRF
                ERRF: u1,
                padding: u29,
            }),
            ///  ICACHE interrupt enable register
            ICACHE_IER: mmio.Mmio(packed struct(u32) {
                reserved1: u1,
                ///  BSYENDIE
                BSYENDIE: u1,
                ///  ERRIE
                ERRIE: u1,
                padding: u29,
            }),
            ///  ICACHE flag clear register
            ICACHE_FCR: mmio.Mmio(packed struct(u32) {
                reserved1: u1,
                ///  CBSYENDF
                CBSYENDF: u1,
                ///  CERRF
                CERRF: u1,
                padding: u29,
            }),
            ///  ICACHE hit monitor register
            ICACHE_HMONR: mmio.Mmio(packed struct(u32) {
                ///  HITMON
                HITMON: u32,
            }),
            ///  ICACHE miss monitor register
            ICACHE_MMONR: mmio.Mmio(packed struct(u32) {
                ///  MISSMON
                MISSMON: u16,
                padding: u16,
            }),
            reserved32: [8]u8,
            ///  ICACHE region configuration register
            ICACHE_CRR0: mmio.Mmio(packed struct(u32) {
                ///  BASEADDR
                BASEADDR: u8,
                reserved9: u1,
                ///  RSIZE
                RSIZE: u3,
                reserved15: u3,
                ///  REN
                REN: u1,
                ///  REMAPADDR
                REMAPADDR: u11,
                reserved28: u1,
                ///  MSTSEL
                MSTSEL: u1,
                reserved31: u2,
                ///  HBURST
                HBURST: u1,
            }),
            ///  ICACHE region configuration register
            ICACHE_CRR1: mmio.Mmio(packed struct(u32) {
                ///  BASEADDR
                BASEADDR: u8,
                reserved9: u1,
                ///  RSIZE
                RSIZE: u3,
                reserved15: u3,
                ///  REN
                REN: u1,
                ///  REMAPADDR
                REMAPADDR: u11,
                reserved28: u1,
                ///  MSTSEL
                MSTSEL: u1,
                reserved31: u2,
                ///  HBURST
                HBURST: u1,
            }),
            ///  ICACHE region configuration register
            ICACHE_CRR2: mmio.Mmio(packed struct(u32) {
                ///  BASEADDR
                BASEADDR: u8,
                reserved9: u1,
                ///  RSIZE
                RSIZE: u3,
                reserved15: u3,
                ///  REN
                REN: u1,
                ///  REMAPADDR
                REMAPADDR: u11,
                reserved28: u1,
                ///  MSTSEL
                MSTSEL: u1,
                reserved31: u2,
                ///  HBURST
                HBURST: u1,
            }),
            ///  ICACHE region configuration register
            ICACHE_CRR3: mmio.Mmio(packed struct(u32) {
                ///  BASEADDR
                BASEADDR: u8,
                reserved9: u1,
                ///  RSIZE
                RSIZE: u3,
                reserved15: u3,
                ///  REN
                REN: u1,
                ///  REMAPADDR
                REMAPADDR: u11,
                reserved28: u1,
                ///  MSTSEL
                MSTSEL: u1,
                reserved31: u2,
                ///  HBURST
                HBURST: u1,
            }),
        };

        ///  General-purpose-timers
        pub const TIM3 = extern struct {
            ///  control register 1
            CR1: mmio.Mmio(packed struct(u32) {
                ///  Counter enable
                CEN: u1,
                ///  Update disable
                UDIS: u1,
                ///  Update request source
                URS: u1,
                ///  One-pulse mode
                OPM: u1,
                ///  Direction
                DIR: u1,
                ///  Center-aligned mode selection
                CMS: u2,
                ///  Auto-reload preload enable
                ARPE: u1,
                ///  Clock division
                CKD: u2,
                reserved11: u1,
                ///  UIF status bit remapping
                UIFREMAP: u1,
                padding: u20,
            }),
            ///  control register 2
            CR2: mmio.Mmio(packed struct(u32) {
                reserved3: u3,
                ///  Capture/compare DMA selection
                CCDS: u1,
                ///  Master mode selection
                MMS: u3,
                ///  TI1 selection
                TI1S: u1,
                padding: u24,
            }),
            ///  slave mode control register
            SMCR: mmio.Mmio(packed struct(u32) {
                ///  Slave mode selection
                SMS: u3,
                reserved4: u1,
                ///  Trigger selection
                TS: u3,
                ///  Master/Slave mode
                MSM: u1,
                ///  External trigger filter
                ETF: u4,
                ///  External trigger prescaler
                ETPS: u2,
                ///  External clock enable
                ECE: u1,
                ///  External trigger polarity
                ETP: u1,
                ///  Slave mode selection - bit 3
                SMS_bit3: u1,
                padding: u15,
            }),
            ///  DMA/Interrupt enable register
            DIER: mmio.Mmio(packed struct(u32) {
                ///  Update interrupt enable
                UIE: u1,
                ///  Capture/Compare 1 interrupt enable
                CC1IE: u1,
                ///  Capture/Compare 2 interrupt enable
                CC2IE: u1,
                ///  Capture/Compare 3 interrupt enable
                CC3IE: u1,
                ///  Capture/Compare 4 interrupt enable
                CC4IE: u1,
                reserved6: u1,
                ///  Trigger interrupt enable
                TIE: u1,
                reserved8: u1,
                ///  Update DMA request enable
                UDE: u1,
                ///  Capture/Compare 1 DMA request enable
                CC1DE: u1,
                ///  Capture/Compare 2 DMA request enable
                CC2DE: u1,
                ///  Capture/Compare 3 DMA request enable
                CC3DE: u1,
                ///  Capture/Compare 4 DMA request enable
                CC4DE: u1,
                reserved14: u1,
                ///  Trigger DMA request enable
                TDE: u1,
                padding: u17,
            }),
            ///  status register
            SR: mmio.Mmio(packed struct(u32) {
                ///  Update interrupt flag
                UIF: u1,
                ///  Capture/compare 1 interrupt flag
                CC1IF: u1,
                ///  Capture/Compare 2 interrupt flag
                CC2IF: u1,
                ///  Capture/Compare 3 interrupt flag
                CC3IF: u1,
                ///  Capture/Compare 4 interrupt flag
                CC4IF: u1,
                reserved6: u1,
                ///  Trigger interrupt flag
                TIF: u1,
                reserved9: u2,
                ///  Capture/Compare 1 overcapture flag
                CC1OF: u1,
                ///  Capture/compare 2 overcapture flag
                CC2OF: u1,
                ///  Capture/Compare 3 overcapture flag
                CC3OF: u1,
                ///  Capture/Compare 4 overcapture flag
                CC4OF: u1,
                padding: u19,
            }),
            ///  event generation register
            EGR: mmio.Mmio(packed struct(u32) {
                ///  Update generation
                UG: u1,
                ///  Capture/compare 1 generation
                CC1G: u1,
                ///  Capture/compare 2 generation
                CC2G: u1,
                ///  Capture/compare 3 generation
                CC3G: u1,
                ///  Capture/compare 4 generation
                CC4G: u1,
                reserved6: u1,
                ///  Trigger generation
                TG: u1,
                padding: u25,
            }),
            ///  capture/compare mode register 1 (output mode)
            CCMR1_Output: mmio.Mmio(packed struct(u32) {
                ///  Capture/Compare 1 selection
                CC1S: u2,
                ///  Output compare 1 fast enable
                OC1FE: u1,
                ///  Output compare 1 preload enable
                OC1PE: u1,
                ///  Output compare 1 mode
                OC1M: u3,
                ///  Output compare 1 clear enable
                OC1CE: u1,
                ///  Capture/Compare 2 selection
                CC2S: u2,
                ///  Output compare 2 fast enable
                OC2FE: u1,
                ///  Output compare 2 preload enable
                OC2PE: u1,
                ///  Output compare 2 mode
                OC2M: u3,
                ///  Output compare 2 clear enable
                OC2CE: u1,
                ///  Output Compare 1 mode - bit 3
                OC1M_bit3: u1,
                reserved24: u7,
                ///  Output Compare 2 mode - bit 3
                OC2M_bit3: u1,
                padding: u7,
            }),
            ///  capture/compare mode register 2 (output mode)
            CCMR2_Output: mmio.Mmio(packed struct(u32) {
                ///  Capture/Compare 3 selection
                CC3S: u2,
                ///  Output compare 3 fast enable
                OC3FE: u1,
                ///  Output compare 3 preload enable
                OC3PE: u1,
                ///  Output compare 3 mode
                OC3M: u3,
                ///  Output compare 3 clear enable
                OC3CE: u1,
                ///  Capture/Compare 4 selection
                CC4S: u2,
                ///  Output compare 4 fast enable
                OC4FE: u1,
                ///  Output compare 4 preload enable
                OC4PE: u1,
                ///  Output compare 4 mode
                OC4M: u3,
                ///  Output compare 4 clear enable
                OC4CE: u1,
                ///  Output Compare 1 mode - bit 3
                OC3M_bit3: u1,
                reserved24: u7,
                ///  Output Compare 2 mode - bit 3
                OC4M_bit3: u1,
                padding: u7,
            }),
            ///  capture/compare enable register
            CCER: mmio.Mmio(packed struct(u32) {
                ///  Capture/Compare 1 output enable
                CC1E: u1,
                ///  Capture/Compare 1 output Polarity
                CC1P: u1,
                reserved3: u1,
                ///  Capture/Compare 1 output Polarity
                CC1NP: u1,
                ///  Capture/Compare 2 output enable
                CC2E: u1,
                ///  Capture/Compare 2 output Polarity
                CC2P: u1,
                reserved7: u1,
                ///  Capture/Compare 2 output Polarity
                CC2NP: u1,
                ///  Capture/Compare 3 output enable
                CC3E: u1,
                ///  Capture/Compare 3 output Polarity
                CC3P: u1,
                reserved11: u1,
                ///  Capture/Compare 3 output Polarity
                CC3NP: u1,
                ///  Capture/Compare 4 output enable
                CC4E: u1,
                ///  Capture/Compare 3 output Polarity
                CC4P: u1,
                reserved15: u1,
                ///  Capture/Compare 4 output Polarity
                CC4NP: u1,
                padding: u16,
            }),
            ///  counter
            CNT: mmio.Mmio(packed struct(u32) {
                ///  Least significant part of counter value
                CNT_L: u16,
                ///  Most significant part counter value (on TIM2 and TIM5)
                CNT_H: u15,
                ///  Most significant bit of counter value (on TIM2 and TIM5)
                CNT_bit31: u1,
            }),
            ///  prescaler
            PSC: mmio.Mmio(packed struct(u32) {
                ///  Prescaler value
                PSC: u16,
                padding: u16,
            }),
            ///  auto-reload register
            ARR: mmio.Mmio(packed struct(u32) {
                ///  Low Auto-reload value
                ARR_L: u16,
                ///  High Auto-reload value (TIM2 only)
                ARR_H: u16,
            }),
            reserved52: [4]u8,
            ///  capture/compare register 1
            CCR1: mmio.Mmio(packed struct(u32) {
                ///  Low Capture/Compare 1 value
                CCR1_L: u16,
                ///  High Capture/Compare 1 value (TIM2 only)
                CCR1_H: u16,
            }),
            ///  capture/compare register 2
            CCR2: mmio.Mmio(packed struct(u32) {
                ///  Low Capture/Compare 2 value
                CCR2_L: u16,
                ///  High Capture/Compare 2 value (TIM2 only)
                CCR2_H: u16,
            }),
            ///  capture/compare register 3
            CCR3: mmio.Mmio(packed struct(u32) {
                ///  Low Capture/Compare value
                CCR3_L: u16,
                ///  High Capture/Compare value (TIM2 only)
                CCR3_H: u16,
            }),
            ///  capture/compare register 4
            CCR4: mmio.Mmio(packed struct(u32) {
                ///  Low Capture/Compare value
                CCR4_L: u16,
                ///  High Capture/Compare value (TIM2 only)
                CCR4_H: u16,
            }),
            reserved72: [4]u8,
            ///  DMA control register
            DCR: mmio.Mmio(packed struct(u32) {
                ///  DMA base address
                DBA: u5,
                reserved8: u3,
                ///  DMA burst length
                DBL: u5,
                padding: u19,
            }),
            ///  DMA address for full transfer
            DMAR: mmio.Mmio(packed struct(u32) {
                ///  Low Capture/Compare 2 value
                DMAB: u16,
                padding: u16,
            }),
            ///  TIM2 option register
            OR1: mmio.Mmio(packed struct(u32) {
                ///  Internal trigger 1 remap
                ITR1_RMP: u1,
                padding: u31,
            }),
            reserved96: [12]u8,
            ///  TIM3 option register 2
            OR2: mmio.Mmio(packed struct(u32) {
                reserved14: u14,
                ///  ETR source selection
                ETRSEL: u3,
                padding: u15,
            }),
        };

        ///  Independent watchdog
        pub const IWDG = extern struct {
            ///  Key register
            KR: mmio.Mmio(packed struct(u32) {
                ///  Key value (write only, read 0x0000)
                KEY: u16,
                padding: u16,
            }),
            ///  Prescaler register
            PR: mmio.Mmio(packed struct(u32) {
                ///  Prescaler divider
                PR: u3,
                padding: u29,
            }),
            ///  Reload register
            RLR: mmio.Mmio(packed struct(u32) {
                ///  Watchdog counter reload value
                RL: u12,
                padding: u20,
            }),
            ///  Status register
            SR: mmio.Mmio(packed struct(u32) {
                ///  Watchdog prescaler value update
                PVU: u1,
                ///  Watchdog counter reload value update
                RVU: u1,
                ///  Watchdog counter window value update
                WVU: u1,
                padding: u29,
            }),
            ///  Window register
            WINR: mmio.Mmio(packed struct(u32) {
                ///  Watchdog counter window value
                WIN: u12,
                padding: u20,
            }),
        };

        ///  Advanced-timers
        pub const TIM8 = extern struct {
            ///  control register 1
            CR1: mmio.Mmio(packed struct(u32) {
                ///  Counter enable
                CEN: u1,
                ///  Update disable
                UDIS: u1,
                ///  Update request source
                URS: u1,
                ///  One-pulse mode
                OPM: u1,
                ///  Direction
                DIR: u1,
                ///  Center-aligned mode selection
                CMS: u2,
                ///  Auto-reload preload enable
                ARPE: u1,
                ///  Clock division
                CKD: u2,
                reserved11: u1,
                ///  UIF status bit remapping
                UIFREMAP: u1,
                padding: u20,
            }),
            ///  control register 2
            CR2: mmio.Mmio(packed struct(u32) {
                ///  Capture/compare preloaded control
                CCPC: u1,
                reserved2: u1,
                ///  Capture/compare control update selection
                CCUS: u1,
                ///  Capture/compare DMA selection
                CCDS: u1,
                ///  Master mode selection
                MMS: u3,
                ///  TI1 selection
                TI1S: u1,
                ///  Output Idle state 1
                OIS1: u1,
                ///  Output Idle state 1
                OIS1N: u1,
                ///  Output Idle state 2
                OIS2: u1,
                ///  Output Idle state 2
                OIS2N: u1,
                ///  Output Idle state 3
                OIS3: u1,
                ///  Output Idle state 3
                OIS3N: u1,
                ///  Output Idle state 4
                OIS4: u1,
                ///  Output Idle state 5 (OC5 output)
                OIS5: u1,
                ///  Output Idle state 6
                OIS6: u1,
                reserved20: u3,
                ///  Master mode selection 2
                MMS2: u4,
                padding: u8,
            }),
            ///  slave mode control register
            SMCR: mmio.Mmio(packed struct(u32) {
                ///  Slave mode selection
                SMS: u3,
                reserved4: u1,
                ///  Trigger selection
                TS: u3,
                ///  Master/Slave mode
                MSM: u1,
                ///  External trigger filter
                ETF: u4,
                ///  External trigger prescaler
                ETPS: u2,
                ///  External clock enable
                ECE: u1,
                ///  External trigger polarity
                ETP: u1,
                ///  Slave mode selection - bit 3
                SMS_bit3: u1,
                padding: u15,
            }),
            ///  DMA/Interrupt enable register
            DIER: mmio.Mmio(packed struct(u32) {
                ///  Update interrupt enable
                UIE: u1,
                ///  Capture/Compare 1 interrupt enable
                CC1IE: u1,
                ///  Capture/Compare 2 interrupt enable
                CC2IE: u1,
                ///  Capture/Compare 3 interrupt enable
                CC3IE: u1,
                ///  Capture/Compare 4 interrupt enable
                CC4IE: u1,
                ///  COM interrupt enable
                COMIE: u1,
                ///  Trigger interrupt enable
                TIE: u1,
                ///  Break interrupt enable
                BIE: u1,
                ///  Update DMA request enable
                UDE: u1,
                ///  Capture/Compare 1 DMA request enable
                CC1DE: u1,
                ///  Capture/Compare 2 DMA request enable
                CC2DE: u1,
                ///  Capture/Compare 3 DMA request enable
                CC3DE: u1,
                ///  Capture/Compare 4 DMA request enable
                CC4DE: u1,
                ///  COM DMA request enable
                COMDE: u1,
                ///  Trigger DMA request enable
                TDE: u1,
                padding: u17,
            }),
            ///  status register
            SR: mmio.Mmio(packed struct(u32) {
                ///  Update interrupt flag
                UIF: u1,
                ///  Capture/compare 1 interrupt flag
                CC1IF: u1,
                ///  Capture/Compare 2 interrupt flag
                CC2IF: u1,
                ///  Capture/Compare 3 interrupt flag
                CC3IF: u1,
                ///  Capture/Compare 4 interrupt flag
                CC4IF: u1,
                ///  COM interrupt flag
                COMIF: u1,
                ///  Trigger interrupt flag
                TIF: u1,
                ///  Break interrupt flag
                BIF: u1,
                reserved9: u1,
                ///  Capture/Compare 1 overcapture flag
                CC1OF: u1,
                ///  Capture/compare 2 overcapture flag
                CC2OF: u1,
                ///  Capture/Compare 3 overcapture flag
                CC3OF: u1,
                ///  Capture/Compare 4 overcapture flag
                CC4OF: u1,
                ///  System Break interrupt flag
                SBIF: u1,
                reserved16: u2,
                ///  Compare 5 interrupt flag
                CC5IF: u1,
                ///  Compare 6 interrupt flag
                CC6IF: u1,
                padding: u14,
            }),
            ///  event generation register
            EGR: mmio.Mmio(packed struct(u32) {
                ///  Update generation
                UG: u1,
                ///  Capture/compare 1 generation
                CC1G: u1,
                ///  Capture/compare 2 generation
                CC2G: u1,
                ///  Capture/compare 3 generation
                CC3G: u1,
                ///  Capture/compare 4 generation
                CC4G: u1,
                ///  Capture/Compare control update generation
                COMG: u1,
                ///  Trigger generation
                TG: u1,
                ///  Break generation
                BG: u1,
                ///  Break 2 generation
                B2G: u1,
                padding: u23,
            }),
            ///  capture/compare mode register 1 (output mode)
            CCMR1_Output: mmio.Mmio(packed struct(u32) {
                ///  Capture/Compare 1 selection
                CC1S: u2,
                ///  Output Compare 1 fast enable
                OC1FE: u1,
                ///  Output Compare 1 preload enable
                OC1PE: u1,
                ///  Output Compare 1 mode
                OC1M: u3,
                ///  Output Compare 1 clear enable
                OC1CE: u1,
                ///  Capture/Compare 2 selection
                CC2S: u2,
                ///  Output Compare 2 fast enable
                OC2FE: u1,
                ///  Output Compare 2 preload enable
                OC2PE: u1,
                ///  Output Compare 2 mode
                OC2M: u3,
                ///  Output Compare 2 clear enable
                OC2CE: u1,
                ///  Output Compare 1 mode - bit 3
                OC1M_bit3: u1,
                reserved24: u7,
                ///  Output Compare 2 mode - bit 3
                OC2M_bit3: u1,
                padding: u7,
            }),
            ///  capture/compare mode register 2 (output mode)
            CCMR2_Output: mmio.Mmio(packed struct(u32) {
                ///  Capture/Compare 3 selection
                CC3S: u2,
                ///  Output compare 3 fast enable
                OC3FE: u1,
                ///  Output compare 3 preload enable
                OC3PE: u1,
                ///  Output compare 3 mode
                OC3M: u3,
                ///  Output compare 3 clear enable
                OC3CE: u1,
                ///  Capture/Compare 4 selection
                CC4S: u2,
                ///  Output compare 4 fast enable
                OC4FE: u1,
                ///  Output compare 4 preload enable
                OC4PE: u1,
                ///  Output compare 4 mode
                OC4M: u3,
                ///  Output compare 4 clear enable
                OC4CE: u1,
                ///  Output Compare 3 mode - bit 3
                OC3M_bit3: u1,
                reserved24: u7,
                ///  Output Compare 4 mode - bit 3
                OC4M_bit3: u1,
                padding: u7,
            }),
            ///  capture/compare enable register
            CCER: mmio.Mmio(packed struct(u32) {
                ///  Capture/Compare 1 output enable
                CC1E: u1,
                ///  Capture/Compare 1 output Polarity
                CC1P: u1,
                ///  Capture/Compare 1 complementary output enable
                CC1NE: u1,
                ///  Capture/Compare 1 output Polarity
                CC1NP: u1,
                ///  Capture/Compare 2 output enable
                CC2E: u1,
                ///  Capture/Compare 2 output Polarity
                CC2P: u1,
                ///  Capture/Compare 2 complementary output enable
                CC2NE: u1,
                ///  Capture/Compare 2 output Polarity
                CC2NP: u1,
                ///  Capture/Compare 3 output enable
                CC3E: u1,
                ///  Capture/Compare 3 output Polarity
                CC3P: u1,
                ///  Capture/Compare 3 complementary output enable
                CC3NE: u1,
                ///  Capture/Compare 3 output Polarity
                CC3NP: u1,
                ///  Capture/Compare 4 output enable
                CC4E: u1,
                ///  Capture/Compare 3 output Polarity
                CC4P: u1,
                reserved15: u1,
                ///  Capture/Compare 4 complementary output polarity
                CC4NP: u1,
                ///  Capture/Compare 5 output enable
                CC5E: u1,
                ///  Capture/Compare 5 output polarity
                CC5P: u1,
                reserved20: u2,
                ///  Capture/Compare 6 output enable
                CC6E: u1,
                ///  Capture/Compare 6 output polarity
                CC6P: u1,
                padding: u10,
            }),
            ///  counter
            CNT: mmio.Mmio(packed struct(u32) {
                ///  counter value
                CNT: u16,
                reserved31: u15,
                ///  UIF copy
                UIFCPY: u1,
            }),
            ///  prescaler
            PSC: mmio.Mmio(packed struct(u32) {
                ///  Prescaler value
                PSC: u16,
                padding: u16,
            }),
            ///  auto-reload register
            ARR: mmio.Mmio(packed struct(u32) {
                ///  Auto-reload value
                ARR: u16,
                padding: u16,
            }),
            ///  repetition counter register
            RCR: mmio.Mmio(packed struct(u32) {
                ///  Repetition counter value
                REP: u8,
                padding: u24,
            }),
            ///  capture/compare register 1
            CCR1: mmio.Mmio(packed struct(u32) {
                ///  Capture/Compare 1 value
                CCR1: u16,
                padding: u16,
            }),
            ///  capture/compare register 2
            CCR2: mmio.Mmio(packed struct(u32) {
                ///  Capture/Compare 2 value
                CCR2: u16,
                padding: u16,
            }),
            ///  capture/compare register 3
            CCR3: mmio.Mmio(packed struct(u32) {
                ///  Capture/Compare value
                CCR3: u16,
                padding: u16,
            }),
            ///  capture/compare register 4
            CCR4: mmio.Mmio(packed struct(u32) {
                ///  Capture/Compare value
                CCR4: u16,
                padding: u16,
            }),
            ///  break and dead-time register
            BDTR: mmio.Mmio(packed struct(u32) {
                ///  Dead-time generator setup
                DTG: u8,
                ///  Lock configuration
                LOCK: u2,
                ///  Off-state selection for Idle mode
                OSSI: u1,
                ///  Off-state selection for Run mode
                OSSR: u1,
                ///  Break enable
                BKE: u1,
                ///  Break polarity
                BKP: u1,
                ///  Automatic output enable
                AOE: u1,
                ///  Main output enable
                MOE: u1,
                ///  Break filter
                BKF: u4,
                ///  Break 2 filter
                BK2F: u4,
                ///  Break 2 enable
                BK2E: u1,
                ///  Break 2 polarity
                BK2P: u1,
                ///  Break Disarm
                BKDSRM: u1,
                ///  Break2 Disarm
                BK2DSRM: u1,
                ///  Break Bidirectional
                BKBID: u1,
                ///  Break2 bidirectional
                BK2BID: u1,
                padding: u2,
            }),
            ///  DMA control register
            DCR: mmio.Mmio(packed struct(u32) {
                ///  DMA base address
                DBA: u5,
                reserved8: u3,
                ///  DMA burst length
                DBL: u5,
                padding: u19,
            }),
            ///  DMA address for full transfer
            DMAR: mmio.Mmio(packed struct(u32) {
                ///  DMA register for burst accesses
                DMAB: u32,
            }),
            ///  DMA address for full transfer
            OR1: mmio.Mmio(packed struct(u32) {
                reserved4: u4,
                ///  Input Capture 1 remap
                TI1_RMP: u1,
                padding: u27,
            }),
            ///  capture/compare mode register 2 (output mode)
            CCMR3_Output: mmio.Mmio(packed struct(u32) {
                reserved2: u2,
                ///  Output compare 5 fast enable
                OC5FE: u1,
                ///  Output compare 5 preload enable
                OC5PE: u1,
                ///  Output compare 5 mode
                OC5M: u3,
                ///  Output compare 5 clear enable
                OC5CE: u1,
                reserved10: u2,
                ///  Output compare 6 fast enable
                OC6FE: u1,
                ///  Output compare 6 preload enable
                OC6PE: u1,
                ///  Output compare 6 mode
                OC6M: u3,
                ///  Output compare 6 clear enable
                OC6CE: u1,
                ///  Output Compare 5 mode bit 3
                OC5M_bit3: u3,
                reserved24: u5,
                ///  Output Compare 6 mode bit 3
                OC6M_bit3: u1,
                padding: u7,
            }),
            ///  capture/compare register 4
            CCR5: mmio.Mmio(packed struct(u32) {
                ///  Capture/Compare value
                CCR5: u16,
                reserved29: u13,
                ///  Group Channel 5 and Channel 1
                GC5C1: u1,
                ///  Group Channel 5 and Channel 2
                GC5C2: u1,
                ///  Group Channel 5 and Channel 3
                GC5C3: u1,
            }),
            ///  capture/compare register 4
            CCR6: mmio.Mmio(packed struct(u32) {
                ///  Capture/Compare value
                CCR6: u16,
                padding: u16,
            }),
            ///  DMA address for full transfer
            OR2: mmio.Mmio(packed struct(u32) {
                ///  BRK BKIN input enable
                BKINE: u1,
                ///  BRK COMP1 enable
                BKCMP1E: u1,
                ///  BRK COMP2 enable
                BKCMP2E: u1,
                reserved8: u5,
                ///  BRK dfsdm1_break[2] enable
                BKDF1BK2E: u1,
                ///  BRK BKIN input polarity
                BKINP: u1,
                ///  BRK COMP1 input polarity
                BKCMP1P: u1,
                ///  BRK COMP2 input polarity
                BKCMP2P: u1,
                reserved14: u2,
                ///  ETR source selection
                ETRSEL: u3,
                padding: u15,
            }),
            ///  DMA address for full transfer
            OR3: mmio.Mmio(packed struct(u32) {
                ///  BRK2 BKIN input enable
                BK2INE: u1,
                ///  BRK2 COMP1 enable
                BK2CMP1E: u1,
                ///  BRK2 COMP2 enable
                BK2CMP2E: u1,
                reserved8: u5,
                ///  BRK2 DFSDM_BREAK0 enable
                BK2DFBK3E: u1,
                ///  BRK2 BKIN input polarity
                BK2INP: u1,
                ///  BRK2 COMP1 input polarity
                BK2CMP1P: u1,
                ///  BRK2 COMP2 input polarity
                BK2CMP2P: u1,
                padding: u20,
            }),
        };

        ///  Low power timer
        pub const LPTIM1 = extern struct {
            ///  Interrupt and Status Register
            ISR: mmio.Mmio(packed struct(u32) {
                ///  Compare match
                CMPM: u1,
                ///  Autoreload match
                ARRM: u1,
                ///  External trigger edge event
                EXTTRIG: u1,
                ///  Compare register update OK
                CMPOK: u1,
                ///  Autoreload register update OK
                ARROK: u1,
                ///  Counter direction change down to up
                UP: u1,
                ///  Counter direction change up to down
                DOWN: u1,
                ///  LPTIM update event occurred
                UE: u1,
                ///  Repetition register update Ok
                REPOK: u1,
                padding: u23,
            }),
            ///  Interrupt Clear Register
            ICR: mmio.Mmio(packed struct(u32) {
                ///  compare match Clear Flag
                CMPMCF: u1,
                ///  Autoreload match Clear Flag
                ARRMCF: u1,
                ///  External trigger valid edge Clear Flag
                EXTTRIGCF: u1,
                ///  Compare register update OK Clear Flag
                CMPOKCF: u1,
                ///  Autoreload register update OK Clear Flag
                ARROKCF: u1,
                ///  Direction change to UP Clear Flag
                UPCF: u1,
                ///  Direction change to down Clear Flag
                DOWNCF: u1,
                ///  Update event clear flag
                UECF: u1,
                ///  Repetition register update OK clear flag
                REPOKCF: u1,
                padding: u23,
            }),
            ///  Interrupt Enable Register
            IER: mmio.Mmio(packed struct(u32) {
                ///  Compare match Interrupt Enable
                CMPMIE: u1,
                ///  Autoreload match Interrupt Enable
                ARRMIE: u1,
                ///  External trigger valid edge Interrupt Enable
                EXTTRIGIE: u1,
                ///  Compare register update OK Interrupt Enable
                CMPOKIE: u1,
                ///  Autoreload register update OK Interrupt Enable
                ARROKIE: u1,
                ///  Direction change to UP Interrupt Enable
                UPIE: u1,
                ///  Direction change to down Interrupt Enable
                DOWNIE: u1,
                ///  Update event interrupt enable
                UEIE: u1,
                ///  REPOKIE
                REPOKIE: u1,
                padding: u23,
            }),
            ///  Configuration Register
            CFGR: mmio.Mmio(packed struct(u32) {
                ///  Clock selector
                CKSEL: u1,
                ///  Clock Polarity
                CKPOL: u2,
                ///  Configurable digital filter for external clock
                CKFLT: u2,
                reserved6: u1,
                ///  Configurable digital filter for trigger
                TRGFLT: u2,
                reserved9: u1,
                ///  Clock prescaler
                PRESC: u3,
                reserved13: u1,
                ///  Trigger selector
                TRIGSEL: u3,
                reserved17: u1,
                ///  Trigger enable and polarity
                TRIGEN: u2,
                ///  Timeout enable
                TIMOUT: u1,
                ///  Waveform shape
                WAVE: u1,
                ///  Waveform shape polarity
                WAVPOL: u1,
                ///  Registers update mode
                PRELOAD: u1,
                ///  counter mode enabled
                COUNTMODE: u1,
                ///  Encoder mode enable
                ENC: u1,
                padding: u7,
            }),
            ///  Control Register
            CR: mmio.Mmio(packed struct(u32) {
                ///  LPTIM Enable
                ENABLE: u1,
                ///  LPTIM start in single mode
                SNGSTRT: u1,
                ///  Timer start in continuous mode
                CNTSTRT: u1,
                ///  Reset after read enable
                RSTARE: u1,
                ///  Counter reset
                COUNTRST: u1,
                padding: u27,
            }),
            ///  Compare Register
            CMP: mmio.Mmio(packed struct(u32) {
                ///  Compare value
                CMP: u16,
                padding: u16,
            }),
            ///  Autoreload Register
            ARR: mmio.Mmio(packed struct(u32) {
                ///  Auto reload value
                ARR: u16,
                padding: u16,
            }),
            ///  Counter Register
            CNT: mmio.Mmio(packed struct(u32) {
                ///  Counter value
                CNT: u16,
                padding: u16,
            }),
            ///  LPTIM option register
            OR: mmio.Mmio(packed struct(u32) {
                ///  Option register bit 0
                OR_0: u1,
                ///  Option register bit 1
                OR_1: u1,
                padding: u30,
            }),
            reserved40: [4]u8,
            ///  LPTIM repetition register
            RCR: mmio.Mmio(packed struct(u32) {
                ///  Repetition register value
                REP: u8,
                padding: u24,
            }),
        };

        ///  Universal synchronous asynchronous receiver transmitter
        pub const USART1 = extern struct {
            ///  Control register 1
            CR1: mmio.Mmio(packed struct(u32) {
                ///  USART enable
                UE: u1,
                ///  USART enable in Stop mode
                UESM: u1,
                ///  Receiver enable
                RE: u1,
                ///  Transmitter enable
                TE: u1,
                ///  IDLE interrupt enable
                IDLEIE: u1,
                ///  RXNE interrupt enable
                RXNEIE: u1,
                ///  Transmission complete interrupt enable
                TCIE: u1,
                ///  interrupt enable
                TXEIE: u1,
                ///  PE interrupt enable
                PEIE: u1,
                ///  Parity selection
                PS: u1,
                ///  Parity control enable
                PCE: u1,
                ///  Receiver wakeup method
                WAKE: u1,
                ///  Word length
                M0: u1,
                ///  Mute mode enable
                MME: u1,
                ///  Character match interrupt enable
                CMIE: u1,
                ///  Oversampling mode
                OVER8: u1,
                ///  DEDT0
                DEDT0: u1,
                ///  DEDT1
                DEDT1: u1,
                ///  DEDT2
                DEDT2: u1,
                ///  DEDT3
                DEDT3: u1,
                ///  Driver Enable de-assertion time
                DEDT4: u1,
                ///  DEAT0
                DEAT0: u1,
                ///  DEAT1
                DEAT1: u1,
                ///  DEAT2
                DEAT2: u1,
                ///  DEAT3
                DEAT3: u1,
                ///  Driver Enable assertion time
                DEAT4: u1,
                ///  Receiver timeout interrupt enable
                RTOIE: u1,
                ///  End of Block interrupt enable
                EOBIE: u1,
                ///  Word length
                M1: u1,
                ///  FIFOEN
                FIFOEN: u1,
                ///  TXFEIE
                TXFEIE: u1,
                ///  RXFFIE
                RXFFIE: u1,
            }),
            ///  Control register 2
            CR2: mmio.Mmio(packed struct(u32) {
                ///  SLVEN
                SLVEN: u1,
                reserved3: u2,
                ///  DIS_NSS
                DIS_NSS: u1,
                ///  7-bit Address Detection/4-bit Address Detection
                ADDM7: u1,
                ///  LIN break detection length
                LBDL: u1,
                ///  LIN break detection interrupt enable
                LBDIE: u1,
                reserved8: u1,
                ///  Last bit clock pulse
                LBCL: u1,
                ///  Clock phase
                CPHA: u1,
                ///  Clock polarity
                CPOL: u1,
                ///  Clock enable
                CLKEN: u1,
                ///  STOP bits
                STOP: u2,
                ///  LIN mode enable
                LINEN: u1,
                ///  Swap TX/RX pins
                SWAP: u1,
                ///  RX pin active level inversion
                RXINV: u1,
                ///  TX pin active level inversion
                TXINV: u1,
                ///  Binary data inversion
                DATAINV: u1,
                ///  Most significant bit first
                MSBFIRST: u1,
                ///  Auto baud rate enable
                ABREN: u1,
                ///  ABRMOD0
                ABRMOD0: u1,
                ///  Auto baud rate mode
                ABRMOD1: u1,
                ///  Receiver timeout enable
                RTOEN: u1,
                ///  Address of the USART node
                ADD0_3: u4,
                ///  Address of the USART node
                ADD4_7: u4,
            }),
            ///  Control register 3
            CR3: mmio.Mmio(packed struct(u32) {
                ///  Error interrupt enable
                EIE: u1,
                ///  Ir mode enable
                IREN: u1,
                ///  Ir low-power
                IRLP: u1,
                ///  Half-duplex selection
                HDSEL: u1,
                ///  Smartcard NACK enable
                NACK: u1,
                ///  Smartcard mode enable
                SCEN: u1,
                ///  DMA enable receiver
                DMAR: u1,
                ///  DMA enable transmitter
                DMAT: u1,
                ///  RTS enable
                RTSE: u1,
                ///  CTS enable
                CTSE: u1,
                ///  CTS interrupt enable
                CTSIE: u1,
                ///  One sample bit method enable
                ONEBIT: u1,
                ///  Overrun Disable
                OVRDIS: u1,
                ///  DMA Disable on Reception Error
                DDRE: u1,
                ///  Driver enable mode
                DEM: u1,
                ///  Driver enable polarity selection
                DEP: u1,
                reserved17: u1,
                ///  Smartcard auto-retry count
                SCARCNT: u3,
                ///  Wakeup from Stop mode interrupt flag selection
                WUS: u2,
                ///  Wakeup from Stop mode interrupt enable
                WUFIE: u1,
                ///  TXFTIE
                TXFTIE: u1,
                ///  TCBGTIE
                TCBGTIE: u1,
                ///  RXFTCFG
                RXFTCFG: u3,
                ///  RXFTIE
                RXFTIE: u1,
                ///  TXFTCFG
                TXFTCFG: u3,
            }),
            ///  Baud rate register
            BRR: mmio.Mmio(packed struct(u32) {
                ///  BRR
                BRR: u16,
                padding: u16,
            }),
            ///  Guard time and prescaler register
            GTPR: mmio.Mmio(packed struct(u32) {
                ///  Prescaler value
                PSC: u8,
                ///  Guard time value
                GT: u8,
                padding: u16,
            }),
            ///  Receiver timeout register
            RTOR: mmio.Mmio(packed struct(u32) {
                ///  Receiver timeout value
                RTO: u24,
                ///  Block Length
                BLEN: u8,
            }),
            ///  Request register
            RQR: mmio.Mmio(packed struct(u32) {
                ///  Auto baud rate request
                ABRRQ: u1,
                ///  Send break request
                SBKRQ: u1,
                ///  Mute mode request
                MMRQ: u1,
                ///  Receive data flush request
                RXFRQ: u1,
                ///  Transmit data flush request
                TXFRQ: u1,
                padding: u27,
            }),
            ///  Interrupt & status register
            ISR: mmio.Mmio(packed struct(u32) {
                ///  PE
                PE: u1,
                ///  FE
                FE: u1,
                ///  NF
                NF: u1,
                ///  ORE
                ORE: u1,
                ///  IDLE
                IDLE: u1,
                ///  RXNE
                RXNE: u1,
                ///  TC
                TC: u1,
                ///  TXE
                TXE: u1,
                ///  LBDF
                LBDF: u1,
                ///  CTSIF
                CTSIF: u1,
                ///  CTS
                CTS: u1,
                ///  RTOF
                RTOF: u1,
                ///  EOBF
                EOBF: u1,
                reserved14: u1,
                ///  ABRE
                ABRE: u1,
                ///  ABRF
                ABRF: u1,
                ///  BUSY
                BUSY: u1,
                ///  CMF
                CMF: u1,
                ///  SBKF
                SBKF: u1,
                ///  RWU
                RWU: u1,
                ///  WUF
                WUF: u1,
                ///  TEACK
                TEACK: u1,
                ///  REACK
                REACK: u1,
                ///  TXFE
                TXFE: u1,
                ///  RXFF
                RXFF: u1,
                ///  TCBGT
                TCBGT: u1,
                ///  RXFT
                RXFT: u1,
                ///  TXFT
                TXFT: u1,
                padding: u4,
            }),
            ///  Interrupt flag clear register
            ICR: mmio.Mmio(packed struct(u32) {
                ///  Parity error clear flag
                PECF: u1,
                ///  Framing error clear flag
                FECF: u1,
                ///  Noise detected clear flag
                NCF: u1,
                ///  Overrun error clear flag
                ORECF: u1,
                ///  Idle line detected clear flag
                IDLECF: u1,
                ///  TXFECF
                TXFECF: u1,
                ///  Transmission complete clear flag
                TCCF: u1,
                ///  TCBGTCF
                TCBGTCF: u1,
                ///  LIN break detection clear flag
                LBDCF: u1,
                ///  CTS clear flag
                CTSCF: u1,
                reserved11: u1,
                ///  Receiver timeout clear flag
                RTOCF: u1,
                ///  End of block clear flag
                EOBCF: u1,
                ///  UDRCF
                UDRCF: u1,
                reserved17: u3,
                ///  Character match clear flag
                CMCF: u1,
                reserved20: u2,
                ///  Wakeup from Stop mode clear flag
                WUCF: u1,
                padding: u11,
            }),
            ///  Receive data register
            RDR: mmio.Mmio(packed struct(u32) {
                ///  Receive data value
                RDR: u9,
                padding: u23,
            }),
            ///  Transmit data register
            TDR: mmio.Mmio(packed struct(u32) {
                ///  Transmit data value
                TDR: u9,
                padding: u23,
            }),
            ///  PRESC
            PRESC: mmio.Mmio(packed struct(u32) {
                ///  PRESCALER
                PRESCALER: u4,
                padding: u28,
            }),
        };

        ///  General-purpose-timers
        pub const TIM4 = extern struct {
            ///  control register 1
            CR1: mmio.Mmio(packed struct(u32) {
                ///  Counter enable
                CEN: u1,
                ///  Update disable
                UDIS: u1,
                ///  Update request source
                URS: u1,
                ///  One-pulse mode
                OPM: u1,
                ///  Direction
                DIR: u1,
                ///  Center-aligned mode selection
                CMS: u2,
                ///  Auto-reload preload enable
                ARPE: u1,
                ///  Clock division
                CKD: u2,
                reserved11: u1,
                ///  UIF status bit remapping
                UIFREMAP: u1,
                padding: u20,
            }),
            ///  control register 2
            CR2: mmio.Mmio(packed struct(u32) {
                reserved3: u3,
                ///  Capture/compare DMA selection
                CCDS: u1,
                ///  Master mode selection
                MMS: u3,
                ///  TI1 selection
                TI1S: u1,
                padding: u24,
            }),
            ///  slave mode control register
            SMCR: mmio.Mmio(packed struct(u32) {
                ///  Slave mode selection
                SMS: u3,
                reserved4: u1,
                ///  Trigger selection
                TS: u3,
                ///  Master/Slave mode
                MSM: u1,
                ///  External trigger filter
                ETF: u4,
                ///  External trigger prescaler
                ETPS: u2,
                ///  External clock enable
                ECE: u1,
                ///  External trigger polarity
                ETP: u1,
                ///  Slave mode selection - bit 3
                SMS_bit3: u1,
                padding: u15,
            }),
            ///  DMA/Interrupt enable register
            DIER: mmio.Mmio(packed struct(u32) {
                ///  Update interrupt enable
                UIE: u1,
                ///  Capture/Compare 1 interrupt enable
                CC1IE: u1,
                ///  Capture/Compare 2 interrupt enable
                CC2IE: u1,
                ///  Capture/Compare 3 interrupt enable
                CC3IE: u1,
                ///  Capture/Compare 4 interrupt enable
                CC4IE: u1,
                reserved6: u1,
                ///  Trigger interrupt enable
                TIE: u1,
                reserved8: u1,
                ///  Update DMA request enable
                UDE: u1,
                ///  Capture/Compare 1 DMA request enable
                CC1DE: u1,
                ///  Capture/Compare 2 DMA request enable
                CC2DE: u1,
                ///  Capture/Compare 3 DMA request enable
                CC3DE: u1,
                ///  Capture/Compare 4 DMA request enable
                CC4DE: u1,
                reserved14: u1,
                ///  Trigger DMA request enable
                TDE: u1,
                padding: u17,
            }),
            ///  status register
            SR: mmio.Mmio(packed struct(u32) {
                ///  Update interrupt flag
                UIF: u1,
                ///  Capture/compare 1 interrupt flag
                CC1IF: u1,
                ///  Capture/Compare 2 interrupt flag
                CC2IF: u1,
                ///  Capture/Compare 3 interrupt flag
                CC3IF: u1,
                ///  Capture/Compare 4 interrupt flag
                CC4IF: u1,
                reserved6: u1,
                ///  Trigger interrupt flag
                TIF: u1,
                reserved9: u2,
                ///  Capture/Compare 1 overcapture flag
                CC1OF: u1,
                ///  Capture/compare 2 overcapture flag
                CC2OF: u1,
                ///  Capture/Compare 3 overcapture flag
                CC3OF: u1,
                ///  Capture/Compare 4 overcapture flag
                CC4OF: u1,
                padding: u19,
            }),
            ///  event generation register
            EGR: mmio.Mmio(packed struct(u32) {
                ///  Update generation
                UG: u1,
                ///  Capture/compare 1 generation
                CC1G: u1,
                ///  Capture/compare 2 generation
                CC2G: u1,
                ///  Capture/compare 3 generation
                CC3G: u1,
                ///  Capture/compare 4 generation
                CC4G: u1,
                reserved6: u1,
                ///  Trigger generation
                TG: u1,
                padding: u25,
            }),
            ///  capture/compare mode register 1 (output mode)
            CCMR1_Output: mmio.Mmio(packed struct(u32) {
                ///  Capture/Compare 1 selection
                CC1S: u2,
                ///  Output compare 1 fast enable
                OC1FE: u1,
                ///  Output compare 1 preload enable
                OC1PE: u1,
                ///  Output compare 1 mode
                OC1M: u3,
                ///  Output compare 1 clear enable
                OC1CE: u1,
                ///  Capture/Compare 2 selection
                CC2S: u2,
                ///  Output compare 2 fast enable
                OC2FE: u1,
                ///  Output compare 2 preload enable
                OC2PE: u1,
                ///  Output compare 2 mode
                OC2M: u3,
                ///  Output compare 2 clear enable
                OC2CE: u1,
                ///  Output Compare 1 mode - bit 3
                OC1M_bit3: u1,
                reserved24: u7,
                ///  Output Compare 2 mode - bit 3
                OC2M_bit3: u1,
                padding: u7,
            }),
            ///  capture/compare mode register 2 (output mode)
            CCMR2_Output: mmio.Mmio(packed struct(u32) {
                ///  Capture/Compare 3 selection
                CC3S: u2,
                ///  Output compare 3 fast enable
                OC3FE: u1,
                ///  Output compare 3 preload enable
                OC3PE: u1,
                ///  Output compare 3 mode
                OC3M: u3,
                ///  Output compare 3 clear enable
                OC3CE: u1,
                ///  Capture/Compare 4 selection
                CC4S: u2,
                ///  Output compare 4 fast enable
                OC4FE: u1,
                ///  Output compare 4 preload enable
                OC4PE: u1,
                ///  Output compare 4 mode
                OC4M: u3,
                ///  Output compare 4 clear enable
                OC4CE: u1,
                ///  Output Compare 1 mode - bit 3
                OC3M_bit3: u1,
                reserved24: u7,
                ///  Output Compare 2 mode - bit 3
                OC4M_bit3: u1,
                padding: u7,
            }),
            ///  capture/compare enable register
            CCER: mmio.Mmio(packed struct(u32) {
                ///  Capture/Compare 1 output enable
                CC1E: u1,
                ///  Capture/Compare 1 output Polarity
                CC1P: u1,
                reserved3: u1,
                ///  Capture/Compare 1 output Polarity
                CC1NP: u1,
                ///  Capture/Compare 2 output enable
                CC2E: u1,
                ///  Capture/Compare 2 output Polarity
                CC2P: u1,
                reserved7: u1,
                ///  Capture/Compare 2 output Polarity
                CC2NP: u1,
                ///  Capture/Compare 3 output enable
                CC3E: u1,
                ///  Capture/Compare 3 output Polarity
                CC3P: u1,
                reserved11: u1,
                ///  Capture/Compare 3 output Polarity
                CC3NP: u1,
                ///  Capture/Compare 4 output enable
                CC4E: u1,
                ///  Capture/Compare 3 output Polarity
                CC4P: u1,
                reserved15: u1,
                ///  Capture/Compare 4 output Polarity
                CC4NP: u1,
                padding: u16,
            }),
            ///  counter
            CNT: mmio.Mmio(packed struct(u32) {
                ///  Least significant part of counter value
                CNT_L: u16,
                ///  Most significant part counter value (on TIM2 and TIM5)
                CNT_H: u15,
                ///  Most significant bit of counter value (on TIM2 and TIM5)
                CNT_bit31: u1,
            }),
            ///  prescaler
            PSC: mmio.Mmio(packed struct(u32) {
                ///  Prescaler value
                PSC: u16,
                padding: u16,
            }),
            ///  auto-reload register
            ARR: mmio.Mmio(packed struct(u32) {
                ///  Low Auto-reload value
                ARR_L: u16,
                ///  High Auto-reload value (TIM2 only)
                ARR_H: u16,
            }),
            reserved52: [4]u8,
            ///  capture/compare register 1
            CCR1: mmio.Mmio(packed struct(u32) {
                ///  Low Capture/Compare 1 value
                CCR1_L: u16,
                ///  High Capture/Compare 1 value (TIM2 only)
                CCR1_H: u16,
            }),
            ///  capture/compare register 2
            CCR2: mmio.Mmio(packed struct(u32) {
                ///  Low Capture/Compare 2 value
                CCR2_L: u16,
                ///  High Capture/Compare 2 value (TIM2 only)
                CCR2_H: u16,
            }),
            ///  capture/compare register 3
            CCR3: mmio.Mmio(packed struct(u32) {
                ///  Low Capture/Compare value
                CCR3_L: u16,
                ///  High Capture/Compare value (TIM2 only)
                CCR3_H: u16,
            }),
            ///  capture/compare register 4
            CCR4: mmio.Mmio(packed struct(u32) {
                ///  Low Capture/Compare value
                CCR4_L: u16,
                ///  High Capture/Compare value (TIM2 only)
                CCR4_H: u16,
            }),
            reserved72: [4]u8,
            ///  DMA control register
            DCR: mmio.Mmio(packed struct(u32) {
                ///  DMA base address
                DBA: u5,
                reserved8: u3,
                ///  DMA burst length
                DBL: u5,
                padding: u19,
            }),
            ///  DMA address for full transfer
            DMAR: mmio.Mmio(packed struct(u32) {
                ///  Low Capture/Compare 2 value
                DMAB: u16,
                padding: u16,
            }),
        };

        ///  Clock recovery system
        pub const CRS = extern struct {
            ///  control register
            CR: mmio.Mmio(packed struct(u32) {
                ///  SYNC event OK interrupt enable
                SYNCOKIE: u1,
                ///  SYNC warning interrupt enable
                SYNCWARNIE: u1,
                ///  Synchronization or trimming error interrupt enable
                ERRIE: u1,
                ///  Expected SYNC interrupt enable
                ESYNCIE: u1,
                reserved5: u1,
                ///  Frequency error counter enable
                CEN: u1,
                ///  Automatic trimming enable
                AUTOTRIMEN: u1,
                ///  Generate software SYNC event
                SWSYNC: u1,
                ///  HSI48 oscillator smooth trimming
                TRIM: u7,
                padding: u17,
            }),
            ///  configuration register
            CFGR: mmio.Mmio(packed struct(u32) {
                ///  Counter reload value
                RELOAD: u16,
                ///  Frequency error limit
                FELIM: u8,
                ///  SYNC divider
                SYNCDIV: u3,
                reserved28: u1,
                ///  SYNC signal source selection
                SYNCSRC: u2,
                reserved31: u1,
                ///  SYNC polarity selection
                SYNCPOL: u1,
            }),
            ///  interrupt and status register
            ISR: mmio.Mmio(packed struct(u32) {
                ///  SYNC event OK flag
                SYNCOKF: u1,
                ///  SYNC warning flag
                SYNCWARNF: u1,
                ///  Error flag
                ERRF: u1,
                ///  Expected SYNC flag
                ESYNCF: u1,
                reserved8: u4,
                ///  SYNC error
                SYNCERR: u1,
                ///  SYNC missed
                SYNCMISS: u1,
                ///  Trimming overflow or underflow
                TRIMOVF: u1,
                reserved15: u4,
                ///  Frequency error direction
                FEDIR: u1,
                ///  Frequency error capture
                FECAP: u16,
            }),
            ///  interrupt flag clear register
            ICR: mmio.Mmio(packed struct(u32) {
                ///  SYNC event OK clear flag
                SYNCOKC: u1,
                ///  SYNC warning clear flag
                SYNCWARNC: u1,
                ///  Error clear flag
                ERRC: u1,
                ///  Expected SYNC clear flag
                ESYNCC: u1,
                padding: u28,
            }),
        };

        ///  System window watchdog
        pub const WWDG = extern struct {
            ///  Control register
            CR: mmio.Mmio(packed struct(u32) {
                ///  7-bit counter (MSB to LSB)
                T: u7,
                ///  Activation bit
                WDGA: u1,
                padding: u24,
            }),
            ///  Configuration register
            CFR: mmio.Mmio(packed struct(u32) {
                ///  7-bit window value
                W: u7,
                ///  Timer base
                WDGTB: u2,
                ///  Early wakeup interrupt
                EWI: u1,
                padding: u22,
            }),
            ///  Status register
            SR: mmio.Mmio(packed struct(u32) {
                ///  Early wakeup interrupt flag
                EWIF: u1,
                padding: u31,
            }),
        };

        ///  Cyclic redundancy check calculation unit
        pub const CRC = extern struct {
            ///  Data register
            DR: mmio.Mmio(packed struct(u32) {
                ///  Data register bits
                DR: u32,
            }),
            ///  Independent data register
            IDR: mmio.Mmio(packed struct(u32) {
                ///  General-purpose 8-bit data register bits
                IDR: u8,
                padding: u24,
            }),
            ///  Control register
            CR: mmio.Mmio(packed struct(u32) {
                ///  RESET bit
                RESET: u1,
                reserved3: u2,
                ///  Polynomial size
                POLYSIZE: u2,
                ///  Reverse input data
                REV_IN: u2,
                ///  Reverse output data
                REV_OUT: u1,
                padding: u24,
            }),
            reserved16: [4]u8,
            ///  Initial CRC value
            INIT: mmio.Mmio(packed struct(u32) {
                ///  Programmable initial CRC value
                CRC_INIT: u32,
            }),
            ///  polynomial
            POL: mmio.Mmio(packed struct(u32) {
                ///  Programmable polynomial
                Polynomialcoefficients: u32,
            }),
        };

        ///  GTZC_MPCBB1
        pub const GTZC_MPCBB1 = extern struct {
            ///  MPCBB control register
            MPCBB1_CR: mmio.Mmio(packed struct(u32) {
                ///  LCK
                LCK: u1,
                reserved30: u29,
                ///  INVSECSTATE
                INVSECSTATE: u1,
                ///  SRWILADIS
                SRWILADIS: u1,
            }),
            reserved16: [12]u8,
            ///  MPCBB control register
            MPCBB1_LCKVTR1: mmio.Mmio(packed struct(u32) {
                ///  LCKSB0
                LCKSB0: u1,
                ///  LCKSB1
                LCKSB1: u1,
                ///  LCKSB2
                LCKSB2: u1,
                ///  LCKSB3
                LCKSB3: u1,
                ///  LCKSB4
                LCKSB4: u1,
                ///  LCKSB5
                LCKSB5: u1,
                ///  LCKSB6
                LCKSB6: u1,
                ///  LCKSB7
                LCKSB7: u1,
                ///  LCKSB8
                LCKSB8: u1,
                ///  LCKSB9
                LCKSB9: u1,
                ///  LCKSB10
                LCKSB10: u1,
                ///  LCKSB11
                LCKSB11: u1,
                ///  LCKSB12
                LCKSB12: u1,
                ///  LCKSB13
                LCKSB13: u1,
                ///  LCKSB14
                LCKSB14: u1,
                ///  LCKSB15
                LCKSB15: u1,
                ///  LCKSB16
                LCKSB16: u1,
                ///  LCKSB17
                LCKSB17: u1,
                ///  LCKSB18
                LCKSB18: u1,
                ///  LCKSB19
                LCKSB19: u1,
                ///  LCKSB20
                LCKSB20: u1,
                ///  LCKSB21
                LCKSB21: u1,
                ///  LCKSB22
                LCKSB22: u1,
                ///  LCKSB23
                LCKSB23: u1,
                ///  LCKSB24
                LCKSB24: u1,
                ///  LCKSB25
                LCKSB25: u1,
                ///  LCKSB26
                LCKSB26: u1,
                ///  LCKSB27
                LCKSB27: u1,
                ///  LCKSB28
                LCKSB28: u1,
                ///  LCKSB29
                LCKSB29: u1,
                ///  LCKSB30
                LCKSB30: u1,
                ///  LCKSB31
                LCKSB31: u1,
            }),
            ///  MPCBB control register
            MPCBB1_LCKVTR2: mmio.Mmio(packed struct(u32) {
                ///  LCKSB32
                LCKSB32: u1,
                ///  LCKSB33
                LCKSB33: u1,
                ///  LCKSB34
                LCKSB34: u1,
                ///  LCKSB35
                LCKSB35: u1,
                ///  LCKSB36
                LCKSB36: u1,
                ///  LCKSB37
                LCKSB37: u1,
                ///  LCKSB38
                LCKSB38: u1,
                ///  LCKSB39
                LCKSB39: u1,
                ///  LCKSB40
                LCKSB40: u1,
                ///  LCKSB41
                LCKSB41: u1,
                ///  LCKSB42
                LCKSB42: u1,
                ///  LCKSB43
                LCKSB43: u1,
                ///  LCKSB44
                LCKSB44: u1,
                ///  LCKSB45
                LCKSB45: u1,
                ///  LCKSB46
                LCKSB46: u1,
                ///  LCKSB47
                LCKSB47: u1,
                ///  LCKSB48
                LCKSB48: u1,
                ///  LCKSB49
                LCKSB49: u1,
                ///  LCKSB50
                LCKSB50: u1,
                ///  LCKSB51
                LCKSB51: u1,
                ///  LCKSB52
                LCKSB52: u1,
                ///  LCKSB53
                LCKSB53: u1,
                ///  LCKSB54
                LCKSB54: u1,
                ///  LCKSB55
                LCKSB55: u1,
                ///  LCKSB56
                LCKSB56: u1,
                ///  LCKSB57
                LCKSB57: u1,
                ///  LCKSB58
                LCKSB58: u1,
                ///  LCKSB59
                LCKSB59: u1,
                ///  LCKSB60
                LCKSB60: u1,
                ///  LCKSB61
                LCKSB61: u1,
                ///  LCKSB62
                LCKSB62: u1,
                ///  LCKSB63
                LCKSB63: u1,
            }),
            reserved256: [232]u8,
            ///  MPCBBx vector register
            MPCBB1_VCTR0: mmio.Mmio(packed struct(u32) {
                ///  B0
                B0: u1,
                ///  B1
                B1: u1,
                ///  B2
                B2: u1,
                ///  B3
                B3: u1,
                ///  B4
                B4: u1,
                ///  B5
                B5: u1,
                ///  B6
                B6: u1,
                ///  B7
                B7: u1,
                ///  B8
                B8: u1,
                ///  B9
                B9: u1,
                ///  B10
                B10: u1,
                ///  B11
                B11: u1,
                ///  B12
                B12: u1,
                ///  B13
                B13: u1,
                ///  B14
                B14: u1,
                ///  B15
                B15: u1,
                ///  B16
                B16: u1,
                ///  B17
                B17: u1,
                ///  B18
                B18: u1,
                ///  B19
                B19: u1,
                ///  B20
                B20: u1,
                ///  B21
                B21: u1,
                ///  B22
                B22: u1,
                ///  B23
                B23: u1,
                ///  B24
                B24: u1,
                ///  B25
                B25: u1,
                ///  B26
                B26: u1,
                ///  B27
                B27: u1,
                ///  B28
                B28: u1,
                ///  B29
                B29: u1,
                ///  B30
                B30: u1,
                ///  B31
                B31: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR1: mmio.Mmio(packed struct(u32) {
                ///  B32
                B32: u1,
                ///  B33
                B33: u1,
                ///  B34
                B34: u1,
                ///  B35
                B35: u1,
                ///  B36
                B36: u1,
                ///  B37
                B37: u1,
                ///  B38
                B38: u1,
                ///  B39
                B39: u1,
                ///  B40
                B40: u1,
                ///  B41
                B41: u1,
                ///  B42
                B42: u1,
                ///  B43
                B43: u1,
                ///  B44
                B44: u1,
                ///  B45
                B45: u1,
                ///  B46
                B46: u1,
                ///  B47
                B47: u1,
                ///  B48
                B48: u1,
                ///  B49
                B49: u1,
                ///  B50
                B50: u1,
                ///  B51
                B51: u1,
                ///  B52
                B52: u1,
                ///  B53
                B53: u1,
                ///  B54
                B54: u1,
                ///  B55
                B55: u1,
                ///  B56
                B56: u1,
                ///  B57
                B57: u1,
                ///  B58
                B58: u1,
                ///  B59
                B59: u1,
                ///  B60
                B60: u1,
                ///  B61
                B61: u1,
                ///  B62
                B62: u1,
                ///  B63
                B63: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR2: mmio.Mmio(packed struct(u32) {
                ///  B64
                B64: u1,
                ///  B65
                B65: u1,
                ///  B66
                B66: u1,
                ///  B67
                B67: u1,
                ///  B68
                B68: u1,
                ///  B69
                B69: u1,
                ///  B70
                B70: u1,
                ///  B71
                B71: u1,
                ///  B72
                B72: u1,
                ///  B73
                B73: u1,
                ///  B74
                B74: u1,
                ///  B75
                B75: u1,
                ///  B76
                B76: u1,
                ///  B77
                B77: u1,
                ///  B78
                B78: u1,
                ///  B79
                B79: u1,
                ///  B80
                B80: u1,
                ///  B81
                B81: u1,
                ///  B82
                B82: u1,
                ///  B83
                B83: u1,
                ///  B84
                B84: u1,
                ///  B85
                B85: u1,
                ///  B86
                B86: u1,
                ///  B87
                B87: u1,
                ///  B88
                B88: u1,
                ///  B89
                B89: u1,
                ///  B90
                B90: u1,
                ///  B91
                B91: u1,
                ///  B92
                B92: u1,
                ///  B93
                B93: u1,
                ///  B94
                B94: u1,
                ///  B95
                B95: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR3: mmio.Mmio(packed struct(u32) {
                ///  B96
                B96: u1,
                ///  B97
                B97: u1,
                ///  B98
                B98: u1,
                ///  B99
                B99: u1,
                ///  B100
                B100: u1,
                ///  B101
                B101: u1,
                ///  B102
                B102: u1,
                ///  B103
                B103: u1,
                ///  B104
                B104: u1,
                ///  B105
                B105: u1,
                ///  B106
                B106: u1,
                ///  B107
                B107: u1,
                ///  B108
                B108: u1,
                ///  B109
                B109: u1,
                ///  B110
                B110: u1,
                ///  B111
                B111: u1,
                ///  B112
                B112: u1,
                ///  B113
                B113: u1,
                ///  B114
                B114: u1,
                ///  B115
                B115: u1,
                ///  B116
                B116: u1,
                ///  B117
                B117: u1,
                ///  B118
                B118: u1,
                ///  B119
                B119: u1,
                ///  B120
                B120: u1,
                ///  B121
                B121: u1,
                ///  B122
                B122: u1,
                ///  B123
                B123: u1,
                ///  B124
                B124: u1,
                ///  B125
                B125: u1,
                ///  B126
                B126: u1,
                ///  B127
                B127: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR4: mmio.Mmio(packed struct(u32) {
                ///  B128
                B128: u1,
                ///  B129
                B129: u1,
                ///  B130
                B130: u1,
                ///  B131
                B131: u1,
                ///  B132
                B132: u1,
                ///  B133
                B133: u1,
                ///  B134
                B134: u1,
                ///  B135
                B135: u1,
                ///  B136
                B136: u1,
                ///  B137
                B137: u1,
                ///  B138
                B138: u1,
                ///  B139
                B139: u1,
                ///  B140
                B140: u1,
                ///  B141
                B141: u1,
                ///  B142
                B142: u1,
                ///  B143
                B143: u1,
                ///  B144
                B144: u1,
                ///  B145
                B145: u1,
                ///  B146
                B146: u1,
                ///  B147
                B147: u1,
                ///  B148
                B148: u1,
                ///  B149
                B149: u1,
                ///  B150
                B150: u1,
                ///  B151
                B151: u1,
                ///  B152
                B152: u1,
                ///  B153
                B153: u1,
                ///  B154
                B154: u1,
                ///  B155
                B155: u1,
                ///  B156
                B156: u1,
                ///  B157
                B157: u1,
                ///  B158
                B158: u1,
                ///  B159
                B159: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR5: mmio.Mmio(packed struct(u32) {
                ///  B160
                B160: u1,
                ///  B161
                B161: u1,
                ///  B162
                B162: u1,
                ///  B163
                B163: u1,
                ///  B164
                B164: u1,
                ///  B165
                B165: u1,
                ///  B166
                B166: u1,
                ///  B167
                B167: u1,
                ///  B168
                B168: u1,
                ///  B169
                B169: u1,
                ///  B170
                B170: u1,
                ///  B171
                B171: u1,
                ///  B172
                B172: u1,
                ///  B173
                B173: u1,
                ///  B174
                B174: u1,
                ///  B175
                B175: u1,
                ///  B176
                B176: u1,
                ///  B177
                B177: u1,
                ///  B178
                B178: u1,
                ///  B179
                B179: u1,
                ///  B180
                B180: u1,
                ///  B181
                B181: u1,
                ///  B182
                B182: u1,
                ///  B183
                B183: u1,
                ///  B184
                B184: u1,
                ///  B185
                B185: u1,
                ///  B186
                B186: u1,
                ///  B187
                B187: u1,
                ///  B188
                B188: u1,
                ///  B189
                B189: u1,
                ///  B190
                B190: u1,
                ///  B191
                B191: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR6: mmio.Mmio(packed struct(u32) {
                ///  B192
                B192: u1,
                ///  B193
                B193: u1,
                ///  B194
                B194: u1,
                ///  B195
                B195: u1,
                ///  B196
                B196: u1,
                ///  B197
                B197: u1,
                ///  B198
                B198: u1,
                ///  B199
                B199: u1,
                ///  B200
                B200: u1,
                ///  B201
                B201: u1,
                ///  B202
                B202: u1,
                ///  B203
                B203: u1,
                ///  B204
                B204: u1,
                ///  B205
                B205: u1,
                ///  B206
                B206: u1,
                ///  B207
                B207: u1,
                ///  B208
                B208: u1,
                ///  B209
                B209: u1,
                ///  B210
                B210: u1,
                ///  B211
                B211: u1,
                ///  B212
                B212: u1,
                ///  B213
                B213: u1,
                ///  B214
                B214: u1,
                ///  B215
                B215: u1,
                ///  B216
                B216: u1,
                ///  B217
                B217: u1,
                ///  B218
                B218: u1,
                ///  B219
                B219: u1,
                ///  B220
                B220: u1,
                ///  B221
                B221: u1,
                ///  B222
                B222: u1,
                ///  B223
                B223: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR7: mmio.Mmio(packed struct(u32) {
                ///  B224
                B224: u1,
                ///  B225
                B225: u1,
                ///  B226
                B226: u1,
                ///  B227
                B227: u1,
                ///  B228
                B228: u1,
                ///  B229
                B229: u1,
                ///  B230
                B230: u1,
                ///  B231
                B231: u1,
                ///  B232
                B232: u1,
                ///  B233
                B233: u1,
                ///  B234
                B234: u1,
                ///  B235
                B235: u1,
                ///  B236
                B236: u1,
                ///  B237
                B237: u1,
                ///  B238
                B238: u1,
                ///  B239
                B239: u1,
                ///  B240
                B240: u1,
                ///  B241
                B241: u1,
                ///  B242
                B242: u1,
                ///  B243
                B243: u1,
                ///  B244
                B244: u1,
                ///  B245
                B245: u1,
                ///  B246
                B246: u1,
                ///  B247
                B247: u1,
                ///  B248
                B248: u1,
                ///  B249
                B249: u1,
                ///  B250
                B250: u1,
                ///  B251
                B251: u1,
                ///  B252
                B252: u1,
                ///  B253
                B253: u1,
                ///  B254
                B254: u1,
                ///  B255
                B255: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR8: mmio.Mmio(packed struct(u32) {
                ///  B256
                B256: u1,
                ///  B257
                B257: u1,
                ///  B258
                B258: u1,
                ///  B259
                B259: u1,
                ///  B260
                B260: u1,
                ///  B261
                B261: u1,
                ///  B262
                B262: u1,
                ///  B263
                B263: u1,
                ///  B264
                B264: u1,
                ///  B265
                B265: u1,
                ///  B266
                B266: u1,
                ///  B267
                B267: u1,
                ///  B268
                B268: u1,
                ///  B269
                B269: u1,
                ///  B270
                B270: u1,
                ///  B271
                B271: u1,
                ///  B272
                B272: u1,
                ///  B273
                B273: u1,
                ///  B274
                B274: u1,
                ///  B275
                B275: u1,
                ///  B276
                B276: u1,
                ///  B277
                B277: u1,
                ///  B278
                B278: u1,
                ///  B279
                B279: u1,
                ///  B280
                B280: u1,
                ///  B281
                B281: u1,
                ///  B282
                B282: u1,
                ///  B283
                B283: u1,
                ///  B284
                B284: u1,
                ///  B285
                B285: u1,
                ///  B286
                B286: u1,
                ///  B287
                B287: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR9: mmio.Mmio(packed struct(u32) {
                ///  B288
                B288: u1,
                ///  B289
                B289: u1,
                ///  B290
                B290: u1,
                ///  B291
                B291: u1,
                ///  B292
                B292: u1,
                ///  B293
                B293: u1,
                ///  B294
                B294: u1,
                ///  B295
                B295: u1,
                ///  B296
                B296: u1,
                ///  B297
                B297: u1,
                ///  B298
                B298: u1,
                ///  B299
                B299: u1,
                ///  B300
                B300: u1,
                ///  B301
                B301: u1,
                ///  B302
                B302: u1,
                ///  B303
                B303: u1,
                ///  B304
                B304: u1,
                ///  B305
                B305: u1,
                ///  B306
                B306: u1,
                ///  B307
                B307: u1,
                ///  B308
                B308: u1,
                ///  B309
                B309: u1,
                ///  B310
                B310: u1,
                ///  B311
                B311: u1,
                ///  B312
                B312: u1,
                ///  B313
                B313: u1,
                ///  B314
                B314: u1,
                ///  B315
                B315: u1,
                ///  B316
                B316: u1,
                ///  B317
                B317: u1,
                ///  B318
                B318: u1,
                ///  B319
                B319: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR10: mmio.Mmio(packed struct(u32) {
                ///  B320
                B320: u1,
                ///  B321
                B321: u1,
                ///  B322
                B322: u1,
                ///  B323
                B323: u1,
                ///  B324
                B324: u1,
                ///  B325
                B325: u1,
                ///  B326
                B326: u1,
                ///  B327
                B327: u1,
                ///  B328
                B328: u1,
                ///  B329
                B329: u1,
                ///  B330
                B330: u1,
                ///  B331
                B331: u1,
                ///  B332
                B332: u1,
                ///  B333
                B333: u1,
                ///  B334
                B334: u1,
                ///  B335
                B335: u1,
                ///  B336
                B336: u1,
                ///  B337
                B337: u1,
                ///  B338
                B338: u1,
                ///  B339
                B339: u1,
                ///  B340
                B340: u1,
                ///  B341
                B341: u1,
                ///  B342
                B342: u1,
                ///  B343
                B343: u1,
                ///  B344
                B344: u1,
                ///  B345
                B345: u1,
                ///  B346
                B346: u1,
                ///  B347
                B347: u1,
                ///  B348
                B348: u1,
                ///  B349
                B349: u1,
                ///  B350
                B350: u1,
                ///  B351
                B351: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR11: mmio.Mmio(packed struct(u32) {
                ///  B352
                B352: u1,
                ///  B353
                B353: u1,
                ///  B354
                B354: u1,
                ///  B355
                B355: u1,
                ///  B356
                B356: u1,
                ///  B357
                B357: u1,
                ///  B358
                B358: u1,
                ///  B359
                B359: u1,
                ///  B360
                B360: u1,
                ///  B361
                B361: u1,
                ///  B362
                B362: u1,
                ///  B363
                B363: u1,
                ///  B364
                B364: u1,
                ///  B365
                B365: u1,
                ///  B366
                B366: u1,
                ///  B367
                B367: u1,
                ///  B368
                B368: u1,
                ///  B369
                B369: u1,
                ///  B370
                B370: u1,
                ///  B371
                B371: u1,
                ///  B372
                B372: u1,
                ///  B373
                B373: u1,
                ///  B374
                B374: u1,
                ///  B375
                B375: u1,
                ///  B376
                B376: u1,
                ///  B377
                B377: u1,
                ///  B378
                B378: u1,
                ///  B379
                B379: u1,
                ///  B380
                B380: u1,
                ///  B381
                B381: u1,
                ///  B382
                B382: u1,
                ///  B383
                B383: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR12: mmio.Mmio(packed struct(u32) {
                ///  B384
                B384: u1,
                ///  B385
                B385: u1,
                ///  B386
                B386: u1,
                ///  B387
                B387: u1,
                ///  B388
                B388: u1,
                ///  B389
                B389: u1,
                ///  B390
                B390: u1,
                ///  B391
                B391: u1,
                ///  B392
                B392: u1,
                ///  B393
                B393: u1,
                ///  B394
                B394: u1,
                ///  B395
                B395: u1,
                ///  B396
                B396: u1,
                ///  B397
                B397: u1,
                ///  B398
                B398: u1,
                ///  B399
                B399: u1,
                ///  B400
                B400: u1,
                ///  B401
                B401: u1,
                ///  B402
                B402: u1,
                ///  B403
                B403: u1,
                ///  B404
                B404: u1,
                ///  B405
                B405: u1,
                ///  B406
                B406: u1,
                ///  B407
                B407: u1,
                ///  B408
                B408: u1,
                ///  B409
                B409: u1,
                ///  B410
                B410: u1,
                ///  B411
                B411: u1,
                ///  B412
                B412: u1,
                ///  B413
                B413: u1,
                ///  B414
                B414: u1,
                ///  B415
                B415: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR13: mmio.Mmio(packed struct(u32) {
                ///  B416
                B416: u1,
                ///  B417
                B417: u1,
                ///  B418
                B418: u1,
                ///  B419
                B419: u1,
                ///  B420
                B420: u1,
                ///  B421
                B421: u1,
                ///  B422
                B422: u1,
                ///  B423
                B423: u1,
                ///  B424
                B424: u1,
                ///  B425
                B425: u1,
                ///  B426
                B426: u1,
                ///  B427
                B427: u1,
                ///  B428
                B428: u1,
                ///  B429
                B429: u1,
                ///  B430
                B430: u1,
                ///  B431
                B431: u1,
                ///  B432
                B432: u1,
                ///  B433
                B433: u1,
                ///  B434
                B434: u1,
                ///  B435
                B435: u1,
                ///  B436
                B436: u1,
                ///  B437
                B437: u1,
                ///  B438
                B438: u1,
                ///  B439
                B439: u1,
                ///  B440
                B440: u1,
                ///  B441
                B441: u1,
                ///  B442
                B442: u1,
                ///  B443
                B443: u1,
                ///  B444
                B444: u1,
                ///  B445
                B445: u1,
                ///  B446
                B446: u1,
                ///  B447
                B447: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR14: mmio.Mmio(packed struct(u32) {
                ///  B448
                B448: u1,
                ///  B449
                B449: u1,
                ///  B450
                B450: u1,
                ///  B451
                B451: u1,
                ///  B452
                B452: u1,
                ///  B453
                B453: u1,
                ///  B454
                B454: u1,
                ///  B455
                B455: u1,
                ///  B456
                B456: u1,
                ///  B457
                B457: u1,
                ///  B458
                B458: u1,
                ///  B459
                B459: u1,
                ///  B460
                B460: u1,
                ///  B461
                B461: u1,
                ///  B462
                B462: u1,
                ///  B463
                B463: u1,
                ///  B464
                B464: u1,
                ///  B465
                B465: u1,
                ///  B466
                B466: u1,
                ///  B467
                B467: u1,
                ///  B468
                B468: u1,
                ///  B469
                B469: u1,
                ///  B470
                B470: u1,
                ///  B471
                B471: u1,
                ///  B472
                B472: u1,
                ///  B473
                B473: u1,
                ///  B474
                B474: u1,
                ///  B475
                B475: u1,
                ///  B476
                B476: u1,
                ///  B477
                B477: u1,
                ///  B478
                B478: u1,
                ///  B479
                B479: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR15: mmio.Mmio(packed struct(u32) {
                ///  B480
                B480: u1,
                ///  B481
                B481: u1,
                ///  B482
                B482: u1,
                ///  B483
                B483: u1,
                ///  B484
                B484: u1,
                ///  B485
                B485: u1,
                ///  B486
                B486: u1,
                ///  B487
                B487: u1,
                ///  B488
                B488: u1,
                ///  B489
                B489: u1,
                ///  B490
                B490: u1,
                ///  B491
                B491: u1,
                ///  B492
                B492: u1,
                ///  B493
                B493: u1,
                ///  B494
                B494: u1,
                ///  B495
                B495: u1,
                ///  B496
                B496: u1,
                ///  B497
                B497: u1,
                ///  B498
                B498: u1,
                ///  B499
                B499: u1,
                ///  B500
                B500: u1,
                ///  B501
                B501: u1,
                ///  B502
                B502: u1,
                ///  B503
                B503: u1,
                ///  B504
                B504: u1,
                ///  B505
                B505: u1,
                ///  B506
                B506: u1,
                ///  B507
                B507: u1,
                ///  B508
                B508: u1,
                ///  B509
                B509: u1,
                ///  B510
                B510: u1,
                ///  B511
                B511: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR16: mmio.Mmio(packed struct(u32) {
                ///  B512
                B512: u1,
                ///  B513
                B513: u1,
                ///  B514
                B514: u1,
                ///  B515
                B515: u1,
                ///  B516
                B516: u1,
                ///  B517
                B517: u1,
                ///  B518
                B518: u1,
                ///  B519
                B519: u1,
                ///  B520
                B520: u1,
                ///  B521
                B521: u1,
                ///  B522
                B522: u1,
                ///  B523
                B523: u1,
                ///  B524
                B524: u1,
                ///  B525
                B525: u1,
                ///  B526
                B526: u1,
                ///  B527
                B527: u1,
                ///  B528
                B528: u1,
                ///  B529
                B529: u1,
                ///  B530
                B530: u1,
                ///  B531
                B531: u1,
                ///  B532
                B532: u1,
                ///  B533
                B533: u1,
                ///  B534
                B534: u1,
                ///  B535
                B535: u1,
                ///  B536
                B536: u1,
                ///  B537
                B537: u1,
                ///  B538
                B538: u1,
                ///  B539
                B539: u1,
                ///  B540
                B540: u1,
                ///  B541
                B541: u1,
                ///  B542
                B542: u1,
                ///  B543
                B543: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR17: mmio.Mmio(packed struct(u32) {
                ///  B544
                B544: u1,
                ///  B545
                B545: u1,
                ///  B546
                B546: u1,
                ///  B547
                B547: u1,
                ///  B548
                B548: u1,
                ///  B549
                B549: u1,
                ///  B550
                B550: u1,
                ///  B551
                B551: u1,
                ///  B552
                B552: u1,
                ///  B553
                B553: u1,
                ///  B554
                B554: u1,
                ///  B555
                B555: u1,
                ///  B556
                B556: u1,
                ///  B557
                B557: u1,
                ///  B558
                B558: u1,
                ///  B559
                B559: u1,
                ///  B560
                B560: u1,
                ///  B561
                B561: u1,
                ///  B562
                B562: u1,
                ///  B563
                B563: u1,
                ///  B564
                B564: u1,
                ///  B565
                B565: u1,
                ///  B566
                B566: u1,
                ///  B567
                B567: u1,
                ///  B568
                B568: u1,
                ///  B569
                B569: u1,
                ///  B570
                B570: u1,
                ///  B571
                B571: u1,
                ///  B572
                B572: u1,
                ///  B573
                B573: u1,
                ///  B574
                B574: u1,
                ///  B575
                B575: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR18: mmio.Mmio(packed struct(u32) {
                ///  B576
                B576: u1,
                ///  B577
                B577: u1,
                ///  B578
                B578: u1,
                ///  B579
                B579: u1,
                ///  B580
                B580: u1,
                ///  B581
                B581: u1,
                ///  B582
                B582: u1,
                ///  B583
                B583: u1,
                ///  B584
                B584: u1,
                ///  B585
                B585: u1,
                ///  B586
                B586: u1,
                ///  B587
                B587: u1,
                ///  B588
                B588: u1,
                ///  B589
                B589: u1,
                ///  B590
                B590: u1,
                ///  B591
                B591: u1,
                ///  B592
                B592: u1,
                ///  B593
                B593: u1,
                ///  B594
                B594: u1,
                ///  B595
                B595: u1,
                ///  B596
                B596: u1,
                ///  B597
                B597: u1,
                ///  B598
                B598: u1,
                ///  B599
                B599: u1,
                ///  B600
                B600: u1,
                ///  B601
                B601: u1,
                ///  B602
                B602: u1,
                ///  B603
                B603: u1,
                ///  B604
                B604: u1,
                ///  B605
                B605: u1,
                ///  B606
                B606: u1,
                ///  B607
                B607: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR19: mmio.Mmio(packed struct(u32) {
                ///  B608
                B608: u1,
                ///  B609
                B609: u1,
                ///  B610
                B610: u1,
                ///  B611
                B611: u1,
                ///  B612
                B612: u1,
                ///  B613
                B613: u1,
                ///  B614
                B614: u1,
                ///  B615
                B615: u1,
                ///  B616
                B616: u1,
                ///  B617
                B617: u1,
                ///  B618
                B618: u1,
                ///  B619
                B619: u1,
                ///  B620
                B620: u1,
                ///  B621
                B621: u1,
                ///  B622
                B622: u1,
                ///  B623
                B623: u1,
                ///  B624
                B624: u1,
                ///  B625
                B625: u1,
                ///  B626
                B626: u1,
                ///  B627
                B627: u1,
                ///  B628
                B628: u1,
                ///  B629
                B629: u1,
                ///  B630
                B630: u1,
                ///  B631
                B631: u1,
                ///  B632
                B632: u1,
                ///  B633
                B633: u1,
                ///  B634
                B634: u1,
                ///  B635
                B635: u1,
                ///  B636
                B636: u1,
                ///  B637
                B637: u1,
                ///  B638
                B638: u1,
                ///  B639
                B639: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR20: mmio.Mmio(packed struct(u32) {
                ///  B640
                B640: u1,
                ///  B641
                B641: u1,
                ///  B642
                B642: u1,
                ///  B643
                B643: u1,
                ///  B644
                B644: u1,
                ///  B645
                B645: u1,
                ///  B646
                B646: u1,
                ///  B647
                B647: u1,
                ///  B648
                B648: u1,
                ///  B649
                B649: u1,
                ///  B650
                B650: u1,
                ///  B651
                B651: u1,
                ///  B652
                B652: u1,
                ///  B653
                B653: u1,
                ///  B654
                B654: u1,
                ///  B655
                B655: u1,
                ///  B656
                B656: u1,
                ///  B657
                B657: u1,
                ///  B658
                B658: u1,
                ///  B659
                B659: u1,
                ///  B660
                B660: u1,
                ///  B661
                B661: u1,
                ///  B662
                B662: u1,
                ///  B663
                B663: u1,
                ///  B664
                B664: u1,
                ///  B665
                B665: u1,
                ///  B666
                B666: u1,
                ///  B667
                B667: u1,
                ///  B668
                B668: u1,
                ///  B669
                B669: u1,
                ///  B670
                B670: u1,
                ///  B671
                B671: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR21: mmio.Mmio(packed struct(u32) {
                ///  B672
                B672: u1,
                ///  B673
                B673: u1,
                ///  B674
                B674: u1,
                ///  B675
                B675: u1,
                ///  B676
                B676: u1,
                ///  B677
                B677: u1,
                ///  B678
                B678: u1,
                ///  B679
                B679: u1,
                ///  B680
                B680: u1,
                ///  B681
                B681: u1,
                ///  B682
                B682: u1,
                ///  B683
                B683: u1,
                ///  B684
                B684: u1,
                ///  B685
                B685: u1,
                ///  B686
                B686: u1,
                ///  B687
                B687: u1,
                ///  B688
                B688: u1,
                ///  B689
                B689: u1,
                ///  B690
                B690: u1,
                ///  B691
                B691: u1,
                ///  B692
                B692: u1,
                ///  B693
                B693: u1,
                ///  B694
                B694: u1,
                ///  B695
                B695: u1,
                ///  B696
                B696: u1,
                ///  B697
                B697: u1,
                ///  B698
                B698: u1,
                ///  B699
                B699: u1,
                ///  B700
                B700: u1,
                ///  B701
                B701: u1,
                ///  B702
                B702: u1,
                ///  B703
                B703: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR22: mmio.Mmio(packed struct(u32) {
                ///  B704
                B704: u1,
                ///  B705
                B705: u1,
                ///  B706
                B706: u1,
                ///  B707
                B707: u1,
                ///  B708
                B708: u1,
                ///  B709
                B709: u1,
                ///  B710
                B710: u1,
                ///  B711
                B711: u1,
                ///  B712
                B712: u1,
                ///  B713
                B713: u1,
                ///  B714
                B714: u1,
                ///  B715
                B715: u1,
                ///  B716
                B716: u1,
                ///  B717
                B717: u1,
                ///  B718
                B718: u1,
                ///  B719
                B719: u1,
                ///  B720
                B720: u1,
                ///  B721
                B721: u1,
                ///  B722
                B722: u1,
                ///  B723
                B723: u1,
                ///  B724
                B724: u1,
                ///  B725
                B725: u1,
                ///  B726
                B726: u1,
                ///  B727
                B727: u1,
                ///  B728
                B728: u1,
                ///  B729
                B729: u1,
                ///  B730
                B730: u1,
                ///  B731
                B731: u1,
                ///  B732
                B732: u1,
                ///  B733
                B733: u1,
                ///  B734
                B734: u1,
                ///  B735
                B735: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR23: mmio.Mmio(packed struct(u32) {
                ///  B736
                B736: u1,
                ///  B737
                B737: u1,
                ///  B738
                B738: u1,
                ///  B739
                B739: u1,
                ///  B740
                B740: u1,
                ///  B741
                B741: u1,
                ///  B742
                B742: u1,
                ///  B743
                B743: u1,
                ///  B744
                B744: u1,
                ///  B745
                B745: u1,
                ///  B746
                B746: u1,
                ///  B747
                B747: u1,
                ///  B748
                B748: u1,
                ///  B749
                B749: u1,
                ///  B750
                B750: u1,
                ///  B751
                B751: u1,
                ///  B752
                B752: u1,
                ///  B753
                B753: u1,
                ///  B754
                B754: u1,
                ///  B755
                B755: u1,
                ///  B756
                B756: u1,
                ///  B757
                B757: u1,
                ///  B758
                B758: u1,
                ///  B759
                B759: u1,
                ///  B760
                B760: u1,
                ///  B761
                B761: u1,
                ///  B762
                B762: u1,
                ///  B763
                B763: u1,
                ///  B764
                B764: u1,
                ///  B765
                B765: u1,
                ///  B766
                B766: u1,
                ///  B767
                B767: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR24: mmio.Mmio(packed struct(u32) {
                ///  B768
                B768: u1,
                ///  B769
                B769: u1,
                ///  B770
                B770: u1,
                ///  B771
                B771: u1,
                ///  B772
                B772: u1,
                ///  B773
                B773: u1,
                ///  B774
                B774: u1,
                ///  B775
                B775: u1,
                ///  B776
                B776: u1,
                ///  B777
                B777: u1,
                ///  B778
                B778: u1,
                ///  B779
                B779: u1,
                ///  B780
                B780: u1,
                ///  B781
                B781: u1,
                ///  B782
                B782: u1,
                ///  B783
                B783: u1,
                ///  B784
                B784: u1,
                ///  B785
                B785: u1,
                ///  B786
                B786: u1,
                ///  B787
                B787: u1,
                ///  B788
                B788: u1,
                ///  B789
                B789: u1,
                ///  B790
                B790: u1,
                ///  B791
                B791: u1,
                ///  B792
                B792: u1,
                ///  B793
                B793: u1,
                ///  B794
                B794: u1,
                ///  B795
                B795: u1,
                ///  B796
                B796: u1,
                ///  B797
                B797: u1,
                ///  B798
                B798: u1,
                ///  B799
                B799: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR25: mmio.Mmio(packed struct(u32) {
                ///  B800
                B800: u1,
                ///  B801
                B801: u1,
                ///  B802
                B802: u1,
                ///  B803
                B803: u1,
                ///  B804
                B804: u1,
                ///  B805
                B805: u1,
                ///  B806
                B806: u1,
                ///  B807
                B807: u1,
                ///  B808
                B808: u1,
                ///  B809
                B809: u1,
                ///  B810
                B810: u1,
                ///  B811
                B811: u1,
                ///  B812
                B812: u1,
                ///  B813
                B813: u1,
                ///  B814
                B814: u1,
                ///  B815
                B815: u1,
                ///  B816
                B816: u1,
                ///  B817
                B817: u1,
                ///  B818
                B818: u1,
                ///  B819
                B819: u1,
                ///  B820
                B820: u1,
                ///  B821
                B821: u1,
                ///  B822
                B822: u1,
                ///  B823
                B823: u1,
                ///  B824
                B824: u1,
                ///  B825
                B825: u1,
                ///  B826
                B826: u1,
                ///  B827
                B827: u1,
                ///  B828
                B828: u1,
                ///  B829
                B829: u1,
                ///  B830
                B830: u1,
                ///  B831
                B831: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR26: mmio.Mmio(packed struct(u32) {
                ///  B832
                B832: u1,
                ///  B833
                B833: u1,
                ///  B834
                B834: u1,
                ///  B835
                B835: u1,
                ///  B836
                B836: u1,
                ///  B837
                B837: u1,
                ///  B838
                B838: u1,
                ///  B839
                B839: u1,
                ///  B840
                B840: u1,
                ///  B841
                B841: u1,
                ///  B842
                B842: u1,
                ///  B843
                B843: u1,
                ///  B844
                B844: u1,
                ///  B845
                B845: u1,
                ///  B846
                B846: u1,
                ///  B847
                B847: u1,
                ///  B848
                B848: u1,
                ///  B849
                B849: u1,
                ///  B850
                B850: u1,
                ///  B851
                B851: u1,
                ///  B852
                B852: u1,
                ///  B853
                B853: u1,
                ///  B854
                B854: u1,
                ///  B855
                B855: u1,
                ///  B856
                B856: u1,
                ///  B857
                B857: u1,
                ///  B858
                B858: u1,
                ///  B859
                B859: u1,
                ///  B860
                B860: u1,
                ///  B861
                B861: u1,
                ///  B862
                B862: u1,
                ///  B863
                B863: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR27: mmio.Mmio(packed struct(u32) {
                ///  B864
                B864: u1,
                ///  B865
                B865: u1,
                ///  B866
                B866: u1,
                ///  B867
                B867: u1,
                ///  B868
                B868: u1,
                ///  B869
                B869: u1,
                ///  B870
                B870: u1,
                ///  B871
                B871: u1,
                ///  B872
                B872: u1,
                ///  B873
                B873: u1,
                ///  B874
                B874: u1,
                ///  B875
                B875: u1,
                ///  B876
                B876: u1,
                ///  B877
                B877: u1,
                ///  B878
                B878: u1,
                ///  B879
                B879: u1,
                ///  B880
                B880: u1,
                ///  B881
                B881: u1,
                ///  B882
                B882: u1,
                ///  B883
                B883: u1,
                ///  B884
                B884: u1,
                ///  B885
                B885: u1,
                ///  B886
                B886: u1,
                ///  B887
                B887: u1,
                ///  B888
                B888: u1,
                ///  B889
                B889: u1,
                ///  B890
                B890: u1,
                ///  B891
                B891: u1,
                ///  B892
                B892: u1,
                ///  B893
                B893: u1,
                ///  B894
                B894: u1,
                ///  B895
                B895: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR28: mmio.Mmio(packed struct(u32) {
                ///  B896
                B896: u1,
                ///  B897
                B897: u1,
                ///  B898
                B898: u1,
                ///  B899
                B899: u1,
                ///  B900
                B900: u1,
                ///  B901
                B901: u1,
                ///  B902
                B902: u1,
                ///  B903
                B903: u1,
                ///  B904
                B904: u1,
                ///  B905
                B905: u1,
                ///  B906
                B906: u1,
                ///  B907
                B907: u1,
                ///  B908
                B908: u1,
                ///  B909
                B909: u1,
                ///  B910
                B910: u1,
                ///  B911
                B911: u1,
                ///  B912
                B912: u1,
                ///  B913
                B913: u1,
                ///  B914
                B914: u1,
                ///  B915
                B915: u1,
                ///  B916
                B916: u1,
                ///  B917
                B917: u1,
                ///  B918
                B918: u1,
                ///  B919
                B919: u1,
                ///  B920
                B920: u1,
                ///  B921
                B921: u1,
                ///  B922
                B922: u1,
                ///  B923
                B923: u1,
                ///  B924
                B924: u1,
                ///  B925
                B925: u1,
                ///  B926
                B926: u1,
                ///  B927
                B927: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR29: mmio.Mmio(packed struct(u32) {
                ///  B928
                B928: u1,
                ///  B929
                B929: u1,
                ///  B930
                B930: u1,
                ///  B931
                B931: u1,
                ///  B932
                B932: u1,
                ///  B933
                B933: u1,
                ///  B934
                B934: u1,
                ///  B935
                B935: u1,
                ///  B936
                B936: u1,
                ///  B937
                B937: u1,
                ///  B938
                B938: u1,
                ///  B939
                B939: u1,
                ///  B940
                B940: u1,
                ///  B941
                B941: u1,
                ///  B942
                B942: u1,
                ///  B943
                B943: u1,
                ///  B944
                B944: u1,
                ///  B945
                B945: u1,
                ///  B946
                B946: u1,
                ///  B947
                B947: u1,
                ///  B948
                B948: u1,
                ///  B949
                B949: u1,
                ///  B950
                B950: u1,
                ///  B951
                B951: u1,
                ///  B952
                B952: u1,
                ///  B953
                B953: u1,
                ///  B954
                B954: u1,
                ///  B955
                B955: u1,
                ///  B956
                B956: u1,
                ///  B957
                B957: u1,
                ///  B958
                B958: u1,
                ///  B959
                B959: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR30: mmio.Mmio(packed struct(u32) {
                ///  B960
                B960: u1,
                ///  B961
                B961: u1,
                ///  B962
                B962: u1,
                ///  B963
                B963: u1,
                ///  B964
                B964: u1,
                ///  B965
                B965: u1,
                ///  B966
                B966: u1,
                ///  B967
                B967: u1,
                ///  B968
                B968: u1,
                ///  B969
                B969: u1,
                ///  B970
                B970: u1,
                ///  B971
                B971: u1,
                ///  B972
                B972: u1,
                ///  B973
                B973: u1,
                ///  B974
                B974: u1,
                ///  B975
                B975: u1,
                ///  B976
                B976: u1,
                ///  B977
                B977: u1,
                ///  B978
                B978: u1,
                ///  B979
                B979: u1,
                ///  B980
                B980: u1,
                ///  B981
                B981: u1,
                ///  B982
                B982: u1,
                ///  B983
                B983: u1,
                ///  B984
                B984: u1,
                ///  B985
                B985: u1,
                ///  B986
                B986: u1,
                ///  B987
                B987: u1,
                ///  B988
                B988: u1,
                ///  B989
                B989: u1,
                ///  B990
                B990: u1,
                ///  B991
                B991: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR31: mmio.Mmio(packed struct(u32) {
                ///  B992
                B992: u1,
                ///  B993
                B993: u1,
                ///  B994
                B994: u1,
                ///  B995
                B995: u1,
                ///  B996
                B996: u1,
                ///  B997
                B997: u1,
                ///  B998
                B998: u1,
                ///  B999
                B999: u1,
                ///  B1000
                B1000: u1,
                ///  B1001
                B1001: u1,
                ///  B1002
                B1002: u1,
                ///  B1003
                B1003: u1,
                ///  B1004
                B1004: u1,
                ///  B1005
                B1005: u1,
                ///  B1006
                B1006: u1,
                ///  B1007
                B1007: u1,
                ///  B1008
                B1008: u1,
                ///  B1009
                B1009: u1,
                ///  B1010
                B1010: u1,
                ///  B1011
                B1011: u1,
                ///  B1012
                B1012: u1,
                ///  B1013
                B1013: u1,
                ///  B1014
                B1014: u1,
                ///  B1015
                B1015: u1,
                ///  B1016
                B1016: u1,
                ///  B1017
                B1017: u1,
                ///  B1018
                B1018: u1,
                ///  B1019
                B1019: u1,
                ///  B1020
                B1020: u1,
                ///  B1021
                B1021: u1,
                ///  B1022
                B1022: u1,
                ///  B1023
                B1023: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR32: mmio.Mmio(packed struct(u32) {
                ///  B1024
                B1024: u1,
                ///  B1025
                B1025: u1,
                ///  B1026
                B1026: u1,
                ///  B1027
                B1027: u1,
                ///  B1028
                B1028: u1,
                ///  B1029
                B1029: u1,
                ///  B1030
                B1030: u1,
                ///  B1031
                B1031: u1,
                ///  B1032
                B1032: u1,
                ///  B1033
                B1033: u1,
                ///  B1034
                B1034: u1,
                ///  B1035
                B1035: u1,
                ///  B1036
                B1036: u1,
                ///  B1037
                B1037: u1,
                ///  B1038
                B1038: u1,
                ///  B1039
                B1039: u1,
                ///  B1040
                B1040: u1,
                ///  B1041
                B1041: u1,
                ///  B1042
                B1042: u1,
                ///  B1043
                B1043: u1,
                ///  B1044
                B1044: u1,
                ///  B1045
                B1045: u1,
                ///  B1046
                B1046: u1,
                ///  B1047
                B1047: u1,
                ///  B1048
                B1048: u1,
                ///  B1049
                B1049: u1,
                ///  B1050
                B1050: u1,
                ///  B1051
                B1051: u1,
                ///  B1052
                B1052: u1,
                ///  B1053
                B1053: u1,
                ///  B1054
                B1054: u1,
                ///  B1055
                B1055: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR33: mmio.Mmio(packed struct(u32) {
                ///  B1056
                B1056: u1,
                ///  B1057
                B1057: u1,
                ///  B1058
                B1058: u1,
                ///  B1059
                B1059: u1,
                ///  B1060
                B1060: u1,
                ///  B1061
                B1061: u1,
                ///  B1062
                B1062: u1,
                ///  B1063
                B1063: u1,
                ///  B1064
                B1064: u1,
                ///  B1065
                B1065: u1,
                ///  B1066
                B1066: u1,
                ///  B1067
                B1067: u1,
                ///  B1068
                B1068: u1,
                ///  B1069
                B1069: u1,
                ///  B1070
                B1070: u1,
                ///  B1071
                B1071: u1,
                ///  B1072
                B1072: u1,
                ///  B1073
                B1073: u1,
                ///  B1074
                B1074: u1,
                ///  B1075
                B1075: u1,
                ///  B1076
                B1076: u1,
                ///  B1077
                B1077: u1,
                ///  B1078
                B1078: u1,
                ///  B1079
                B1079: u1,
                ///  B1080
                B1080: u1,
                ///  B1081
                B1081: u1,
                ///  B1082
                B1082: u1,
                ///  B1083
                B1083: u1,
                ///  B1084
                B1084: u1,
                ///  B1085
                B1085: u1,
                ///  B1086
                B1086: u1,
                ///  B1087
                B1087: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR34: mmio.Mmio(packed struct(u32) {
                ///  B1088
                B1088: u1,
                ///  B1089
                B1089: u1,
                ///  B1090
                B1090: u1,
                ///  B1091
                B1091: u1,
                ///  B1092
                B1092: u1,
                ///  B1093
                B1093: u1,
                ///  B1094
                B1094: u1,
                ///  B1095
                B1095: u1,
                ///  B1096
                B1096: u1,
                ///  B1097
                B1097: u1,
                ///  B1098
                B1098: u1,
                ///  B1099
                B1099: u1,
                ///  B1100
                B1100: u1,
                ///  B1101
                B1101: u1,
                ///  B1102
                B1102: u1,
                ///  B1103
                B1103: u1,
                ///  B1104
                B1104: u1,
                ///  B1105
                B1105: u1,
                ///  B1106
                B1106: u1,
                ///  B1107
                B1107: u1,
                ///  B1108
                B1108: u1,
                ///  B1109
                B1109: u1,
                ///  B1110
                B1110: u1,
                ///  B1111
                B1111: u1,
                ///  B1112
                B1112: u1,
                ///  B1113
                B1113: u1,
                ///  B1114
                B1114: u1,
                ///  B1115
                B1115: u1,
                ///  B1116
                B1116: u1,
                ///  B1117
                B1117: u1,
                ///  B1118
                B1118: u1,
                ///  B1119
                B1119: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR35: mmio.Mmio(packed struct(u32) {
                ///  B1120
                B1120: u1,
                ///  B1121
                B1121: u1,
                ///  B1122
                B1122: u1,
                ///  B1123
                B1123: u1,
                ///  B1124
                B1124: u1,
                ///  B1125
                B1125: u1,
                ///  B1126
                B1126: u1,
                ///  B1127
                B1127: u1,
                ///  B1128
                B1128: u1,
                ///  B1129
                B1129: u1,
                ///  B1130
                B1130: u1,
                ///  B1131
                B1131: u1,
                ///  B1132
                B1132: u1,
                ///  B1133
                B1133: u1,
                ///  B1134
                B1134: u1,
                ///  B1135
                B1135: u1,
                ///  B1136
                B1136: u1,
                ///  B1137
                B1137: u1,
                ///  B1138
                B1138: u1,
                ///  B1139
                B1139: u1,
                ///  B1140
                B1140: u1,
                ///  B1141
                B1141: u1,
                ///  B1142
                B1142: u1,
                ///  B1143
                B1143: u1,
                ///  B1144
                B1144: u1,
                ///  B1145
                B1145: u1,
                ///  B1146
                B1146: u1,
                ///  B1147
                B1147: u1,
                ///  B1148
                B1148: u1,
                ///  B1149
                B1149: u1,
                ///  B1150
                B1150: u1,
                ///  B1151
                B1151: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR36: mmio.Mmio(packed struct(u32) {
                ///  B1152
                B1152: u1,
                ///  B1153
                B1153: u1,
                ///  B1154
                B1154: u1,
                ///  B1155
                B1155: u1,
                ///  B1156
                B1156: u1,
                ///  B1157
                B1157: u1,
                ///  B1158
                B1158: u1,
                ///  B1159
                B1159: u1,
                ///  B1160
                B1160: u1,
                ///  B1161
                B1161: u1,
                ///  B1162
                B1162: u1,
                ///  B1163
                B1163: u1,
                ///  B1164
                B1164: u1,
                ///  B1165
                B1165: u1,
                ///  B1166
                B1166: u1,
                ///  B1167
                B1167: u1,
                ///  B1168
                B1168: u1,
                ///  B1169
                B1169: u1,
                ///  B1170
                B1170: u1,
                ///  B1171
                B1171: u1,
                ///  B1172
                B1172: u1,
                ///  B1173
                B1173: u1,
                ///  B1174
                B1174: u1,
                ///  B1175
                B1175: u1,
                ///  B1176
                B1176: u1,
                ///  B1177
                B1177: u1,
                ///  B1178
                B1178: u1,
                ///  B1179
                B1179: u1,
                ///  B1180
                B1180: u1,
                ///  B1181
                B1181: u1,
                ///  B1182
                B1182: u1,
                ///  B1183
                B1183: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR37: mmio.Mmio(packed struct(u32) {
                ///  B1184
                B1184: u1,
                ///  B1185
                B1185: u1,
                ///  B1186
                B1186: u1,
                ///  B1187
                B1187: u1,
                ///  B1188
                B1188: u1,
                ///  B1189
                B1189: u1,
                ///  B1190
                B1190: u1,
                ///  B1191
                B1191: u1,
                ///  B1192
                B1192: u1,
                ///  B1193
                B1193: u1,
                ///  B1194
                B1194: u1,
                ///  B1195
                B1195: u1,
                ///  B1196
                B1196: u1,
                ///  B1197
                B1197: u1,
                ///  B1198
                B1198: u1,
                ///  B1199
                B1199: u1,
                ///  B1200
                B1200: u1,
                ///  B1201
                B1201: u1,
                ///  B1202
                B1202: u1,
                ///  B1203
                B1203: u1,
                ///  B1204
                B1204: u1,
                ///  B1205
                B1205: u1,
                ///  B1206
                B1206: u1,
                ///  B1207
                B1207: u1,
                ///  B1208
                B1208: u1,
                ///  B1209
                B1209: u1,
                ///  B1210
                B1210: u1,
                ///  B1211
                B1211: u1,
                ///  B1212
                B1212: u1,
                ///  B1213
                B1213: u1,
                ///  B1214
                B1214: u1,
                ///  B1215
                B1215: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR38: mmio.Mmio(packed struct(u32) {
                ///  B1216
                B1216: u1,
                ///  B1217
                B1217: u1,
                ///  B1218
                B1218: u1,
                ///  B1219
                B1219: u1,
                ///  B1220
                B1220: u1,
                ///  B1221
                B1221: u1,
                ///  B1222
                B1222: u1,
                ///  B1223
                B1223: u1,
                ///  B1224
                B1224: u1,
                ///  B1225
                B1225: u1,
                ///  B1226
                B1226: u1,
                ///  B1227
                B1227: u1,
                ///  B1228
                B1228: u1,
                ///  B1229
                B1229: u1,
                ///  B1230
                B1230: u1,
                ///  B1231
                B1231: u1,
                ///  B1232
                B1232: u1,
                ///  B1233
                B1233: u1,
                ///  B1234
                B1234: u1,
                ///  B1235
                B1235: u1,
                ///  B1236
                B1236: u1,
                ///  B1237
                B1237: u1,
                ///  B1238
                B1238: u1,
                ///  B1239
                B1239: u1,
                ///  B1240
                B1240: u1,
                ///  B1241
                B1241: u1,
                ///  B1242
                B1242: u1,
                ///  B1243
                B1243: u1,
                ///  B1244
                B1244: u1,
                ///  B1245
                B1245: u1,
                ///  B1246
                B1246: u1,
                ///  B1247
                B1247: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR39: mmio.Mmio(packed struct(u32) {
                ///  B1248
                B1248: u1,
                ///  B1249
                B1249: u1,
                ///  B1250
                B1250: u1,
                ///  B1251
                B1251: u1,
                ///  B1252
                B1252: u1,
                ///  B1253
                B1253: u1,
                ///  B1254
                B1254: u1,
                ///  B1255
                B1255: u1,
                ///  B1256
                B1256: u1,
                ///  B1257
                B1257: u1,
                ///  B1258
                B1258: u1,
                ///  B1259
                B1259: u1,
                ///  B1260
                B1260: u1,
                ///  B1261
                B1261: u1,
                ///  B1262
                B1262: u1,
                ///  B1263
                B1263: u1,
                ///  B1264
                B1264: u1,
                ///  B1265
                B1265: u1,
                ///  B1266
                B1266: u1,
                ///  B1267
                B1267: u1,
                ///  B1268
                B1268: u1,
                ///  B1269
                B1269: u1,
                ///  B1270
                B1270: u1,
                ///  B1271
                B1271: u1,
                ///  B1272
                B1272: u1,
                ///  B1273
                B1273: u1,
                ///  B1274
                B1274: u1,
                ///  B1275
                B1275: u1,
                ///  B1276
                B1276: u1,
                ///  B1277
                B1277: u1,
                ///  B1278
                B1278: u1,
                ///  B1279
                B1279: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR40: mmio.Mmio(packed struct(u32) {
                ///  B1280
                B1280: u1,
                ///  B1281
                B1281: u1,
                ///  B1282
                B1282: u1,
                ///  B1283
                B1283: u1,
                ///  B1284
                B1284: u1,
                ///  B1285
                B1285: u1,
                ///  B1286
                B1286: u1,
                ///  B1287
                B1287: u1,
                ///  B1288
                B1288: u1,
                ///  B1289
                B1289: u1,
                ///  B1290
                B1290: u1,
                ///  B1291
                B1291: u1,
                ///  B1292
                B1292: u1,
                ///  B1293
                B1293: u1,
                ///  B1294
                B1294: u1,
                ///  B1295
                B1295: u1,
                ///  B1296
                B1296: u1,
                ///  B1297
                B1297: u1,
                ///  B1298
                B1298: u1,
                ///  B1299
                B1299: u1,
                ///  B1300
                B1300: u1,
                ///  B1301
                B1301: u1,
                ///  B1302
                B1302: u1,
                ///  B1303
                B1303: u1,
                ///  B1304
                B1304: u1,
                ///  B1305
                B1305: u1,
                ///  B1306
                B1306: u1,
                ///  B1307
                B1307: u1,
                ///  B1308
                B1308: u1,
                ///  B1309
                B1309: u1,
                ///  B1310
                B1310: u1,
                ///  B1311
                B1311: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR41: mmio.Mmio(packed struct(u32) {
                ///  B1312
                B1312: u1,
                ///  B1313
                B1313: u1,
                ///  B1314
                B1314: u1,
                ///  B1315
                B1315: u1,
                ///  B1316
                B1316: u1,
                ///  B1317
                B1317: u1,
                ///  B1318
                B1318: u1,
                ///  B1319
                B1319: u1,
                ///  B1320
                B1320: u1,
                ///  B1321
                B1321: u1,
                ///  B1322
                B1322: u1,
                ///  B1323
                B1323: u1,
                ///  B1324
                B1324: u1,
                ///  B1325
                B1325: u1,
                ///  B1326
                B1326: u1,
                ///  B1327
                B1327: u1,
                ///  B1328
                B1328: u1,
                ///  B1329
                B1329: u1,
                ///  B1330
                B1330: u1,
                ///  B1331
                B1331: u1,
                ///  B1332
                B1332: u1,
                ///  B1333
                B1333: u1,
                ///  B1334
                B1334: u1,
                ///  B1335
                B1335: u1,
                ///  B1336
                B1336: u1,
                ///  B1337
                B1337: u1,
                ///  B1338
                B1338: u1,
                ///  B1339
                B1339: u1,
                ///  B1340
                B1340: u1,
                ///  B1341
                B1341: u1,
                ///  B1342
                B1342: u1,
                ///  B1343
                B1343: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR42: mmio.Mmio(packed struct(u32) {
                ///  B1344
                B1344: u1,
                ///  B1345
                B1345: u1,
                ///  B1346
                B1346: u1,
                ///  B1347
                B1347: u1,
                ///  B1348
                B1348: u1,
                ///  B1349
                B1349: u1,
                ///  B1350
                B1350: u1,
                ///  B1351
                B1351: u1,
                ///  B1352
                B1352: u1,
                ///  B1353
                B1353: u1,
                ///  B1354
                B1354: u1,
                ///  B1355
                B1355: u1,
                ///  B1356
                B1356: u1,
                ///  B1357
                B1357: u1,
                ///  B1358
                B1358: u1,
                ///  B1359
                B1359: u1,
                ///  B1360
                B1360: u1,
                ///  B1361
                B1361: u1,
                ///  B1362
                B1362: u1,
                ///  B1363
                B1363: u1,
                ///  B1364
                B1364: u1,
                ///  B1365
                B1365: u1,
                ///  B1366
                B1366: u1,
                ///  B1367
                B1367: u1,
                ///  B1368
                B1368: u1,
                ///  B1369
                B1369: u1,
                ///  B1370
                B1370: u1,
                ///  B1371
                B1371: u1,
                ///  B1372
                B1372: u1,
                ///  B1373
                B1373: u1,
                ///  B1374
                B1374: u1,
                ///  B1375
                B1375: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR43: mmio.Mmio(packed struct(u32) {
                ///  B1376
                B1376: u1,
                ///  B1377
                B1377: u1,
                ///  B1378
                B1378: u1,
                ///  B1379
                B1379: u1,
                ///  B1380
                B1380: u1,
                ///  B1381
                B1381: u1,
                ///  B1382
                B1382: u1,
                ///  B1383
                B1383: u1,
                ///  B1384
                B1384: u1,
                ///  B1385
                B1385: u1,
                ///  B1386
                B1386: u1,
                ///  B1387
                B1387: u1,
                ///  B1388
                B1388: u1,
                ///  B1389
                B1389: u1,
                ///  B1390
                B1390: u1,
                ///  B1391
                B1391: u1,
                ///  B1392
                B1392: u1,
                ///  B1393
                B1393: u1,
                ///  B1394
                B1394: u1,
                ///  B1395
                B1395: u1,
                ///  B1396
                B1396: u1,
                ///  B1397
                B1397: u1,
                ///  B1398
                B1398: u1,
                ///  B1399
                B1399: u1,
                ///  B1400
                B1400: u1,
                ///  B1401
                B1401: u1,
                ///  B1402
                B1402: u1,
                ///  B1403
                B1403: u1,
                ///  B1404
                B1404: u1,
                ///  B1405
                B1405: u1,
                ///  B1406
                B1406: u1,
                ///  B1407
                B1407: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR44: mmio.Mmio(packed struct(u32) {
                ///  B1408
                B1408: u1,
                ///  B1409
                B1409: u1,
                ///  B1410
                B1410: u1,
                ///  B1411
                B1411: u1,
                ///  B1412
                B1412: u1,
                ///  B1413
                B1413: u1,
                ///  B1414
                B1414: u1,
                ///  B1415
                B1415: u1,
                ///  B1416
                B1416: u1,
                ///  B1417
                B1417: u1,
                ///  B1418
                B1418: u1,
                ///  B1419
                B1419: u1,
                ///  B1420
                B1420: u1,
                ///  B1421
                B1421: u1,
                ///  B1422
                B1422: u1,
                ///  B1423
                B1423: u1,
                ///  B1424
                B1424: u1,
                ///  B1425
                B1425: u1,
                ///  B1426
                B1426: u1,
                ///  B1427
                B1427: u1,
                ///  B1428
                B1428: u1,
                ///  B1429
                B1429: u1,
                ///  B1430
                B1430: u1,
                ///  B1431
                B1431: u1,
                ///  B1432
                B1432: u1,
                ///  B1433
                B1433: u1,
                ///  B1434
                B1434: u1,
                ///  B1435
                B1435: u1,
                ///  B1436
                B1436: u1,
                ///  B1437
                B1437: u1,
                ///  B1438
                B1438: u1,
                ///  B1439
                B1439: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR45: mmio.Mmio(packed struct(u32) {
                ///  B1440
                B1440: u1,
                ///  B1441
                B1441: u1,
                ///  B1442
                B1442: u1,
                ///  B1443
                B1443: u1,
                ///  B1444
                B1444: u1,
                ///  B1445
                B1445: u1,
                ///  B1446
                B1446: u1,
                ///  B1447
                B1447: u1,
                ///  B1448
                B1448: u1,
                ///  B1449
                B1449: u1,
                ///  B1450
                B1450: u1,
                ///  B1451
                B1451: u1,
                ///  B1452
                B1452: u1,
                ///  B1453
                B1453: u1,
                ///  B1454
                B1454: u1,
                ///  B1455
                B1455: u1,
                ///  B1456
                B1456: u1,
                ///  B1457
                B1457: u1,
                ///  B1458
                B1458: u1,
                ///  B1459
                B1459: u1,
                ///  B1460
                B1460: u1,
                ///  B1461
                B1461: u1,
                ///  B1462
                B1462: u1,
                ///  B1463
                B1463: u1,
                ///  B1464
                B1464: u1,
                ///  B1465
                B1465: u1,
                ///  B1466
                B1466: u1,
                ///  B1467
                B1467: u1,
                ///  B1468
                B1468: u1,
                ///  B1469
                B1469: u1,
                ///  B1470
                B1470: u1,
                ///  B1471
                B1471: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR46: mmio.Mmio(packed struct(u32) {
                ///  B1472
                B1472: u1,
                ///  B1473
                B1473: u1,
                ///  B1474
                B1474: u1,
                ///  B1475
                B1475: u1,
                ///  B1476
                B1476: u1,
                ///  B1477
                B1477: u1,
                ///  B1478
                B1478: u1,
                ///  B1479
                B1479: u1,
                ///  B1480
                B1480: u1,
                ///  B1481
                B1481: u1,
                ///  B1482
                B1482: u1,
                ///  B1483
                B1483: u1,
                ///  B1484
                B1484: u1,
                ///  B1485
                B1485: u1,
                ///  B1486
                B1486: u1,
                ///  B1487
                B1487: u1,
                ///  B1488
                B1488: u1,
                ///  B1489
                B1489: u1,
                ///  B1490
                B1490: u1,
                ///  B1491
                B1491: u1,
                ///  B1492
                B1492: u1,
                ///  B1493
                B1493: u1,
                ///  B1494
                B1494: u1,
                ///  B1495
                B1495: u1,
                ///  B1496
                B1496: u1,
                ///  B1497
                B1497: u1,
                ///  B1498
                B1498: u1,
                ///  B1499
                B1499: u1,
                ///  B1500
                B1500: u1,
                ///  B1501
                B1501: u1,
                ///  B1502
                B1502: u1,
                ///  B1503
                B1503: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR47: mmio.Mmio(packed struct(u32) {
                ///  B1504
                B1504: u1,
                ///  B1505
                B1505: u1,
                ///  B1506
                B1506: u1,
                ///  B1507
                B1507: u1,
                ///  B1508
                B1508: u1,
                ///  B1509
                B1509: u1,
                ///  B1510
                B1510: u1,
                ///  B1511
                B1511: u1,
                ///  B1512
                B1512: u1,
                ///  B1513
                B1513: u1,
                ///  B1514
                B1514: u1,
                ///  B1515
                B1515: u1,
                ///  B1516
                B1516: u1,
                ///  B1517
                B1517: u1,
                ///  B1518
                B1518: u1,
                ///  B1519
                B1519: u1,
                ///  B1520
                B1520: u1,
                ///  B1521
                B1521: u1,
                ///  B1522
                B1522: u1,
                ///  B1523
                B1523: u1,
                ///  B1524
                B1524: u1,
                ///  B1525
                B1525: u1,
                ///  B1526
                B1526: u1,
                ///  B1527
                B1527: u1,
                ///  B1528
                B1528: u1,
                ///  B1529
                B1529: u1,
                ///  B1530
                B1530: u1,
                ///  B1531
                B1531: u1,
                ///  B1532
                B1532: u1,
                ///  B1533
                B1533: u1,
                ///  B1534
                B1534: u1,
                ///  B1535
                B1535: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR48: mmio.Mmio(packed struct(u32) {
                ///  B1536
                B1536: u1,
                ///  B1537
                B1537: u1,
                ///  B1538
                B1538: u1,
                ///  B1539
                B1539: u1,
                ///  B1540
                B1540: u1,
                ///  B1541
                B1541: u1,
                ///  B1542
                B1542: u1,
                ///  B1543
                B1543: u1,
                ///  B1544
                B1544: u1,
                ///  B1545
                B1545: u1,
                ///  B1546
                B1546: u1,
                ///  B1547
                B1547: u1,
                ///  B1548
                B1548: u1,
                ///  B1549
                B1549: u1,
                ///  B1550
                B1550: u1,
                ///  B1551
                B1551: u1,
                ///  B1552
                B1552: u1,
                ///  B1553
                B1553: u1,
                ///  B1554
                B1554: u1,
                ///  B1555
                B1555: u1,
                ///  B1556
                B1556: u1,
                ///  B1557
                B1557: u1,
                ///  B1558
                B1558: u1,
                ///  B1559
                B1559: u1,
                ///  B1560
                B1560: u1,
                ///  B1561
                B1561: u1,
                ///  B1562
                B1562: u1,
                ///  B1563
                B1563: u1,
                ///  B1564
                B1564: u1,
                ///  B1565
                B1565: u1,
                ///  B1566
                B1566: u1,
                ///  B1567
                B1567: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR49: mmio.Mmio(packed struct(u32) {
                ///  B1568
                B1568: u1,
                ///  B1569
                B1569: u1,
                ///  B1570
                B1570: u1,
                ///  B1571
                B1571: u1,
                ///  B1572
                B1572: u1,
                ///  B1573
                B1573: u1,
                ///  B1574
                B1574: u1,
                ///  B1575
                B1575: u1,
                ///  B1576
                B1576: u1,
                ///  B1577
                B1577: u1,
                ///  B1578
                B1578: u1,
                ///  B1579
                B1579: u1,
                ///  B1580
                B1580: u1,
                ///  B1581
                B1581: u1,
                ///  B1582
                B1582: u1,
                ///  B1583
                B1583: u1,
                ///  B1584
                B1584: u1,
                ///  B1585
                B1585: u1,
                ///  B1586
                B1586: u1,
                ///  B1587
                B1587: u1,
                ///  B1588
                B1588: u1,
                ///  B1589
                B1589: u1,
                ///  B1590
                B1590: u1,
                ///  B1591
                B1591: u1,
                ///  B1592
                B1592: u1,
                ///  B1593
                B1593: u1,
                ///  B1594
                B1594: u1,
                ///  B1595
                B1595: u1,
                ///  B1596
                B1596: u1,
                ///  B1597
                B1597: u1,
                ///  B1598
                B1598: u1,
                ///  B1599
                B1599: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR50: mmio.Mmio(packed struct(u32) {
                ///  B1600
                B1600: u1,
                ///  B1601
                B1601: u1,
                ///  B1602
                B1602: u1,
                ///  B1603
                B1603: u1,
                ///  B1604
                B1604: u1,
                ///  B1605
                B1605: u1,
                ///  B1606
                B1606: u1,
                ///  B1607
                B1607: u1,
                ///  B1608
                B1608: u1,
                ///  B1609
                B1609: u1,
                ///  B1610
                B1610: u1,
                ///  B1611
                B1611: u1,
                ///  B1612
                B1612: u1,
                ///  B1613
                B1613: u1,
                ///  B1614
                B1614: u1,
                ///  B1615
                B1615: u1,
                ///  B1616
                B1616: u1,
                ///  B1617
                B1617: u1,
                ///  B1618
                B1618: u1,
                ///  B1619
                B1619: u1,
                ///  B1620
                B1620: u1,
                ///  B1621
                B1621: u1,
                ///  B1622
                B1622: u1,
                ///  B1623
                B1623: u1,
                ///  B1624
                B1624: u1,
                ///  B1625
                B1625: u1,
                ///  B1626
                B1626: u1,
                ///  B1627
                B1627: u1,
                ///  B1628
                B1628: u1,
                ///  B1629
                B1629: u1,
                ///  B1630
                B1630: u1,
                ///  B1631
                B1631: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR51: mmio.Mmio(packed struct(u32) {
                ///  B1632
                B1632: u1,
                ///  B1633
                B1633: u1,
                ///  B1634
                B1634: u1,
                ///  B1635
                B1635: u1,
                ///  B1636
                B1636: u1,
                ///  B1637
                B1637: u1,
                ///  B1638
                B1638: u1,
                ///  B1639
                B1639: u1,
                ///  B1640
                B1640: u1,
                ///  B1641
                B1641: u1,
                ///  B1642
                B1642: u1,
                ///  B1643
                B1643: u1,
                ///  B1644
                B1644: u1,
                ///  B1645
                B1645: u1,
                ///  B1646
                B1646: u1,
                ///  B1647
                B1647: u1,
                ///  B1648
                B1648: u1,
                ///  B1649
                B1649: u1,
                ///  B1650
                B1650: u1,
                ///  B1651
                B1651: u1,
                ///  B1652
                B1652: u1,
                ///  B1653
                B1653: u1,
                ///  B1654
                B1654: u1,
                ///  B1655
                B1655: u1,
                ///  B1656
                B1656: u1,
                ///  B1657
                B1657: u1,
                ///  B1658
                B1658: u1,
                ///  B1659
                B1659: u1,
                ///  B1660
                B1660: u1,
                ///  B1661
                B1661: u1,
                ///  B1662
                B1662: u1,
                ///  B1663
                B1663: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR52: mmio.Mmio(packed struct(u32) {
                ///  B1664
                B1664: u1,
                ///  B1665
                B1665: u1,
                ///  B1666
                B1666: u1,
                ///  B1667
                B1667: u1,
                ///  B1668
                B1668: u1,
                ///  B1669
                B1669: u1,
                ///  B1670
                B1670: u1,
                ///  B1671
                B1671: u1,
                ///  B1672
                B1672: u1,
                ///  B1673
                B1673: u1,
                ///  B1674
                B1674: u1,
                ///  B1675
                B1675: u1,
                ///  B1676
                B1676: u1,
                ///  B1677
                B1677: u1,
                ///  B1678
                B1678: u1,
                ///  B1679
                B1679: u1,
                ///  B1680
                B1680: u1,
                ///  B1681
                B1681: u1,
                ///  B1682
                B1682: u1,
                ///  B1683
                B1683: u1,
                ///  B1684
                B1684: u1,
                ///  B1685
                B1685: u1,
                ///  B1686
                B1686: u1,
                ///  B1687
                B1687: u1,
                ///  B1688
                B1688: u1,
                ///  B1689
                B1689: u1,
                ///  B1690
                B1690: u1,
                ///  B1691
                B1691: u1,
                ///  B1692
                B1692: u1,
                ///  B1693
                B1693: u1,
                ///  B1694
                B1694: u1,
                ///  B1695
                B1695: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR53: mmio.Mmio(packed struct(u32) {
                ///  B1696
                B1696: u1,
                ///  B1697
                B1697: u1,
                ///  B1698
                B1698: u1,
                ///  B1699
                B1699: u1,
                ///  B1700
                B1700: u1,
                ///  B1701
                B1701: u1,
                ///  B1702
                B1702: u1,
                ///  B1703
                B1703: u1,
                ///  B1704
                B1704: u1,
                ///  B1705
                B1705: u1,
                ///  B1706
                B1706: u1,
                ///  B1707
                B1707: u1,
                ///  B1708
                B1708: u1,
                ///  B1709
                B1709: u1,
                ///  B1710
                B1710: u1,
                ///  B1711
                B1711: u1,
                ///  B1712
                B1712: u1,
                ///  B1713
                B1713: u1,
                ///  B1714
                B1714: u1,
                ///  B1715
                B1715: u1,
                ///  B1716
                B1716: u1,
                ///  B1717
                B1717: u1,
                ///  B1718
                B1718: u1,
                ///  B1719
                B1719: u1,
                ///  B1720
                B1720: u1,
                ///  B1721
                B1721: u1,
                ///  B1722
                B1722: u1,
                ///  B1723
                B1723: u1,
                ///  B1724
                B1724: u1,
                ///  B1725
                B1725: u1,
                ///  B1726
                B1726: u1,
                ///  B1727
                B1727: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR54: mmio.Mmio(packed struct(u32) {
                ///  B1728
                B1728: u1,
                ///  B1729
                B1729: u1,
                ///  B1730
                B1730: u1,
                ///  B1731
                B1731: u1,
                ///  B1732
                B1732: u1,
                ///  B1733
                B1733: u1,
                ///  B1734
                B1734: u1,
                ///  B1735
                B1735: u1,
                ///  B1736
                B1736: u1,
                ///  B1737
                B1737: u1,
                ///  B1738
                B1738: u1,
                ///  B1739
                B1739: u1,
                ///  B1740
                B1740: u1,
                ///  B1741
                B1741: u1,
                ///  B1742
                B1742: u1,
                ///  B1743
                B1743: u1,
                ///  B1744
                B1744: u1,
                ///  B1745
                B1745: u1,
                ///  B1746
                B1746: u1,
                ///  B1747
                B1747: u1,
                ///  B1748
                B1748: u1,
                ///  B1749
                B1749: u1,
                ///  B1750
                B1750: u1,
                ///  B1751
                B1751: u1,
                ///  B1752
                B1752: u1,
                ///  B1753
                B1753: u1,
                ///  B1754
                B1754: u1,
                ///  B1755
                B1755: u1,
                ///  B1756
                B1756: u1,
                ///  B1757
                B1757: u1,
                ///  B1758
                B1758: u1,
                ///  B1759
                B1759: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR55: mmio.Mmio(packed struct(u32) {
                ///  B1760
                B1760: u1,
                ///  B1761
                B1761: u1,
                ///  B1762
                B1762: u1,
                ///  B1763
                B1763: u1,
                ///  B1764
                B1764: u1,
                ///  B1765
                B1765: u1,
                ///  B1766
                B1766: u1,
                ///  B1767
                B1767: u1,
                ///  B1768
                B1768: u1,
                ///  B1769
                B1769: u1,
                ///  B1770
                B1770: u1,
                ///  B1771
                B1771: u1,
                ///  B1772
                B1772: u1,
                ///  B1773
                B1773: u1,
                ///  B1774
                B1774: u1,
                ///  B1775
                B1775: u1,
                ///  B1776
                B1776: u1,
                ///  B1777
                B1777: u1,
                ///  B1778
                B1778: u1,
                ///  B1779
                B1779: u1,
                ///  B1780
                B1780: u1,
                ///  B1781
                B1781: u1,
                ///  B1782
                B1782: u1,
                ///  B1783
                B1783: u1,
                ///  B1784
                B1784: u1,
                ///  B1785
                B1785: u1,
                ///  B1786
                B1786: u1,
                ///  B1787
                B1787: u1,
                ///  B1788
                B1788: u1,
                ///  B1789
                B1789: u1,
                ///  B1790
                B1790: u1,
                ///  B1791
                B1791: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR56: mmio.Mmio(packed struct(u32) {
                ///  B1792
                B1792: u1,
                ///  B1793
                B1793: u1,
                ///  B1794
                B1794: u1,
                ///  B1795
                B1795: u1,
                ///  B1796
                B1796: u1,
                ///  B1797
                B1797: u1,
                ///  B1798
                B1798: u1,
                ///  B1799
                B1799: u1,
                ///  B1800
                B1800: u1,
                ///  B1801
                B1801: u1,
                ///  B1802
                B1802: u1,
                ///  B1803
                B1803: u1,
                ///  B1804
                B1804: u1,
                ///  B1805
                B1805: u1,
                ///  B1806
                B1806: u1,
                ///  B1807
                B1807: u1,
                ///  B1808
                B1808: u1,
                ///  B1809
                B1809: u1,
                ///  B1810
                B1810: u1,
                ///  B1811
                B1811: u1,
                ///  B1812
                B1812: u1,
                ///  B1813
                B1813: u1,
                ///  B1814
                B1814: u1,
                ///  B1815
                B1815: u1,
                ///  B1816
                B1816: u1,
                ///  B1817
                B1817: u1,
                ///  B1818
                B1818: u1,
                ///  B1819
                B1819: u1,
                ///  B1820
                B1820: u1,
                ///  B1821
                B1821: u1,
                ///  B1822
                B1822: u1,
                ///  B1823
                B1823: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR57: mmio.Mmio(packed struct(u32) {
                ///  B1824
                B1824: u1,
                ///  B1825
                B1825: u1,
                ///  B1826
                B1826: u1,
                ///  B1827
                B1827: u1,
                ///  B1828
                B1828: u1,
                ///  B1829
                B1829: u1,
                ///  B1830
                B1830: u1,
                ///  B1831
                B1831: u1,
                ///  B1832
                B1832: u1,
                ///  B1833
                B1833: u1,
                ///  B1834
                B1834: u1,
                ///  B1835
                B1835: u1,
                ///  B1836
                B1836: u1,
                ///  B1837
                B1837: u1,
                ///  B1838
                B1838: u1,
                ///  B1839
                B1839: u1,
                ///  B1840
                B1840: u1,
                ///  B1841
                B1841: u1,
                ///  B1842
                B1842: u1,
                ///  B1843
                B1843: u1,
                ///  B1844
                B1844: u1,
                ///  B1845
                B1845: u1,
                ///  B1846
                B1846: u1,
                ///  B1847
                B1847: u1,
                ///  B1848
                B1848: u1,
                ///  B1849
                B1849: u1,
                ///  B1850
                B1850: u1,
                ///  B1851
                B1851: u1,
                ///  B1852
                B1852: u1,
                ///  B1853
                B1853: u1,
                ///  B1854
                B1854: u1,
                ///  B1855
                B1855: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR58: mmio.Mmio(packed struct(u32) {
                ///  B1856
                B1856: u1,
                ///  B1857
                B1857: u1,
                ///  B1858
                B1858: u1,
                ///  B1859
                B1859: u1,
                ///  B1860
                B1860: u1,
                ///  B1861
                B1861: u1,
                ///  B1862
                B1862: u1,
                ///  B1863
                B1863: u1,
                ///  B1864
                B1864: u1,
                ///  B1865
                B1865: u1,
                ///  B1866
                B1866: u1,
                ///  B1867
                B1867: u1,
                ///  B1868
                B1868: u1,
                ///  B1869
                B1869: u1,
                ///  B1870
                B1870: u1,
                ///  B1871
                B1871: u1,
                ///  B1872
                B1872: u1,
                ///  B1873
                B1873: u1,
                ///  B1874
                B1874: u1,
                ///  B1875
                B1875: u1,
                ///  B1876
                B1876: u1,
                ///  B1877
                B1877: u1,
                ///  B1878
                B1878: u1,
                ///  B1879
                B1879: u1,
                ///  B1880
                B1880: u1,
                ///  B1881
                B1881: u1,
                ///  B1882
                B1882: u1,
                ///  B1883
                B1883: u1,
                ///  B1884
                B1884: u1,
                ///  B1885
                B1885: u1,
                ///  B1886
                B1886: u1,
                ///  B1887
                B1887: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR59: mmio.Mmio(packed struct(u32) {
                ///  B1888
                B1888: u1,
                ///  B1889
                B1889: u1,
                ///  B1890
                B1890: u1,
                ///  B1891
                B1891: u1,
                ///  B1892
                B1892: u1,
                ///  B1893
                B1893: u1,
                ///  B1894
                B1894: u1,
                ///  B1895
                B1895: u1,
                ///  B1896
                B1896: u1,
                ///  B1897
                B1897: u1,
                ///  B1898
                B1898: u1,
                ///  B1899
                B1899: u1,
                ///  B1900
                B1900: u1,
                ///  B1901
                B1901: u1,
                ///  B1902
                B1902: u1,
                ///  B1903
                B1903: u1,
                ///  B1904
                B1904: u1,
                ///  B1905
                B1905: u1,
                ///  B1906
                B1906: u1,
                ///  B1907
                B1907: u1,
                ///  B1908
                B1908: u1,
                ///  B1909
                B1909: u1,
                ///  B1910
                B1910: u1,
                ///  B1911
                B1911: u1,
                ///  B1912
                B1912: u1,
                ///  B1913
                B1913: u1,
                ///  B1914
                B1914: u1,
                ///  B1915
                B1915: u1,
                ///  B1916
                B1916: u1,
                ///  B1917
                B1917: u1,
                ///  B1918
                B1918: u1,
                ///  B1919
                B1919: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR60: mmio.Mmio(packed struct(u32) {
                ///  B1920
                B1920: u1,
                ///  B1921
                B1921: u1,
                ///  B1922
                B1922: u1,
                ///  B1923
                B1923: u1,
                ///  B1924
                B1924: u1,
                ///  B1925
                B1925: u1,
                ///  B1926
                B1926: u1,
                ///  B1927
                B1927: u1,
                ///  B1928
                B1928: u1,
                ///  B1929
                B1929: u1,
                ///  B1930
                B1930: u1,
                ///  B1931
                B1931: u1,
                ///  B1932
                B1932: u1,
                ///  B1933
                B1933: u1,
                ///  B1934
                B1934: u1,
                ///  B1935
                B1935: u1,
                ///  B1936
                B1936: u1,
                ///  B1937
                B1937: u1,
                ///  B1938
                B1938: u1,
                ///  B1939
                B1939: u1,
                ///  B1940
                B1940: u1,
                ///  B1941
                B1941: u1,
                ///  B1942
                B1942: u1,
                ///  B1943
                B1943: u1,
                ///  B1944
                B1944: u1,
                ///  B1945
                B1945: u1,
                ///  B1946
                B1946: u1,
                ///  B1947
                B1947: u1,
                ///  B1948
                B1948: u1,
                ///  B1949
                B1949: u1,
                ///  B1950
                B1950: u1,
                ///  B1951
                B1951: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR61: mmio.Mmio(packed struct(u32) {
                ///  B1952
                B1952: u1,
                ///  B1953
                B1953: u1,
                ///  B1954
                B1954: u1,
                ///  B1955
                B1955: u1,
                ///  B1956
                B1956: u1,
                ///  B1957
                B1957: u1,
                ///  B1958
                B1958: u1,
                ///  B1959
                B1959: u1,
                ///  B1960
                B1960: u1,
                ///  B1961
                B1961: u1,
                ///  B1962
                B1962: u1,
                ///  B1963
                B1963: u1,
                ///  B1964
                B1964: u1,
                ///  B1965
                B1965: u1,
                ///  B1966
                B1966: u1,
                ///  B1967
                B1967: u1,
                ///  B1968
                B1968: u1,
                ///  B1969
                B1969: u1,
                ///  B1970
                B1970: u1,
                ///  B1971
                B1971: u1,
                ///  B1972
                B1972: u1,
                ///  B1973
                B1973: u1,
                ///  B1974
                B1974: u1,
                ///  B1975
                B1975: u1,
                ///  B1976
                B1976: u1,
                ///  B1977
                B1977: u1,
                ///  B1978
                B1978: u1,
                ///  B1979
                B1979: u1,
                ///  B1980
                B1980: u1,
                ///  B1981
                B1981: u1,
                ///  B1982
                B1982: u1,
                ///  B1983
                B1983: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR62: mmio.Mmio(packed struct(u32) {
                ///  B1984
                B1984: u1,
                ///  B1985
                B1985: u1,
                ///  B1986
                B1986: u1,
                ///  B1987
                B1987: u1,
                ///  B1988
                B1988: u1,
                ///  B1989
                B1989: u1,
                ///  B1990
                B1990: u1,
                ///  B1991
                B1991: u1,
                ///  B1992
                B1992: u1,
                ///  B1993
                B1993: u1,
                ///  B1994
                B1994: u1,
                ///  B1995
                B1995: u1,
                ///  B1996
                B1996: u1,
                ///  B1997
                B1997: u1,
                ///  B1998
                B1998: u1,
                ///  B1999
                B1999: u1,
                ///  B2000
                B2000: u1,
                ///  B2001
                B2001: u1,
                ///  B2002
                B2002: u1,
                ///  B2003
                B2003: u1,
                ///  B2004
                B2004: u1,
                ///  B2005
                B2005: u1,
                ///  B2006
                B2006: u1,
                ///  B2007
                B2007: u1,
                ///  B2008
                B2008: u1,
                ///  B2009
                B2009: u1,
                ///  B2010
                B2010: u1,
                ///  B2011
                B2011: u1,
                ///  B2012
                B2012: u1,
                ///  B2013
                B2013: u1,
                ///  B2014
                B2014: u1,
                ///  B2015
                B2015: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR63: mmio.Mmio(packed struct(u32) {
                ///  B2016
                B2016: u1,
                ///  B2017
                B2017: u1,
                ///  B2018
                B2018: u1,
                ///  B2019
                B2019: u1,
                ///  B2020
                B2020: u1,
                ///  B2021
                B2021: u1,
                ///  B2022
                B2022: u1,
                ///  B2023
                B2023: u1,
                ///  B2024
                B2024: u1,
                ///  B2025
                B2025: u1,
                ///  B2026
                B2026: u1,
                ///  B2027
                B2027: u1,
                ///  B2028
                B2028: u1,
                ///  B2029
                B2029: u1,
                ///  B2030
                B2030: u1,
                ///  B2031
                B2031: u1,
                ///  B2032
                B2032: u1,
                ///  B2033
                B2033: u1,
                ///  B2034
                B2034: u1,
                ///  B2035
                B2035: u1,
                ///  B2036
                B2036: u1,
                ///  B2037
                B2037: u1,
                ///  B2038
                B2038: u1,
                ///  B2039
                B2039: u1,
                ///  B2040
                B2040: u1,
                ///  B2041
                B2041: u1,
                ///  B2042
                B2042: u1,
                ///  B2043
                B2043: u1,
                ///  B2044
                B2044: u1,
                ///  B2045
                B2045: u1,
                ///  B2046
                B2046: u1,
                ///  B2047
                B2047: u1,
            }),
        };

        ///  GTZC_MPCBB2
        pub const GTZC_MPCBB2 = extern struct {
            ///  MPCBB control register
            MPCBB2_CR: mmio.Mmio(packed struct(u32) {
                ///  LCK
                LCK: u1,
                reserved30: u29,
                ///  INVSECSTATE
                INVSECSTATE: u1,
                ///  SRWILADIS
                SRWILADIS: u1,
            }),
            reserved16: [12]u8,
            ///  MPCBB control register
            MPCBB2_LCKVTR1: mmio.Mmio(packed struct(u32) {
                ///  LCKSB0
                LCKSB0: u1,
                ///  LCKSB1
                LCKSB1: u1,
                ///  LCKSB2
                LCKSB2: u1,
                ///  LCKSB3
                LCKSB3: u1,
                ///  LCKSB4
                LCKSB4: u1,
                ///  LCKSB5
                LCKSB5: u1,
                ///  LCKSB6
                LCKSB6: u1,
                ///  LCKSB7
                LCKSB7: u1,
                ///  LCKSB8
                LCKSB8: u1,
                ///  LCKSB9
                LCKSB9: u1,
                ///  LCKSB10
                LCKSB10: u1,
                ///  LCKSB11
                LCKSB11: u1,
                ///  LCKSB12
                LCKSB12: u1,
                ///  LCKSB13
                LCKSB13: u1,
                ///  LCKSB14
                LCKSB14: u1,
                ///  LCKSB15
                LCKSB15: u1,
                ///  LCKSB16
                LCKSB16: u1,
                ///  LCKSB17
                LCKSB17: u1,
                ///  LCKSB18
                LCKSB18: u1,
                ///  LCKSB19
                LCKSB19: u1,
                ///  LCKSB20
                LCKSB20: u1,
                ///  LCKSB21
                LCKSB21: u1,
                ///  LCKSB22
                LCKSB22: u1,
                ///  LCKSB23
                LCKSB23: u1,
                ///  LCKSB24
                LCKSB24: u1,
                ///  LCKSB25
                LCKSB25: u1,
                ///  LCKSB26
                LCKSB26: u1,
                ///  LCKSB27
                LCKSB27: u1,
                ///  LCKSB28
                LCKSB28: u1,
                ///  LCKSB29
                LCKSB29: u1,
                ///  LCKSB30
                LCKSB30: u1,
                ///  LCKSB31
                LCKSB31: u1,
            }),
            ///  MPCBB control register
            MPCBB2_LCKVTR2: mmio.Mmio(packed struct(u32) {
                ///  LCKSB32
                LCKSB32: u1,
                ///  LCKSB33
                LCKSB33: u1,
                ///  LCKSB34
                LCKSB34: u1,
                ///  LCKSB35
                LCKSB35: u1,
                ///  LCKSB36
                LCKSB36: u1,
                ///  LCKSB37
                LCKSB37: u1,
                ///  LCKSB38
                LCKSB38: u1,
                ///  LCKSB39
                LCKSB39: u1,
                ///  LCKSB40
                LCKSB40: u1,
                ///  LCKSB41
                LCKSB41: u1,
                ///  LCKSB42
                LCKSB42: u1,
                ///  LCKSB43
                LCKSB43: u1,
                ///  LCKSB44
                LCKSB44: u1,
                ///  LCKSB45
                LCKSB45: u1,
                ///  LCKSB46
                LCKSB46: u1,
                ///  LCKSB47
                LCKSB47: u1,
                ///  LCKSB48
                LCKSB48: u1,
                ///  LCKSB49
                LCKSB49: u1,
                ///  LCKSB50
                LCKSB50: u1,
                ///  LCKSB51
                LCKSB51: u1,
                ///  LCKSB52
                LCKSB52: u1,
                ///  LCKSB53
                LCKSB53: u1,
                ///  LCKSB54
                LCKSB54: u1,
                ///  LCKSB55
                LCKSB55: u1,
                ///  LCKSB56
                LCKSB56: u1,
                ///  LCKSB57
                LCKSB57: u1,
                ///  LCKSB58
                LCKSB58: u1,
                ///  LCKSB59
                LCKSB59: u1,
                ///  LCKSB60
                LCKSB60: u1,
                ///  LCKSB61
                LCKSB61: u1,
                ///  LCKSB62
                LCKSB62: u1,
                ///  LCKSB63
                LCKSB63: u1,
            }),
            reserved256: [232]u8,
            ///  MPCBBx vector register
            MPCBB2_VCTR0: mmio.Mmio(packed struct(u32) {
                ///  B0
                B0: u1,
                ///  B1
                B1: u1,
                ///  B2
                B2: u1,
                ///  B3
                B3: u1,
                ///  B4
                B4: u1,
                ///  B5
                B5: u1,
                ///  B6
                B6: u1,
                ///  B7
                B7: u1,
                ///  B8
                B8: u1,
                ///  B9
                B9: u1,
                ///  B10
                B10: u1,
                ///  B11
                B11: u1,
                ///  B12
                B12: u1,
                ///  B13
                B13: u1,
                ///  B14
                B14: u1,
                ///  B15
                B15: u1,
                ///  B16
                B16: u1,
                ///  B17
                B17: u1,
                ///  B18
                B18: u1,
                ///  B19
                B19: u1,
                ///  B20
                B20: u1,
                ///  B21
                B21: u1,
                ///  B22
                B22: u1,
                ///  B23
                B23: u1,
                ///  B24
                B24: u1,
                ///  B25
                B25: u1,
                ///  B26
                B26: u1,
                ///  B27
                B27: u1,
                ///  B28
                B28: u1,
                ///  B29
                B29: u1,
                ///  B30
                B30: u1,
                ///  B31
                B31: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR1: mmio.Mmio(packed struct(u32) {
                ///  B32
                B32: u1,
                ///  B33
                B33: u1,
                ///  B34
                B34: u1,
                ///  B35
                B35: u1,
                ///  B36
                B36: u1,
                ///  B37
                B37: u1,
                ///  B38
                B38: u1,
                ///  B39
                B39: u1,
                ///  B40
                B40: u1,
                ///  B41
                B41: u1,
                ///  B42
                B42: u1,
                ///  B43
                B43: u1,
                ///  B44
                B44: u1,
                ///  B45
                B45: u1,
                ///  B46
                B46: u1,
                ///  B47
                B47: u1,
                ///  B48
                B48: u1,
                ///  B49
                B49: u1,
                ///  B50
                B50: u1,
                ///  B51
                B51: u1,
                ///  B52
                B52: u1,
                ///  B53
                B53: u1,
                ///  B54
                B54: u1,
                ///  B55
                B55: u1,
                ///  B56
                B56: u1,
                ///  B57
                B57: u1,
                ///  B58
                B58: u1,
                ///  B59
                B59: u1,
                ///  B60
                B60: u1,
                ///  B61
                B61: u1,
                ///  B62
                B62: u1,
                ///  B63
                B63: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR2: mmio.Mmio(packed struct(u32) {
                ///  B64
                B64: u1,
                ///  B65
                B65: u1,
                ///  B66
                B66: u1,
                ///  B67
                B67: u1,
                ///  B68
                B68: u1,
                ///  B69
                B69: u1,
                ///  B70
                B70: u1,
                ///  B71
                B71: u1,
                ///  B72
                B72: u1,
                ///  B73
                B73: u1,
                ///  B74
                B74: u1,
                ///  B75
                B75: u1,
                ///  B76
                B76: u1,
                ///  B77
                B77: u1,
                ///  B78
                B78: u1,
                ///  B79
                B79: u1,
                ///  B80
                B80: u1,
                ///  B81
                B81: u1,
                ///  B82
                B82: u1,
                ///  B83
                B83: u1,
                ///  B84
                B84: u1,
                ///  B85
                B85: u1,
                ///  B86
                B86: u1,
                ///  B87
                B87: u1,
                ///  B88
                B88: u1,
                ///  B89
                B89: u1,
                ///  B90
                B90: u1,
                ///  B91
                B91: u1,
                ///  B92
                B92: u1,
                ///  B93
                B93: u1,
                ///  B94
                B94: u1,
                ///  B95
                B95: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR3: mmio.Mmio(packed struct(u32) {
                ///  B96
                B96: u1,
                ///  B97
                B97: u1,
                ///  B98
                B98: u1,
                ///  B99
                B99: u1,
                ///  B100
                B100: u1,
                ///  B101
                B101: u1,
                ///  B102
                B102: u1,
                ///  B103
                B103: u1,
                ///  B104
                B104: u1,
                ///  B105
                B105: u1,
                ///  B106
                B106: u1,
                ///  B107
                B107: u1,
                ///  B108
                B108: u1,
                ///  B109
                B109: u1,
                ///  B110
                B110: u1,
                ///  B111
                B111: u1,
                ///  B112
                B112: u1,
                ///  B113
                B113: u1,
                ///  B114
                B114: u1,
                ///  B115
                B115: u1,
                ///  B116
                B116: u1,
                ///  B117
                B117: u1,
                ///  B118
                B118: u1,
                ///  B119
                B119: u1,
                ///  B120
                B120: u1,
                ///  B121
                B121: u1,
                ///  B122
                B122: u1,
                ///  B123
                B123: u1,
                ///  B124
                B124: u1,
                ///  B125
                B125: u1,
                ///  B126
                B126: u1,
                ///  B127
                B127: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR4: mmio.Mmio(packed struct(u32) {
                ///  B128
                B128: u1,
                ///  B129
                B129: u1,
                ///  B130
                B130: u1,
                ///  B131
                B131: u1,
                ///  B132
                B132: u1,
                ///  B133
                B133: u1,
                ///  B134
                B134: u1,
                ///  B135
                B135: u1,
                ///  B136
                B136: u1,
                ///  B137
                B137: u1,
                ///  B138
                B138: u1,
                ///  B139
                B139: u1,
                ///  B140
                B140: u1,
                ///  B141
                B141: u1,
                ///  B142
                B142: u1,
                ///  B143
                B143: u1,
                ///  B144
                B144: u1,
                ///  B145
                B145: u1,
                ///  B146
                B146: u1,
                ///  B147
                B147: u1,
                ///  B148
                B148: u1,
                ///  B149
                B149: u1,
                ///  B150
                B150: u1,
                ///  B151
                B151: u1,
                ///  B152
                B152: u1,
                ///  B153
                B153: u1,
                ///  B154
                B154: u1,
                ///  B155
                B155: u1,
                ///  B156
                B156: u1,
                ///  B157
                B157: u1,
                ///  B158
                B158: u1,
                ///  B159
                B159: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR5: mmio.Mmio(packed struct(u32) {
                ///  B160
                B160: u1,
                ///  B161
                B161: u1,
                ///  B162
                B162: u1,
                ///  B163
                B163: u1,
                ///  B164
                B164: u1,
                ///  B165
                B165: u1,
                ///  B166
                B166: u1,
                ///  B167
                B167: u1,
                ///  B168
                B168: u1,
                ///  B169
                B169: u1,
                ///  B170
                B170: u1,
                ///  B171
                B171: u1,
                ///  B172
                B172: u1,
                ///  B173
                B173: u1,
                ///  B174
                B174: u1,
                ///  B175
                B175: u1,
                ///  B176
                B176: u1,
                ///  B177
                B177: u1,
                ///  B178
                B178: u1,
                ///  B179
                B179: u1,
                ///  B180
                B180: u1,
                ///  B181
                B181: u1,
                ///  B182
                B182: u1,
                ///  B183
                B183: u1,
                ///  B184
                B184: u1,
                ///  B185
                B185: u1,
                ///  B186
                B186: u1,
                ///  B187
                B187: u1,
                ///  B188
                B188: u1,
                ///  B189
                B189: u1,
                ///  B190
                B190: u1,
                ///  B191
                B191: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR6: mmio.Mmio(packed struct(u32) {
                ///  B192
                B192: u1,
                ///  B193
                B193: u1,
                ///  B194
                B194: u1,
                ///  B195
                B195: u1,
                ///  B196
                B196: u1,
                ///  B197
                B197: u1,
                ///  B198
                B198: u1,
                ///  B199
                B199: u1,
                ///  B200
                B200: u1,
                ///  B201
                B201: u1,
                ///  B202
                B202: u1,
                ///  B203
                B203: u1,
                ///  B204
                B204: u1,
                ///  B205
                B205: u1,
                ///  B206
                B206: u1,
                ///  B207
                B207: u1,
                ///  B208
                B208: u1,
                ///  B209
                B209: u1,
                ///  B210
                B210: u1,
                ///  B211
                B211: u1,
                ///  B212
                B212: u1,
                ///  B213
                B213: u1,
                ///  B214
                B214: u1,
                ///  B215
                B215: u1,
                ///  B216
                B216: u1,
                ///  B217
                B217: u1,
                ///  B218
                B218: u1,
                ///  B219
                B219: u1,
                ///  B220
                B220: u1,
                ///  B221
                B221: u1,
                ///  B222
                B222: u1,
                ///  B223
                B223: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR7: mmio.Mmio(packed struct(u32) {
                ///  B224
                B224: u1,
                ///  B225
                B225: u1,
                ///  B226
                B226: u1,
                ///  B227
                B227: u1,
                ///  B228
                B228: u1,
                ///  B229
                B229: u1,
                ///  B230
                B230: u1,
                ///  B231
                B231: u1,
                ///  B232
                B232: u1,
                ///  B233
                B233: u1,
                ///  B234
                B234: u1,
                ///  B235
                B235: u1,
                ///  B236
                B236: u1,
                ///  B237
                B237: u1,
                ///  B238
                B238: u1,
                ///  B239
                B239: u1,
                ///  B240
                B240: u1,
                ///  B241
                B241: u1,
                ///  B242
                B242: u1,
                ///  B243
                B243: u1,
                ///  B244
                B244: u1,
                ///  B245
                B245: u1,
                ///  B246
                B246: u1,
                ///  B247
                B247: u1,
                ///  B248
                B248: u1,
                ///  B249
                B249: u1,
                ///  B250
                B250: u1,
                ///  B251
                B251: u1,
                ///  B252
                B252: u1,
                ///  B253
                B253: u1,
                ///  B254
                B254: u1,
                ///  B255
                B255: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR8: mmio.Mmio(packed struct(u32) {
                ///  B256
                B256: u1,
                ///  B257
                B257: u1,
                ///  B258
                B258: u1,
                ///  B259
                B259: u1,
                ///  B260
                B260: u1,
                ///  B261
                B261: u1,
                ///  B262
                B262: u1,
                ///  B263
                B263: u1,
                ///  B264
                B264: u1,
                ///  B265
                B265: u1,
                ///  B266
                B266: u1,
                ///  B267
                B267: u1,
                ///  B268
                B268: u1,
                ///  B269
                B269: u1,
                ///  B270
                B270: u1,
                ///  B271
                B271: u1,
                ///  B272
                B272: u1,
                ///  B273
                B273: u1,
                ///  B274
                B274: u1,
                ///  B275
                B275: u1,
                ///  B276
                B276: u1,
                ///  B277
                B277: u1,
                ///  B278
                B278: u1,
                ///  B279
                B279: u1,
                ///  B280
                B280: u1,
                ///  B281
                B281: u1,
                ///  B282
                B282: u1,
                ///  B283
                B283: u1,
                ///  B284
                B284: u1,
                ///  B285
                B285: u1,
                ///  B286
                B286: u1,
                ///  B287
                B287: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR9: mmio.Mmio(packed struct(u32) {
                ///  B288
                B288: u1,
                ///  B289
                B289: u1,
                ///  B290
                B290: u1,
                ///  B291
                B291: u1,
                ///  B292
                B292: u1,
                ///  B293
                B293: u1,
                ///  B294
                B294: u1,
                ///  B295
                B295: u1,
                ///  B296
                B296: u1,
                ///  B297
                B297: u1,
                ///  B298
                B298: u1,
                ///  B299
                B299: u1,
                ///  B300
                B300: u1,
                ///  B301
                B301: u1,
                ///  B302
                B302: u1,
                ///  B303
                B303: u1,
                ///  B304
                B304: u1,
                ///  B305
                B305: u1,
                ///  B306
                B306: u1,
                ///  B307
                B307: u1,
                ///  B308
                B308: u1,
                ///  B309
                B309: u1,
                ///  B310
                B310: u1,
                ///  B311
                B311: u1,
                ///  B312
                B312: u1,
                ///  B313
                B313: u1,
                ///  B314
                B314: u1,
                ///  B315
                B315: u1,
                ///  B316
                B316: u1,
                ///  B317
                B317: u1,
                ///  B318
                B318: u1,
                ///  B319
                B319: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR10: mmio.Mmio(packed struct(u32) {
                ///  B320
                B320: u1,
                ///  B321
                B321: u1,
                ///  B322
                B322: u1,
                ///  B323
                B323: u1,
                ///  B324
                B324: u1,
                ///  B325
                B325: u1,
                ///  B326
                B326: u1,
                ///  B327
                B327: u1,
                ///  B328
                B328: u1,
                ///  B329
                B329: u1,
                ///  B330
                B330: u1,
                ///  B331
                B331: u1,
                ///  B332
                B332: u1,
                ///  B333
                B333: u1,
                ///  B334
                B334: u1,
                ///  B335
                B335: u1,
                ///  B336
                B336: u1,
                ///  B337
                B337: u1,
                ///  B338
                B338: u1,
                ///  B339
                B339: u1,
                ///  B340
                B340: u1,
                ///  B341
                B341: u1,
                ///  B342
                B342: u1,
                ///  B343
                B343: u1,
                ///  B344
                B344: u1,
                ///  B345
                B345: u1,
                ///  B346
                B346: u1,
                ///  B347
                B347: u1,
                ///  B348
                B348: u1,
                ///  B349
                B349: u1,
                ///  B350
                B350: u1,
                ///  B351
                B351: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR11: mmio.Mmio(packed struct(u32) {
                ///  B352
                B352: u1,
                ///  B353
                B353: u1,
                ///  B354
                B354: u1,
                ///  B355
                B355: u1,
                ///  B356
                B356: u1,
                ///  B357
                B357: u1,
                ///  B358
                B358: u1,
                ///  B359
                B359: u1,
                ///  B360
                B360: u1,
                ///  B361
                B361: u1,
                ///  B362
                B362: u1,
                ///  B363
                B363: u1,
                ///  B364
                B364: u1,
                ///  B365
                B365: u1,
                ///  B366
                B366: u1,
                ///  B367
                B367: u1,
                ///  B368
                B368: u1,
                ///  B369
                B369: u1,
                ///  B370
                B370: u1,
                ///  B371
                B371: u1,
                ///  B372
                B372: u1,
                ///  B373
                B373: u1,
                ///  B374
                B374: u1,
                ///  B375
                B375: u1,
                ///  B376
                B376: u1,
                ///  B377
                B377: u1,
                ///  B378
                B378: u1,
                ///  B379
                B379: u1,
                ///  B380
                B380: u1,
                ///  B381
                B381: u1,
                ///  B382
                B382: u1,
                ///  B383
                B383: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR12: mmio.Mmio(packed struct(u32) {
                ///  B384
                B384: u1,
                ///  B385
                B385: u1,
                ///  B386
                B386: u1,
                ///  B387
                B387: u1,
                ///  B388
                B388: u1,
                ///  B389
                B389: u1,
                ///  B390
                B390: u1,
                ///  B391
                B391: u1,
                ///  B392
                B392: u1,
                ///  B393
                B393: u1,
                ///  B394
                B394: u1,
                ///  B395
                B395: u1,
                ///  B396
                B396: u1,
                ///  B397
                B397: u1,
                ///  B398
                B398: u1,
                ///  B399
                B399: u1,
                ///  B400
                B400: u1,
                ///  B401
                B401: u1,
                ///  B402
                B402: u1,
                ///  B403
                B403: u1,
                ///  B404
                B404: u1,
                ///  B405
                B405: u1,
                ///  B406
                B406: u1,
                ///  B407
                B407: u1,
                ///  B408
                B408: u1,
                ///  B409
                B409: u1,
                ///  B410
                B410: u1,
                ///  B411
                B411: u1,
                ///  B412
                B412: u1,
                ///  B413
                B413: u1,
                ///  B414
                B414: u1,
                ///  B415
                B415: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR13: mmio.Mmio(packed struct(u32) {
                ///  B416
                B416: u1,
                ///  B417
                B417: u1,
                ///  B418
                B418: u1,
                ///  B419
                B419: u1,
                ///  B420
                B420: u1,
                ///  B421
                B421: u1,
                ///  B422
                B422: u1,
                ///  B423
                B423: u1,
                ///  B424
                B424: u1,
                ///  B425
                B425: u1,
                ///  B426
                B426: u1,
                ///  B427
                B427: u1,
                ///  B428
                B428: u1,
                ///  B429
                B429: u1,
                ///  B430
                B430: u1,
                ///  B431
                B431: u1,
                ///  B432
                B432: u1,
                ///  B433
                B433: u1,
                ///  B434
                B434: u1,
                ///  B435
                B435: u1,
                ///  B436
                B436: u1,
                ///  B437
                B437: u1,
                ///  B438
                B438: u1,
                ///  B439
                B439: u1,
                ///  B440
                B440: u1,
                ///  B441
                B441: u1,
                ///  B442
                B442: u1,
                ///  B443
                B443: u1,
                ///  B444
                B444: u1,
                ///  B445
                B445: u1,
                ///  B446
                B446: u1,
                ///  B447
                B447: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR14: mmio.Mmio(packed struct(u32) {
                ///  B448
                B448: u1,
                ///  B449
                B449: u1,
                ///  B450
                B450: u1,
                ///  B451
                B451: u1,
                ///  B452
                B452: u1,
                ///  B453
                B453: u1,
                ///  B454
                B454: u1,
                ///  B455
                B455: u1,
                ///  B456
                B456: u1,
                ///  B457
                B457: u1,
                ///  B458
                B458: u1,
                ///  B459
                B459: u1,
                ///  B460
                B460: u1,
                ///  B461
                B461: u1,
                ///  B462
                B462: u1,
                ///  B463
                B463: u1,
                ///  B464
                B464: u1,
                ///  B465
                B465: u1,
                ///  B466
                B466: u1,
                ///  B467
                B467: u1,
                ///  B468
                B468: u1,
                ///  B469
                B469: u1,
                ///  B470
                B470: u1,
                ///  B471
                B471: u1,
                ///  B472
                B472: u1,
                ///  B473
                B473: u1,
                ///  B474
                B474: u1,
                ///  B475
                B475: u1,
                ///  B476
                B476: u1,
                ///  B477
                B477: u1,
                ///  B478
                B478: u1,
                ///  B479
                B479: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR15: mmio.Mmio(packed struct(u32) {
                ///  B480
                B480: u1,
                ///  B481
                B481: u1,
                ///  B482
                B482: u1,
                ///  B483
                B483: u1,
                ///  B484
                B484: u1,
                ///  B485
                B485: u1,
                ///  B486
                B486: u1,
                ///  B487
                B487: u1,
                ///  B488
                B488: u1,
                ///  B489
                B489: u1,
                ///  B490
                B490: u1,
                ///  B491
                B491: u1,
                ///  B492
                B492: u1,
                ///  B493
                B493: u1,
                ///  B494
                B494: u1,
                ///  B495
                B495: u1,
                ///  B496
                B496: u1,
                ///  B497
                B497: u1,
                ///  B498
                B498: u1,
                ///  B499
                B499: u1,
                ///  B500
                B500: u1,
                ///  B501
                B501: u1,
                ///  B502
                B502: u1,
                ///  B503
                B503: u1,
                ///  B504
                B504: u1,
                ///  B505
                B505: u1,
                ///  B506
                B506: u1,
                ///  B507
                B507: u1,
                ///  B508
                B508: u1,
                ///  B509
                B509: u1,
                ///  B510
                B510: u1,
                ///  B511
                B511: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR16: mmio.Mmio(packed struct(u32) {
                ///  B512
                B512: u1,
                ///  B513
                B513: u1,
                ///  B514
                B514: u1,
                ///  B515
                B515: u1,
                ///  B516
                B516: u1,
                ///  B517
                B517: u1,
                ///  B518
                B518: u1,
                ///  B519
                B519: u1,
                ///  B520
                B520: u1,
                ///  B521
                B521: u1,
                ///  B522
                B522: u1,
                ///  B523
                B523: u1,
                ///  B524
                B524: u1,
                ///  B525
                B525: u1,
                ///  B526
                B526: u1,
                ///  B527
                B527: u1,
                ///  B528
                B528: u1,
                ///  B529
                B529: u1,
                ///  B530
                B530: u1,
                ///  B531
                B531: u1,
                ///  B532
                B532: u1,
                ///  B533
                B533: u1,
                ///  B534
                B534: u1,
                ///  B535
                B535: u1,
                ///  B536
                B536: u1,
                ///  B537
                B537: u1,
                ///  B538
                B538: u1,
                ///  B539
                B539: u1,
                ///  B540
                B540: u1,
                ///  B541
                B541: u1,
                ///  B542
                B542: u1,
                ///  B543
                B543: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR17: mmio.Mmio(packed struct(u32) {
                ///  B544
                B544: u1,
                ///  B545
                B545: u1,
                ///  B546
                B546: u1,
                ///  B547
                B547: u1,
                ///  B548
                B548: u1,
                ///  B549
                B549: u1,
                ///  B550
                B550: u1,
                ///  B551
                B551: u1,
                ///  B552
                B552: u1,
                ///  B553
                B553: u1,
                ///  B554
                B554: u1,
                ///  B555
                B555: u1,
                ///  B556
                B556: u1,
                ///  B557
                B557: u1,
                ///  B558
                B558: u1,
                ///  B559
                B559: u1,
                ///  B560
                B560: u1,
                ///  B561
                B561: u1,
                ///  B562
                B562: u1,
                ///  B563
                B563: u1,
                ///  B564
                B564: u1,
                ///  B565
                B565: u1,
                ///  B566
                B566: u1,
                ///  B567
                B567: u1,
                ///  B568
                B568: u1,
                ///  B569
                B569: u1,
                ///  B570
                B570: u1,
                ///  B571
                B571: u1,
                ///  B572
                B572: u1,
                ///  B573
                B573: u1,
                ///  B574
                B574: u1,
                ///  B575
                B575: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR18: mmio.Mmio(packed struct(u32) {
                ///  B576
                B576: u1,
                ///  B577
                B577: u1,
                ///  B578
                B578: u1,
                ///  B579
                B579: u1,
                ///  B580
                B580: u1,
                ///  B581
                B581: u1,
                ///  B582
                B582: u1,
                ///  B583
                B583: u1,
                ///  B584
                B584: u1,
                ///  B585
                B585: u1,
                ///  B586
                B586: u1,
                ///  B587
                B587: u1,
                ///  B588
                B588: u1,
                ///  B589
                B589: u1,
                ///  B590
                B590: u1,
                ///  B591
                B591: u1,
                ///  B592
                B592: u1,
                ///  B593
                B593: u1,
                ///  B594
                B594: u1,
                ///  B595
                B595: u1,
                ///  B596
                B596: u1,
                ///  B597
                B597: u1,
                ///  B598
                B598: u1,
                ///  B599
                B599: u1,
                ///  B600
                B600: u1,
                ///  B601
                B601: u1,
                ///  B602
                B602: u1,
                ///  B603
                B603: u1,
                ///  B604
                B604: u1,
                ///  B605
                B605: u1,
                ///  B606
                B606: u1,
                ///  B607
                B607: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR19: mmio.Mmio(packed struct(u32) {
                ///  B608
                B608: u1,
                ///  B609
                B609: u1,
                ///  B610
                B610: u1,
                ///  B611
                B611: u1,
                ///  B612
                B612: u1,
                ///  B613
                B613: u1,
                ///  B614
                B614: u1,
                ///  B615
                B615: u1,
                ///  B616
                B616: u1,
                ///  B617
                B617: u1,
                ///  B618
                B618: u1,
                ///  B619
                B619: u1,
                ///  B620
                B620: u1,
                ///  B621
                B621: u1,
                ///  B622
                B622: u1,
                ///  B623
                B623: u1,
                ///  B624
                B624: u1,
                ///  B625
                B625: u1,
                ///  B626
                B626: u1,
                ///  B627
                B627: u1,
                ///  B628
                B628: u1,
                ///  B629
                B629: u1,
                ///  B630
                B630: u1,
                ///  B631
                B631: u1,
                ///  B632
                B632: u1,
                ///  B633
                B633: u1,
                ///  B634
                B634: u1,
                ///  B635
                B635: u1,
                ///  B636
                B636: u1,
                ///  B637
                B637: u1,
                ///  B638
                B638: u1,
                ///  B639
                B639: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR20: mmio.Mmio(packed struct(u32) {
                ///  B640
                B640: u1,
                ///  B641
                B641: u1,
                ///  B642
                B642: u1,
                ///  B643
                B643: u1,
                ///  B644
                B644: u1,
                ///  B645
                B645: u1,
                ///  B646
                B646: u1,
                ///  B647
                B647: u1,
                ///  B648
                B648: u1,
                ///  B649
                B649: u1,
                ///  B650
                B650: u1,
                ///  B651
                B651: u1,
                ///  B652
                B652: u1,
                ///  B653
                B653: u1,
                ///  B654
                B654: u1,
                ///  B655
                B655: u1,
                ///  B656
                B656: u1,
                ///  B657
                B657: u1,
                ///  B658
                B658: u1,
                ///  B659
                B659: u1,
                ///  B660
                B660: u1,
                ///  B661
                B661: u1,
                ///  B662
                B662: u1,
                ///  B663
                B663: u1,
                ///  B664
                B664: u1,
                ///  B665
                B665: u1,
                ///  B666
                B666: u1,
                ///  B667
                B667: u1,
                ///  B668
                B668: u1,
                ///  B669
                B669: u1,
                ///  B670
                B670: u1,
                ///  B671
                B671: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR21: mmio.Mmio(packed struct(u32) {
                ///  B672
                B672: u1,
                ///  B673
                B673: u1,
                ///  B674
                B674: u1,
                ///  B675
                B675: u1,
                ///  B676
                B676: u1,
                ///  B677
                B677: u1,
                ///  B678
                B678: u1,
                ///  B679
                B679: u1,
                ///  B680
                B680: u1,
                ///  B681
                B681: u1,
                ///  B682
                B682: u1,
                ///  B683
                B683: u1,
                ///  B684
                B684: u1,
                ///  B685
                B685: u1,
                ///  B686
                B686: u1,
                ///  B687
                B687: u1,
                ///  B688
                B688: u1,
                ///  B689
                B689: u1,
                ///  B690
                B690: u1,
                ///  B691
                B691: u1,
                ///  B692
                B692: u1,
                ///  B693
                B693: u1,
                ///  B694
                B694: u1,
                ///  B695
                B695: u1,
                ///  B696
                B696: u1,
                ///  B697
                B697: u1,
                ///  B698
                B698: u1,
                ///  B699
                B699: u1,
                ///  B700
                B700: u1,
                ///  B701
                B701: u1,
                ///  B702
                B702: u1,
                ///  B703
                B703: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR22: mmio.Mmio(packed struct(u32) {
                ///  B704
                B704: u1,
                ///  B705
                B705: u1,
                ///  B706
                B706: u1,
                ///  B707
                B707: u1,
                ///  B708
                B708: u1,
                ///  B709
                B709: u1,
                ///  B710
                B710: u1,
                ///  B711
                B711: u1,
                ///  B712
                B712: u1,
                ///  B713
                B713: u1,
                ///  B714
                B714: u1,
                ///  B715
                B715: u1,
                ///  B716
                B716: u1,
                ///  B717
                B717: u1,
                ///  B718
                B718: u1,
                ///  B719
                B719: u1,
                ///  B720
                B720: u1,
                ///  B721
                B721: u1,
                ///  B722
                B722: u1,
                ///  B723
                B723: u1,
                ///  B724
                B724: u1,
                ///  B725
                B725: u1,
                ///  B726
                B726: u1,
                ///  B727
                B727: u1,
                ///  B728
                B728: u1,
                ///  B729
                B729: u1,
                ///  B730
                B730: u1,
                ///  B731
                B731: u1,
                ///  B732
                B732: u1,
                ///  B733
                B733: u1,
                ///  B734
                B734: u1,
                ///  B735
                B735: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR23: mmio.Mmio(packed struct(u32) {
                ///  B736
                B736: u1,
                ///  B737
                B737: u1,
                ///  B738
                B738: u1,
                ///  B739
                B739: u1,
                ///  B740
                B740: u1,
                ///  B741
                B741: u1,
                ///  B742
                B742: u1,
                ///  B743
                B743: u1,
                ///  B744
                B744: u1,
                ///  B745
                B745: u1,
                ///  B746
                B746: u1,
                ///  B747
                B747: u1,
                ///  B748
                B748: u1,
                ///  B749
                B749: u1,
                ///  B750
                B750: u1,
                ///  B751
                B751: u1,
                ///  B752
                B752: u1,
                ///  B753
                B753: u1,
                ///  B754
                B754: u1,
                ///  B755
                B755: u1,
                ///  B756
                B756: u1,
                ///  B757
                B757: u1,
                ///  B758
                B758: u1,
                ///  B759
                B759: u1,
                ///  B760
                B760: u1,
                ///  B761
                B761: u1,
                ///  B762
                B762: u1,
                ///  B763
                B763: u1,
                ///  B764
                B764: u1,
                ///  B765
                B765: u1,
                ///  B766
                B766: u1,
                ///  B767
                B767: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR24: mmio.Mmio(packed struct(u32) {
                ///  B768
                B768: u1,
                ///  B769
                B769: u1,
                ///  B770
                B770: u1,
                ///  B771
                B771: u1,
                ///  B772
                B772: u1,
                ///  B773
                B773: u1,
                ///  B774
                B774: u1,
                ///  B775
                B775: u1,
                ///  B776
                B776: u1,
                ///  B777
                B777: u1,
                ///  B778
                B778: u1,
                ///  B779
                B779: u1,
                ///  B780
                B780: u1,
                ///  B781
                B781: u1,
                ///  B782
                B782: u1,
                ///  B783
                B783: u1,
                ///  B784
                B784: u1,
                ///  B785
                B785: u1,
                ///  B786
                B786: u1,
                ///  B787
                B787: u1,
                ///  B788
                B788: u1,
                ///  B789
                B789: u1,
                ///  B790
                B790: u1,
                ///  B791
                B791: u1,
                ///  B792
                B792: u1,
                ///  B793
                B793: u1,
                ///  B794
                B794: u1,
                ///  B795
                B795: u1,
                ///  B796
                B796: u1,
                ///  B797
                B797: u1,
                ///  B798
                B798: u1,
                ///  B799
                B799: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR25: mmio.Mmio(packed struct(u32) {
                ///  B800
                B800: u1,
                ///  B801
                B801: u1,
                ///  B802
                B802: u1,
                ///  B803
                B803: u1,
                ///  B804
                B804: u1,
                ///  B805
                B805: u1,
                ///  B806
                B806: u1,
                ///  B807
                B807: u1,
                ///  B808
                B808: u1,
                ///  B809
                B809: u1,
                ///  B810
                B810: u1,
                ///  B811
                B811: u1,
                ///  B812
                B812: u1,
                ///  B813
                B813: u1,
                ///  B814
                B814: u1,
                ///  B815
                B815: u1,
                ///  B816
                B816: u1,
                ///  B817
                B817: u1,
                ///  B818
                B818: u1,
                ///  B819
                B819: u1,
                ///  B820
                B820: u1,
                ///  B821
                B821: u1,
                ///  B822
                B822: u1,
                ///  B823
                B823: u1,
                ///  B824
                B824: u1,
                ///  B825
                B825: u1,
                ///  B826
                B826: u1,
                ///  B827
                B827: u1,
                ///  B828
                B828: u1,
                ///  B829
                B829: u1,
                ///  B830
                B830: u1,
                ///  B831
                B831: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR26: mmio.Mmio(packed struct(u32) {
                ///  B832
                B832: u1,
                ///  B833
                B833: u1,
                ///  B834
                B834: u1,
                ///  B835
                B835: u1,
                ///  B836
                B836: u1,
                ///  B837
                B837: u1,
                ///  B838
                B838: u1,
                ///  B839
                B839: u1,
                ///  B840
                B840: u1,
                ///  B841
                B841: u1,
                ///  B842
                B842: u1,
                ///  B843
                B843: u1,
                ///  B844
                B844: u1,
                ///  B845
                B845: u1,
                ///  B846
                B846: u1,
                ///  B847
                B847: u1,
                ///  B848
                B848: u1,
                ///  B849
                B849: u1,
                ///  B850
                B850: u1,
                ///  B851
                B851: u1,
                ///  B852
                B852: u1,
                ///  B853
                B853: u1,
                ///  B854
                B854: u1,
                ///  B855
                B855: u1,
                ///  B856
                B856: u1,
                ///  B857
                B857: u1,
                ///  B858
                B858: u1,
                ///  B859
                B859: u1,
                ///  B860
                B860: u1,
                ///  B861
                B861: u1,
                ///  B862
                B862: u1,
                ///  B863
                B863: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR27: mmio.Mmio(packed struct(u32) {
                ///  B864
                B864: u1,
                ///  B865
                B865: u1,
                ///  B866
                B866: u1,
                ///  B867
                B867: u1,
                ///  B868
                B868: u1,
                ///  B869
                B869: u1,
                ///  B870
                B870: u1,
                ///  B871
                B871: u1,
                ///  B872
                B872: u1,
                ///  B873
                B873: u1,
                ///  B874
                B874: u1,
                ///  B875
                B875: u1,
                ///  B876
                B876: u1,
                ///  B877
                B877: u1,
                ///  B878
                B878: u1,
                ///  B879
                B879: u1,
                ///  B880
                B880: u1,
                ///  B881
                B881: u1,
                ///  B882
                B882: u1,
                ///  B883
                B883: u1,
                ///  B884
                B884: u1,
                ///  B885
                B885: u1,
                ///  B886
                B886: u1,
                ///  B887
                B887: u1,
                ///  B888
                B888: u1,
                ///  B889
                B889: u1,
                ///  B890
                B890: u1,
                ///  B891
                B891: u1,
                ///  B892
                B892: u1,
                ///  B893
                B893: u1,
                ///  B894
                B894: u1,
                ///  B895
                B895: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR28: mmio.Mmio(packed struct(u32) {
                ///  B896
                B896: u1,
                ///  B897
                B897: u1,
                ///  B898
                B898: u1,
                ///  B899
                B899: u1,
                ///  B900
                B900: u1,
                ///  B901
                B901: u1,
                ///  B902
                B902: u1,
                ///  B903
                B903: u1,
                ///  B904
                B904: u1,
                ///  B905
                B905: u1,
                ///  B906
                B906: u1,
                ///  B907
                B907: u1,
                ///  B908
                B908: u1,
                ///  B909
                B909: u1,
                ///  B910
                B910: u1,
                ///  B911
                B911: u1,
                ///  B912
                B912: u1,
                ///  B913
                B913: u1,
                ///  B914
                B914: u1,
                ///  B915
                B915: u1,
                ///  B916
                B916: u1,
                ///  B917
                B917: u1,
                ///  B918
                B918: u1,
                ///  B919
                B919: u1,
                ///  B920
                B920: u1,
                ///  B921
                B921: u1,
                ///  B922
                B922: u1,
                ///  B923
                B923: u1,
                ///  B924
                B924: u1,
                ///  B925
                B925: u1,
                ///  B926
                B926: u1,
                ///  B927
                B927: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR29: mmio.Mmio(packed struct(u32) {
                ///  B928
                B928: u1,
                ///  B929
                B929: u1,
                ///  B930
                B930: u1,
                ///  B931
                B931: u1,
                ///  B932
                B932: u1,
                ///  B933
                B933: u1,
                ///  B934
                B934: u1,
                ///  B935
                B935: u1,
                ///  B936
                B936: u1,
                ///  B937
                B937: u1,
                ///  B938
                B938: u1,
                ///  B939
                B939: u1,
                ///  B940
                B940: u1,
                ///  B941
                B941: u1,
                ///  B942
                B942: u1,
                ///  B943
                B943: u1,
                ///  B944
                B944: u1,
                ///  B945
                B945: u1,
                ///  B946
                B946: u1,
                ///  B947
                B947: u1,
                ///  B948
                B948: u1,
                ///  B949
                B949: u1,
                ///  B950
                B950: u1,
                ///  B951
                B951: u1,
                ///  B952
                B952: u1,
                ///  B953
                B953: u1,
                ///  B954
                B954: u1,
                ///  B955
                B955: u1,
                ///  B956
                B956: u1,
                ///  B957
                B957: u1,
                ///  B958
                B958: u1,
                ///  B959
                B959: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR30: mmio.Mmio(packed struct(u32) {
                ///  B960
                B960: u1,
                ///  B961
                B961: u1,
                ///  B962
                B962: u1,
                ///  B963
                B963: u1,
                ///  B964
                B964: u1,
                ///  B965
                B965: u1,
                ///  B966
                B966: u1,
                ///  B967
                B967: u1,
                ///  B968
                B968: u1,
                ///  B969
                B969: u1,
                ///  B970
                B970: u1,
                ///  B971
                B971: u1,
                ///  B972
                B972: u1,
                ///  B973
                B973: u1,
                ///  B974
                B974: u1,
                ///  B975
                B975: u1,
                ///  B976
                B976: u1,
                ///  B977
                B977: u1,
                ///  B978
                B978: u1,
                ///  B979
                B979: u1,
                ///  B980
                B980: u1,
                ///  B981
                B981: u1,
                ///  B982
                B982: u1,
                ///  B983
                B983: u1,
                ///  B984
                B984: u1,
                ///  B985
                B985: u1,
                ///  B986
                B986: u1,
                ///  B987
                B987: u1,
                ///  B988
                B988: u1,
                ///  B989
                B989: u1,
                ///  B990
                B990: u1,
                ///  B991
                B991: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR31: mmio.Mmio(packed struct(u32) {
                ///  B992
                B992: u1,
                ///  B993
                B993: u1,
                ///  B994
                B994: u1,
                ///  B995
                B995: u1,
                ///  B996
                B996: u1,
                ///  B997
                B997: u1,
                ///  B998
                B998: u1,
                ///  B999
                B999: u1,
                ///  B1000
                B1000: u1,
                ///  B1001
                B1001: u1,
                ///  B1002
                B1002: u1,
                ///  B1003
                B1003: u1,
                ///  B1004
                B1004: u1,
                ///  B1005
                B1005: u1,
                ///  B1006
                B1006: u1,
                ///  B1007
                B1007: u1,
                ///  B1008
                B1008: u1,
                ///  B1009
                B1009: u1,
                ///  B1010
                B1010: u1,
                ///  B1011
                B1011: u1,
                ///  B1012
                B1012: u1,
                ///  B1013
                B1013: u1,
                ///  B1014
                B1014: u1,
                ///  B1015
                B1015: u1,
                ///  B1016
                B1016: u1,
                ///  B1017
                B1017: u1,
                ///  B1018
                B1018: u1,
                ///  B1019
                B1019: u1,
                ///  B1020
                B1020: u1,
                ///  B1021
                B1021: u1,
                ///  B1022
                B1022: u1,
                ///  B1023
                B1023: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR32: mmio.Mmio(packed struct(u32) {
                ///  B1024
                B1024: u1,
                ///  B1025
                B1025: u1,
                ///  B1026
                B1026: u1,
                ///  B1027
                B1027: u1,
                ///  B1028
                B1028: u1,
                ///  B1029
                B1029: u1,
                ///  B1030
                B1030: u1,
                ///  B1031
                B1031: u1,
                ///  B1032
                B1032: u1,
                ///  B1033
                B1033: u1,
                ///  B1034
                B1034: u1,
                ///  B1035
                B1035: u1,
                ///  B1036
                B1036: u1,
                ///  B1037
                B1037: u1,
                ///  B1038
                B1038: u1,
                ///  B1039
                B1039: u1,
                ///  B1040
                B1040: u1,
                ///  B1041
                B1041: u1,
                ///  B1042
                B1042: u1,
                ///  B1043
                B1043: u1,
                ///  B1044
                B1044: u1,
                ///  B1045
                B1045: u1,
                ///  B1046
                B1046: u1,
                ///  B1047
                B1047: u1,
                ///  B1048
                B1048: u1,
                ///  B1049
                B1049: u1,
                ///  B1050
                B1050: u1,
                ///  B1051
                B1051: u1,
                ///  B1052
                B1052: u1,
                ///  B1053
                B1053: u1,
                ///  B1054
                B1054: u1,
                ///  B1055
                B1055: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR33: mmio.Mmio(packed struct(u32) {
                ///  B1056
                B1056: u1,
                ///  B1057
                B1057: u1,
                ///  B1058
                B1058: u1,
                ///  B1059
                B1059: u1,
                ///  B1060
                B1060: u1,
                ///  B1061
                B1061: u1,
                ///  B1062
                B1062: u1,
                ///  B1063
                B1063: u1,
                ///  B1064
                B1064: u1,
                ///  B1065
                B1065: u1,
                ///  B1066
                B1066: u1,
                ///  B1067
                B1067: u1,
                ///  B1068
                B1068: u1,
                ///  B1069
                B1069: u1,
                ///  B1070
                B1070: u1,
                ///  B1071
                B1071: u1,
                ///  B1072
                B1072: u1,
                ///  B1073
                B1073: u1,
                ///  B1074
                B1074: u1,
                ///  B1075
                B1075: u1,
                ///  B1076
                B1076: u1,
                ///  B1077
                B1077: u1,
                ///  B1078
                B1078: u1,
                ///  B1079
                B1079: u1,
                ///  B1080
                B1080: u1,
                ///  B1081
                B1081: u1,
                ///  B1082
                B1082: u1,
                ///  B1083
                B1083: u1,
                ///  B1084
                B1084: u1,
                ///  B1085
                B1085: u1,
                ///  B1086
                B1086: u1,
                ///  B1087
                B1087: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR34: mmio.Mmio(packed struct(u32) {
                ///  B1088
                B1088: u1,
                ///  B1089
                B1089: u1,
                ///  B1090
                B1090: u1,
                ///  B1091
                B1091: u1,
                ///  B1092
                B1092: u1,
                ///  B1093
                B1093: u1,
                ///  B1094
                B1094: u1,
                ///  B1095
                B1095: u1,
                ///  B1096
                B1096: u1,
                ///  B1097
                B1097: u1,
                ///  B1098
                B1098: u1,
                ///  B1099
                B1099: u1,
                ///  B1100
                B1100: u1,
                ///  B1101
                B1101: u1,
                ///  B1102
                B1102: u1,
                ///  B1103
                B1103: u1,
                ///  B1104
                B1104: u1,
                ///  B1105
                B1105: u1,
                ///  B1106
                B1106: u1,
                ///  B1107
                B1107: u1,
                ///  B1108
                B1108: u1,
                ///  B1109
                B1109: u1,
                ///  B1110
                B1110: u1,
                ///  B1111
                B1111: u1,
                ///  B1112
                B1112: u1,
                ///  B1113
                B1113: u1,
                ///  B1114
                B1114: u1,
                ///  B1115
                B1115: u1,
                ///  B1116
                B1116: u1,
                ///  B1117
                B1117: u1,
                ///  B1118
                B1118: u1,
                ///  B1119
                B1119: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR35: mmio.Mmio(packed struct(u32) {
                ///  B1120
                B1120: u1,
                ///  B1121
                B1121: u1,
                ///  B1122
                B1122: u1,
                ///  B1123
                B1123: u1,
                ///  B1124
                B1124: u1,
                ///  B1125
                B1125: u1,
                ///  B1126
                B1126: u1,
                ///  B1127
                B1127: u1,
                ///  B1128
                B1128: u1,
                ///  B1129
                B1129: u1,
                ///  B1130
                B1130: u1,
                ///  B1131
                B1131: u1,
                ///  B1132
                B1132: u1,
                ///  B1133
                B1133: u1,
                ///  B1134
                B1134: u1,
                ///  B1135
                B1135: u1,
                ///  B1136
                B1136: u1,
                ///  B1137
                B1137: u1,
                ///  B1138
                B1138: u1,
                ///  B1139
                B1139: u1,
                ///  B1140
                B1140: u1,
                ///  B1141
                B1141: u1,
                ///  B1142
                B1142: u1,
                ///  B1143
                B1143: u1,
                ///  B1144
                B1144: u1,
                ///  B1145
                B1145: u1,
                ///  B1146
                B1146: u1,
                ///  B1147
                B1147: u1,
                ///  B1148
                B1148: u1,
                ///  B1149
                B1149: u1,
                ///  B1150
                B1150: u1,
                ///  B1151
                B1151: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR36: mmio.Mmio(packed struct(u32) {
                ///  B1152
                B1152: u1,
                ///  B1153
                B1153: u1,
                ///  B1154
                B1154: u1,
                ///  B1155
                B1155: u1,
                ///  B1156
                B1156: u1,
                ///  B1157
                B1157: u1,
                ///  B1158
                B1158: u1,
                ///  B1159
                B1159: u1,
                ///  B1160
                B1160: u1,
                ///  B1161
                B1161: u1,
                ///  B1162
                B1162: u1,
                ///  B1163
                B1163: u1,
                ///  B1164
                B1164: u1,
                ///  B1165
                B1165: u1,
                ///  B1166
                B1166: u1,
                ///  B1167
                B1167: u1,
                ///  B1168
                B1168: u1,
                ///  B1169
                B1169: u1,
                ///  B1170
                B1170: u1,
                ///  B1171
                B1171: u1,
                ///  B1172
                B1172: u1,
                ///  B1173
                B1173: u1,
                ///  B1174
                B1174: u1,
                ///  B1175
                B1175: u1,
                ///  B1176
                B1176: u1,
                ///  B1177
                B1177: u1,
                ///  B1178
                B1178: u1,
                ///  B1179
                B1179: u1,
                ///  B1180
                B1180: u1,
                ///  B1181
                B1181: u1,
                ///  B1182
                B1182: u1,
                ///  B1183
                B1183: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR37: mmio.Mmio(packed struct(u32) {
                ///  B1184
                B1184: u1,
                ///  B1185
                B1185: u1,
                ///  B1186
                B1186: u1,
                ///  B1187
                B1187: u1,
                ///  B1188
                B1188: u1,
                ///  B1189
                B1189: u1,
                ///  B1190
                B1190: u1,
                ///  B1191
                B1191: u1,
                ///  B1192
                B1192: u1,
                ///  B1193
                B1193: u1,
                ///  B1194
                B1194: u1,
                ///  B1195
                B1195: u1,
                ///  B1196
                B1196: u1,
                ///  B1197
                B1197: u1,
                ///  B1198
                B1198: u1,
                ///  B1199
                B1199: u1,
                ///  B1200
                B1200: u1,
                ///  B1201
                B1201: u1,
                ///  B1202
                B1202: u1,
                ///  B1203
                B1203: u1,
                ///  B1204
                B1204: u1,
                ///  B1205
                B1205: u1,
                ///  B1206
                B1206: u1,
                ///  B1207
                B1207: u1,
                ///  B1208
                B1208: u1,
                ///  B1209
                B1209: u1,
                ///  B1210
                B1210: u1,
                ///  B1211
                B1211: u1,
                ///  B1212
                B1212: u1,
                ///  B1213
                B1213: u1,
                ///  B1214
                B1214: u1,
                ///  B1215
                B1215: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR38: mmio.Mmio(packed struct(u32) {
                ///  B1216
                B1216: u1,
                ///  B1217
                B1217: u1,
                ///  B1218
                B1218: u1,
                ///  B1219
                B1219: u1,
                ///  B1220
                B1220: u1,
                ///  B1221
                B1221: u1,
                ///  B1222
                B1222: u1,
                ///  B1223
                B1223: u1,
                ///  B1224
                B1224: u1,
                ///  B1225
                B1225: u1,
                ///  B1226
                B1226: u1,
                ///  B1227
                B1227: u1,
                ///  B1228
                B1228: u1,
                ///  B1229
                B1229: u1,
                ///  B1230
                B1230: u1,
                ///  B1231
                B1231: u1,
                ///  B1232
                B1232: u1,
                ///  B1233
                B1233: u1,
                ///  B1234
                B1234: u1,
                ///  B1235
                B1235: u1,
                ///  B1236
                B1236: u1,
                ///  B1237
                B1237: u1,
                ///  B1238
                B1238: u1,
                ///  B1239
                B1239: u1,
                ///  B1240
                B1240: u1,
                ///  B1241
                B1241: u1,
                ///  B1242
                B1242: u1,
                ///  B1243
                B1243: u1,
                ///  B1244
                B1244: u1,
                ///  B1245
                B1245: u1,
                ///  B1246
                B1246: u1,
                ///  B1247
                B1247: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR39: mmio.Mmio(packed struct(u32) {
                ///  B1248
                B1248: u1,
                ///  B1249
                B1249: u1,
                ///  B1250
                B1250: u1,
                ///  B1251
                B1251: u1,
                ///  B1252
                B1252: u1,
                ///  B1253
                B1253: u1,
                ///  B1254
                B1254: u1,
                ///  B1255
                B1255: u1,
                ///  B1256
                B1256: u1,
                ///  B1257
                B1257: u1,
                ///  B1258
                B1258: u1,
                ///  B1259
                B1259: u1,
                ///  B1260
                B1260: u1,
                ///  B1261
                B1261: u1,
                ///  B1262
                B1262: u1,
                ///  B1263
                B1263: u1,
                ///  B1264
                B1264: u1,
                ///  B1265
                B1265: u1,
                ///  B1266
                B1266: u1,
                ///  B1267
                B1267: u1,
                ///  B1268
                B1268: u1,
                ///  B1269
                B1269: u1,
                ///  B1270
                B1270: u1,
                ///  B1271
                B1271: u1,
                ///  B1272
                B1272: u1,
                ///  B1273
                B1273: u1,
                ///  B1274
                B1274: u1,
                ///  B1275
                B1275: u1,
                ///  B1276
                B1276: u1,
                ///  B1277
                B1277: u1,
                ///  B1278
                B1278: u1,
                ///  B1279
                B1279: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR40: mmio.Mmio(packed struct(u32) {
                ///  B1280
                B1280: u1,
                ///  B1281
                B1281: u1,
                ///  B1282
                B1282: u1,
                ///  B1283
                B1283: u1,
                ///  B1284
                B1284: u1,
                ///  B1285
                B1285: u1,
                ///  B1286
                B1286: u1,
                ///  B1287
                B1287: u1,
                ///  B1288
                B1288: u1,
                ///  B1289
                B1289: u1,
                ///  B1290
                B1290: u1,
                ///  B1291
                B1291: u1,
                ///  B1292
                B1292: u1,
                ///  B1293
                B1293: u1,
                ///  B1294
                B1294: u1,
                ///  B1295
                B1295: u1,
                ///  B1296
                B1296: u1,
                ///  B1297
                B1297: u1,
                ///  B1298
                B1298: u1,
                ///  B1299
                B1299: u1,
                ///  B1300
                B1300: u1,
                ///  B1301
                B1301: u1,
                ///  B1302
                B1302: u1,
                ///  B1303
                B1303: u1,
                ///  B1304
                B1304: u1,
                ///  B1305
                B1305: u1,
                ///  B1306
                B1306: u1,
                ///  B1307
                B1307: u1,
                ///  B1308
                B1308: u1,
                ///  B1309
                B1309: u1,
                ///  B1310
                B1310: u1,
                ///  B1311
                B1311: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR41: mmio.Mmio(packed struct(u32) {
                ///  B1312
                B1312: u1,
                ///  B1313
                B1313: u1,
                ///  B1314
                B1314: u1,
                ///  B1315
                B1315: u1,
                ///  B1316
                B1316: u1,
                ///  B1317
                B1317: u1,
                ///  B1318
                B1318: u1,
                ///  B1319
                B1319: u1,
                ///  B1320
                B1320: u1,
                ///  B1321
                B1321: u1,
                ///  B1322
                B1322: u1,
                ///  B1323
                B1323: u1,
                ///  B1324
                B1324: u1,
                ///  B1325
                B1325: u1,
                ///  B1326
                B1326: u1,
                ///  B1327
                B1327: u1,
                ///  B1328
                B1328: u1,
                ///  B1329
                B1329: u1,
                ///  B1330
                B1330: u1,
                ///  B1331
                B1331: u1,
                ///  B1332
                B1332: u1,
                ///  B1333
                B1333: u1,
                ///  B1334
                B1334: u1,
                ///  B1335
                B1335: u1,
                ///  B1336
                B1336: u1,
                ///  B1337
                B1337: u1,
                ///  B1338
                B1338: u1,
                ///  B1339
                B1339: u1,
                ///  B1340
                B1340: u1,
                ///  B1341
                B1341: u1,
                ///  B1342
                B1342: u1,
                ///  B1343
                B1343: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR42: mmio.Mmio(packed struct(u32) {
                ///  B1344
                B1344: u1,
                ///  B1345
                B1345: u1,
                ///  B1346
                B1346: u1,
                ///  B1347
                B1347: u1,
                ///  B1348
                B1348: u1,
                ///  B1349
                B1349: u1,
                ///  B1350
                B1350: u1,
                ///  B1351
                B1351: u1,
                ///  B1352
                B1352: u1,
                ///  B1353
                B1353: u1,
                ///  B1354
                B1354: u1,
                ///  B1355
                B1355: u1,
                ///  B1356
                B1356: u1,
                ///  B1357
                B1357: u1,
                ///  B1358
                B1358: u1,
                ///  B1359
                B1359: u1,
                ///  B1360
                B1360: u1,
                ///  B1361
                B1361: u1,
                ///  B1362
                B1362: u1,
                ///  B1363
                B1363: u1,
                ///  B1364
                B1364: u1,
                ///  B1365
                B1365: u1,
                ///  B1366
                B1366: u1,
                ///  B1367
                B1367: u1,
                ///  B1368
                B1368: u1,
                ///  B1369
                B1369: u1,
                ///  B1370
                B1370: u1,
                ///  B1371
                B1371: u1,
                ///  B1372
                B1372: u1,
                ///  B1373
                B1373: u1,
                ///  B1374
                B1374: u1,
                ///  B1375
                B1375: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR43: mmio.Mmio(packed struct(u32) {
                ///  B1376
                B1376: u1,
                ///  B1377
                B1377: u1,
                ///  B1378
                B1378: u1,
                ///  B1379
                B1379: u1,
                ///  B1380
                B1380: u1,
                ///  B1381
                B1381: u1,
                ///  B1382
                B1382: u1,
                ///  B1383
                B1383: u1,
                ///  B1384
                B1384: u1,
                ///  B1385
                B1385: u1,
                ///  B1386
                B1386: u1,
                ///  B1387
                B1387: u1,
                ///  B1388
                B1388: u1,
                ///  B1389
                B1389: u1,
                ///  B1390
                B1390: u1,
                ///  B1391
                B1391: u1,
                ///  B1392
                B1392: u1,
                ///  B1393
                B1393: u1,
                ///  B1394
                B1394: u1,
                ///  B1395
                B1395: u1,
                ///  B1396
                B1396: u1,
                ///  B1397
                B1397: u1,
                ///  B1398
                B1398: u1,
                ///  B1399
                B1399: u1,
                ///  B1400
                B1400: u1,
                ///  B1401
                B1401: u1,
                ///  B1402
                B1402: u1,
                ///  B1403
                B1403: u1,
                ///  B1404
                B1404: u1,
                ///  B1405
                B1405: u1,
                ///  B1406
                B1406: u1,
                ///  B1407
                B1407: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR44: mmio.Mmio(packed struct(u32) {
                ///  B1408
                B1408: u1,
                ///  B1409
                B1409: u1,
                ///  B1410
                B1410: u1,
                ///  B1411
                B1411: u1,
                ///  B1412
                B1412: u1,
                ///  B1413
                B1413: u1,
                ///  B1414
                B1414: u1,
                ///  B1415
                B1415: u1,
                ///  B1416
                B1416: u1,
                ///  B1417
                B1417: u1,
                ///  B1418
                B1418: u1,
                ///  B1419
                B1419: u1,
                ///  B1420
                B1420: u1,
                ///  B1421
                B1421: u1,
                ///  B1422
                B1422: u1,
                ///  B1423
                B1423: u1,
                ///  B1424
                B1424: u1,
                ///  B1425
                B1425: u1,
                ///  B1426
                B1426: u1,
                ///  B1427
                B1427: u1,
                ///  B1428
                B1428: u1,
                ///  B1429
                B1429: u1,
                ///  B1430
                B1430: u1,
                ///  B1431
                B1431: u1,
                ///  B1432
                B1432: u1,
                ///  B1433
                B1433: u1,
                ///  B1434
                B1434: u1,
                ///  B1435
                B1435: u1,
                ///  B1436
                B1436: u1,
                ///  B1437
                B1437: u1,
                ///  B1438
                B1438: u1,
                ///  B1439
                B1439: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR45: mmio.Mmio(packed struct(u32) {
                ///  B1440
                B1440: u1,
                ///  B1441
                B1441: u1,
                ///  B1442
                B1442: u1,
                ///  B1443
                B1443: u1,
                ///  B1444
                B1444: u1,
                ///  B1445
                B1445: u1,
                ///  B1446
                B1446: u1,
                ///  B1447
                B1447: u1,
                ///  B1448
                B1448: u1,
                ///  B1449
                B1449: u1,
                ///  B1450
                B1450: u1,
                ///  B1451
                B1451: u1,
                ///  B1452
                B1452: u1,
                ///  B1453
                B1453: u1,
                ///  B1454
                B1454: u1,
                ///  B1455
                B1455: u1,
                ///  B1456
                B1456: u1,
                ///  B1457
                B1457: u1,
                ///  B1458
                B1458: u1,
                ///  B1459
                B1459: u1,
                ///  B1460
                B1460: u1,
                ///  B1461
                B1461: u1,
                ///  B1462
                B1462: u1,
                ///  B1463
                B1463: u1,
                ///  B1464
                B1464: u1,
                ///  B1465
                B1465: u1,
                ///  B1466
                B1466: u1,
                ///  B1467
                B1467: u1,
                ///  B1468
                B1468: u1,
                ///  B1469
                B1469: u1,
                ///  B1470
                B1470: u1,
                ///  B1471
                B1471: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR46: mmio.Mmio(packed struct(u32) {
                ///  B1472
                B1472: u1,
                ///  B1473
                B1473: u1,
                ///  B1474
                B1474: u1,
                ///  B1475
                B1475: u1,
                ///  B1476
                B1476: u1,
                ///  B1477
                B1477: u1,
                ///  B1478
                B1478: u1,
                ///  B1479
                B1479: u1,
                ///  B1480
                B1480: u1,
                ///  B1481
                B1481: u1,
                ///  B1482
                B1482: u1,
                ///  B1483
                B1483: u1,
                ///  B1484
                B1484: u1,
                ///  B1485
                B1485: u1,
                ///  B1486
                B1486: u1,
                ///  B1487
                B1487: u1,
                ///  B1488
                B1488: u1,
                ///  B1489
                B1489: u1,
                ///  B1490
                B1490: u1,
                ///  B1491
                B1491: u1,
                ///  B1492
                B1492: u1,
                ///  B1493
                B1493: u1,
                ///  B1494
                B1494: u1,
                ///  B1495
                B1495: u1,
                ///  B1496
                B1496: u1,
                ///  B1497
                B1497: u1,
                ///  B1498
                B1498: u1,
                ///  B1499
                B1499: u1,
                ///  B1500
                B1500: u1,
                ///  B1501
                B1501: u1,
                ///  B1502
                B1502: u1,
                ///  B1503
                B1503: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR47: mmio.Mmio(packed struct(u32) {
                ///  B1504
                B1504: u1,
                ///  B1505
                B1505: u1,
                ///  B1506
                B1506: u1,
                ///  B1507
                B1507: u1,
                ///  B1508
                B1508: u1,
                ///  B1509
                B1509: u1,
                ///  B1510
                B1510: u1,
                ///  B1511
                B1511: u1,
                ///  B1512
                B1512: u1,
                ///  B1513
                B1513: u1,
                ///  B1514
                B1514: u1,
                ///  B1515
                B1515: u1,
                ///  B1516
                B1516: u1,
                ///  B1517
                B1517: u1,
                ///  B1518
                B1518: u1,
                ///  B1519
                B1519: u1,
                ///  B1520
                B1520: u1,
                ///  B1521
                B1521: u1,
                ///  B1522
                B1522: u1,
                ///  B1523
                B1523: u1,
                ///  B1524
                B1524: u1,
                ///  B1525
                B1525: u1,
                ///  B1526
                B1526: u1,
                ///  B1527
                B1527: u1,
                ///  B1528
                B1528: u1,
                ///  B1529
                B1529: u1,
                ///  B1530
                B1530: u1,
                ///  B1531
                B1531: u1,
                ///  B1532
                B1532: u1,
                ///  B1533
                B1533: u1,
                ///  B1534
                B1534: u1,
                ///  B1535
                B1535: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR48: mmio.Mmio(packed struct(u32) {
                ///  B1536
                B1536: u1,
                ///  B1537
                B1537: u1,
                ///  B1538
                B1538: u1,
                ///  B1539
                B1539: u1,
                ///  B1540
                B1540: u1,
                ///  B1541
                B1541: u1,
                ///  B1542
                B1542: u1,
                ///  B1543
                B1543: u1,
                ///  B1544
                B1544: u1,
                ///  B1545
                B1545: u1,
                ///  B1546
                B1546: u1,
                ///  B1547
                B1547: u1,
                ///  B1548
                B1548: u1,
                ///  B1549
                B1549: u1,
                ///  B1550
                B1550: u1,
                ///  B1551
                B1551: u1,
                ///  B1552
                B1552: u1,
                ///  B1553
                B1553: u1,
                ///  B1554
                B1554: u1,
                ///  B1555
                B1555: u1,
                ///  B1556
                B1556: u1,
                ///  B1557
                B1557: u1,
                ///  B1558
                B1558: u1,
                ///  B1559
                B1559: u1,
                ///  B1560
                B1560: u1,
                ///  B1561
                B1561: u1,
                ///  B1562
                B1562: u1,
                ///  B1563
                B1563: u1,
                ///  B1564
                B1564: u1,
                ///  B1565
                B1565: u1,
                ///  B1566
                B1566: u1,
                ///  B1567
                B1567: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR49: mmio.Mmio(packed struct(u32) {
                ///  B1568
                B1568: u1,
                ///  B1569
                B1569: u1,
                ///  B1570
                B1570: u1,
                ///  B1571
                B1571: u1,
                ///  B1572
                B1572: u1,
                ///  B1573
                B1573: u1,
                ///  B1574
                B1574: u1,
                ///  B1575
                B1575: u1,
                ///  B1576
                B1576: u1,
                ///  B1577
                B1577: u1,
                ///  B1578
                B1578: u1,
                ///  B1579
                B1579: u1,
                ///  B1580
                B1580: u1,
                ///  B1581
                B1581: u1,
                ///  B1582
                B1582: u1,
                ///  B1583
                B1583: u1,
                ///  B1584
                B1584: u1,
                ///  B1585
                B1585: u1,
                ///  B1586
                B1586: u1,
                ///  B1587
                B1587: u1,
                ///  B1588
                B1588: u1,
                ///  B1589
                B1589: u1,
                ///  B1590
                B1590: u1,
                ///  B1591
                B1591: u1,
                ///  B1592
                B1592: u1,
                ///  B1593
                B1593: u1,
                ///  B1594
                B1594: u1,
                ///  B1595
                B1595: u1,
                ///  B1596
                B1596: u1,
                ///  B1597
                B1597: u1,
                ///  B1598
                B1598: u1,
                ///  B1599
                B1599: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR50: mmio.Mmio(packed struct(u32) {
                ///  B1600
                B1600: u1,
                ///  B1601
                B1601: u1,
                ///  B1602
                B1602: u1,
                ///  B1603
                B1603: u1,
                ///  B1604
                B1604: u1,
                ///  B1605
                B1605: u1,
                ///  B1606
                B1606: u1,
                ///  B1607
                B1607: u1,
                ///  B1608
                B1608: u1,
                ///  B1609
                B1609: u1,
                ///  B1610
                B1610: u1,
                ///  B1611
                B1611: u1,
                ///  B1612
                B1612: u1,
                ///  B1613
                B1613: u1,
                ///  B1614
                B1614: u1,
                ///  B1615
                B1615: u1,
                ///  B1616
                B1616: u1,
                ///  B1617
                B1617: u1,
                ///  B1618
                B1618: u1,
                ///  B1619
                B1619: u1,
                ///  B1620
                B1620: u1,
                ///  B1621
                B1621: u1,
                ///  B1622
                B1622: u1,
                ///  B1623
                B1623: u1,
                ///  B1624
                B1624: u1,
                ///  B1625
                B1625: u1,
                ///  B1626
                B1626: u1,
                ///  B1627
                B1627: u1,
                ///  B1628
                B1628: u1,
                ///  B1629
                B1629: u1,
                ///  B1630
                B1630: u1,
                ///  B1631
                B1631: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR51: mmio.Mmio(packed struct(u32) {
                ///  B1632
                B1632: u1,
                ///  B1633
                B1633: u1,
                ///  B1634
                B1634: u1,
                ///  B1635
                B1635: u1,
                ///  B1636
                B1636: u1,
                ///  B1637
                B1637: u1,
                ///  B1638
                B1638: u1,
                ///  B1639
                B1639: u1,
                ///  B1640
                B1640: u1,
                ///  B1641
                B1641: u1,
                ///  B1642
                B1642: u1,
                ///  B1643
                B1643: u1,
                ///  B1644
                B1644: u1,
                ///  B1645
                B1645: u1,
                ///  B1646
                B1646: u1,
                ///  B1647
                B1647: u1,
                ///  B1648
                B1648: u1,
                ///  B1649
                B1649: u1,
                ///  B1650
                B1650: u1,
                ///  B1651
                B1651: u1,
                ///  B1652
                B1652: u1,
                ///  B1653
                B1653: u1,
                ///  B1654
                B1654: u1,
                ///  B1655
                B1655: u1,
                ///  B1656
                B1656: u1,
                ///  B1657
                B1657: u1,
                ///  B1658
                B1658: u1,
                ///  B1659
                B1659: u1,
                ///  B1660
                B1660: u1,
                ///  B1661
                B1661: u1,
                ///  B1662
                B1662: u1,
                ///  B1663
                B1663: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR52: mmio.Mmio(packed struct(u32) {
                ///  B1664
                B1664: u1,
                ///  B1665
                B1665: u1,
                ///  B1666
                B1666: u1,
                ///  B1667
                B1667: u1,
                ///  B1668
                B1668: u1,
                ///  B1669
                B1669: u1,
                ///  B1670
                B1670: u1,
                ///  B1671
                B1671: u1,
                ///  B1672
                B1672: u1,
                ///  B1673
                B1673: u1,
                ///  B1674
                B1674: u1,
                ///  B1675
                B1675: u1,
                ///  B1676
                B1676: u1,
                ///  B1677
                B1677: u1,
                ///  B1678
                B1678: u1,
                ///  B1679
                B1679: u1,
                ///  B1680
                B1680: u1,
                ///  B1681
                B1681: u1,
                ///  B1682
                B1682: u1,
                ///  B1683
                B1683: u1,
                ///  B1684
                B1684: u1,
                ///  B1685
                B1685: u1,
                ///  B1686
                B1686: u1,
                ///  B1687
                B1687: u1,
                ///  B1688
                B1688: u1,
                ///  B1689
                B1689: u1,
                ///  B1690
                B1690: u1,
                ///  B1691
                B1691: u1,
                ///  B1692
                B1692: u1,
                ///  B1693
                B1693: u1,
                ///  B1694
                B1694: u1,
                ///  B1695
                B1695: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR53: mmio.Mmio(packed struct(u32) {
                ///  B1696
                B1696: u1,
                ///  B1697
                B1697: u1,
                ///  B1698
                B1698: u1,
                ///  B1699
                B1699: u1,
                ///  B1700
                B1700: u1,
                ///  B1701
                B1701: u1,
                ///  B1702
                B1702: u1,
                ///  B1703
                B1703: u1,
                ///  B1704
                B1704: u1,
                ///  B1705
                B1705: u1,
                ///  B1706
                B1706: u1,
                ///  B1707
                B1707: u1,
                ///  B1708
                B1708: u1,
                ///  B1709
                B1709: u1,
                ///  B1710
                B1710: u1,
                ///  B1711
                B1711: u1,
                ///  B1712
                B1712: u1,
                ///  B1713
                B1713: u1,
                ///  B1714
                B1714: u1,
                ///  B1715
                B1715: u1,
                ///  B1716
                B1716: u1,
                ///  B1717
                B1717: u1,
                ///  B1718
                B1718: u1,
                ///  B1719
                B1719: u1,
                ///  B1720
                B1720: u1,
                ///  B1721
                B1721: u1,
                ///  B1722
                B1722: u1,
                ///  B1723
                B1723: u1,
                ///  B1724
                B1724: u1,
                ///  B1725
                B1725: u1,
                ///  B1726
                B1726: u1,
                ///  B1727
                B1727: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR54: mmio.Mmio(packed struct(u32) {
                ///  B1728
                B1728: u1,
                ///  B1729
                B1729: u1,
                ///  B1730
                B1730: u1,
                ///  B1731
                B1731: u1,
                ///  B1732
                B1732: u1,
                ///  B1733
                B1733: u1,
                ///  B1734
                B1734: u1,
                ///  B1735
                B1735: u1,
                ///  B1736
                B1736: u1,
                ///  B1737
                B1737: u1,
                ///  B1738
                B1738: u1,
                ///  B1739
                B1739: u1,
                ///  B1740
                B1740: u1,
                ///  B1741
                B1741: u1,
                ///  B1742
                B1742: u1,
                ///  B1743
                B1743: u1,
                ///  B1744
                B1744: u1,
                ///  B1745
                B1745: u1,
                ///  B1746
                B1746: u1,
                ///  B1747
                B1747: u1,
                ///  B1748
                B1748: u1,
                ///  B1749
                B1749: u1,
                ///  B1750
                B1750: u1,
                ///  B1751
                B1751: u1,
                ///  B1752
                B1752: u1,
                ///  B1753
                B1753: u1,
                ///  B1754
                B1754: u1,
                ///  B1755
                B1755: u1,
                ///  B1756
                B1756: u1,
                ///  B1757
                B1757: u1,
                ///  B1758
                B1758: u1,
                ///  B1759
                B1759: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR55: mmio.Mmio(packed struct(u32) {
                ///  B1760
                B1760: u1,
                ///  B1761
                B1761: u1,
                ///  B1762
                B1762: u1,
                ///  B1763
                B1763: u1,
                ///  B1764
                B1764: u1,
                ///  B1765
                B1765: u1,
                ///  B1766
                B1766: u1,
                ///  B1767
                B1767: u1,
                ///  B1768
                B1768: u1,
                ///  B1769
                B1769: u1,
                ///  B1770
                B1770: u1,
                ///  B1771
                B1771: u1,
                ///  B1772
                B1772: u1,
                ///  B1773
                B1773: u1,
                ///  B1774
                B1774: u1,
                ///  B1775
                B1775: u1,
                ///  B1776
                B1776: u1,
                ///  B1777
                B1777: u1,
                ///  B1778
                B1778: u1,
                ///  B1779
                B1779: u1,
                ///  B1780
                B1780: u1,
                ///  B1781
                B1781: u1,
                ///  B1782
                B1782: u1,
                ///  B1783
                B1783: u1,
                ///  B1784
                B1784: u1,
                ///  B1785
                B1785: u1,
                ///  B1786
                B1786: u1,
                ///  B1787
                B1787: u1,
                ///  B1788
                B1788: u1,
                ///  B1789
                B1789: u1,
                ///  B1790
                B1790: u1,
                ///  B1791
                B1791: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR56: mmio.Mmio(packed struct(u32) {
                ///  B1792
                B1792: u1,
                ///  B1793
                B1793: u1,
                ///  B1794
                B1794: u1,
                ///  B1795
                B1795: u1,
                ///  B1796
                B1796: u1,
                ///  B1797
                B1797: u1,
                ///  B1798
                B1798: u1,
                ///  B1799
                B1799: u1,
                ///  B1800
                B1800: u1,
                ///  B1801
                B1801: u1,
                ///  B1802
                B1802: u1,
                ///  B1803
                B1803: u1,
                ///  B1804
                B1804: u1,
                ///  B1805
                B1805: u1,
                ///  B1806
                B1806: u1,
                ///  B1807
                B1807: u1,
                ///  B1808
                B1808: u1,
                ///  B1809
                B1809: u1,
                ///  B1810
                B1810: u1,
                ///  B1811
                B1811: u1,
                ///  B1812
                B1812: u1,
                ///  B1813
                B1813: u1,
                ///  B1814
                B1814: u1,
                ///  B1815
                B1815: u1,
                ///  B1816
                B1816: u1,
                ///  B1817
                B1817: u1,
                ///  B1818
                B1818: u1,
                ///  B1819
                B1819: u1,
                ///  B1820
                B1820: u1,
                ///  B1821
                B1821: u1,
                ///  B1822
                B1822: u1,
                ///  B1823
                B1823: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR57: mmio.Mmio(packed struct(u32) {
                ///  B1824
                B1824: u1,
                ///  B1825
                B1825: u1,
                ///  B1826
                B1826: u1,
                ///  B1827
                B1827: u1,
                ///  B1828
                B1828: u1,
                ///  B1829
                B1829: u1,
                ///  B1830
                B1830: u1,
                ///  B1831
                B1831: u1,
                ///  B1832
                B1832: u1,
                ///  B1833
                B1833: u1,
                ///  B1834
                B1834: u1,
                ///  B1835
                B1835: u1,
                ///  B1836
                B1836: u1,
                ///  B1837
                B1837: u1,
                ///  B1838
                B1838: u1,
                ///  B1839
                B1839: u1,
                ///  B1840
                B1840: u1,
                ///  B1841
                B1841: u1,
                ///  B1842
                B1842: u1,
                ///  B1843
                B1843: u1,
                ///  B1844
                B1844: u1,
                ///  B1845
                B1845: u1,
                ///  B1846
                B1846: u1,
                ///  B1847
                B1847: u1,
                ///  B1848
                B1848: u1,
                ///  B1849
                B1849: u1,
                ///  B1850
                B1850: u1,
                ///  B1851
                B1851: u1,
                ///  B1852
                B1852: u1,
                ///  B1853
                B1853: u1,
                ///  B1854
                B1854: u1,
                ///  B1855
                B1855: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR58: mmio.Mmio(packed struct(u32) {
                ///  B1856
                B1856: u1,
                ///  B1857
                B1857: u1,
                ///  B1858
                B1858: u1,
                ///  B1859
                B1859: u1,
                ///  B1860
                B1860: u1,
                ///  B1861
                B1861: u1,
                ///  B1862
                B1862: u1,
                ///  B1863
                B1863: u1,
                ///  B1864
                B1864: u1,
                ///  B1865
                B1865: u1,
                ///  B1866
                B1866: u1,
                ///  B1867
                B1867: u1,
                ///  B1868
                B1868: u1,
                ///  B1869
                B1869: u1,
                ///  B1870
                B1870: u1,
                ///  B1871
                B1871: u1,
                ///  B1872
                B1872: u1,
                ///  B1873
                B1873: u1,
                ///  B1874
                B1874: u1,
                ///  B1875
                B1875: u1,
                ///  B1876
                B1876: u1,
                ///  B1877
                B1877: u1,
                ///  B1878
                B1878: u1,
                ///  B1879
                B1879: u1,
                ///  B1880
                B1880: u1,
                ///  B1881
                B1881: u1,
                ///  B1882
                B1882: u1,
                ///  B1883
                B1883: u1,
                ///  B1884
                B1884: u1,
                ///  B1885
                B1885: u1,
                ///  B1886
                B1886: u1,
                ///  B1887
                B1887: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR59: mmio.Mmio(packed struct(u32) {
                ///  B1888
                B1888: u1,
                ///  B1889
                B1889: u1,
                ///  B1890
                B1890: u1,
                ///  B1891
                B1891: u1,
                ///  B1892
                B1892: u1,
                ///  B1893
                B1893: u1,
                ///  B1894
                B1894: u1,
                ///  B1895
                B1895: u1,
                ///  B1896
                B1896: u1,
                ///  B1897
                B1897: u1,
                ///  B1898
                B1898: u1,
                ///  B1899
                B1899: u1,
                ///  B1900
                B1900: u1,
                ///  B1901
                B1901: u1,
                ///  B1902
                B1902: u1,
                ///  B1903
                B1903: u1,
                ///  B1904
                B1904: u1,
                ///  B1905
                B1905: u1,
                ///  B1906
                B1906: u1,
                ///  B1907
                B1907: u1,
                ///  B1908
                B1908: u1,
                ///  B1909
                B1909: u1,
                ///  B1910
                B1910: u1,
                ///  B1911
                B1911: u1,
                ///  B1912
                B1912: u1,
                ///  B1913
                B1913: u1,
                ///  B1914
                B1914: u1,
                ///  B1915
                B1915: u1,
                ///  B1916
                B1916: u1,
                ///  B1917
                B1917: u1,
                ///  B1918
                B1918: u1,
                ///  B1919
                B1919: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR60: mmio.Mmio(packed struct(u32) {
                ///  B1920
                B1920: u1,
                ///  B1921
                B1921: u1,
                ///  B1922
                B1922: u1,
                ///  B1923
                B1923: u1,
                ///  B1924
                B1924: u1,
                ///  B1925
                B1925: u1,
                ///  B1926
                B1926: u1,
                ///  B1927
                B1927: u1,
                ///  B1928
                B1928: u1,
                ///  B1929
                B1929: u1,
                ///  B1930
                B1930: u1,
                ///  B1931
                B1931: u1,
                ///  B1932
                B1932: u1,
                ///  B1933
                B1933: u1,
                ///  B1934
                B1934: u1,
                ///  B1935
                B1935: u1,
                ///  B1936
                B1936: u1,
                ///  B1937
                B1937: u1,
                ///  B1938
                B1938: u1,
                ///  B1939
                B1939: u1,
                ///  B1940
                B1940: u1,
                ///  B1941
                B1941: u1,
                ///  B1942
                B1942: u1,
                ///  B1943
                B1943: u1,
                ///  B1944
                B1944: u1,
                ///  B1945
                B1945: u1,
                ///  B1946
                B1946: u1,
                ///  B1947
                B1947: u1,
                ///  B1948
                B1948: u1,
                ///  B1949
                B1949: u1,
                ///  B1950
                B1950: u1,
                ///  B1951
                B1951: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR61: mmio.Mmio(packed struct(u32) {
                ///  B1952
                B1952: u1,
                ///  B1953
                B1953: u1,
                ///  B1954
                B1954: u1,
                ///  B1955
                B1955: u1,
                ///  B1956
                B1956: u1,
                ///  B1957
                B1957: u1,
                ///  B1958
                B1958: u1,
                ///  B1959
                B1959: u1,
                ///  B1960
                B1960: u1,
                ///  B1961
                B1961: u1,
                ///  B1962
                B1962: u1,
                ///  B1963
                B1963: u1,
                ///  B1964
                B1964: u1,
                ///  B1965
                B1965: u1,
                ///  B1966
                B1966: u1,
                ///  B1967
                B1967: u1,
                ///  B1968
                B1968: u1,
                ///  B1969
                B1969: u1,
                ///  B1970
                B1970: u1,
                ///  B1971
                B1971: u1,
                ///  B1972
                B1972: u1,
                ///  B1973
                B1973: u1,
                ///  B1974
                B1974: u1,
                ///  B1975
                B1975: u1,
                ///  B1976
                B1976: u1,
                ///  B1977
                B1977: u1,
                ///  B1978
                B1978: u1,
                ///  B1979
                B1979: u1,
                ///  B1980
                B1980: u1,
                ///  B1981
                B1981: u1,
                ///  B1982
                B1982: u1,
                ///  B1983
                B1983: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR62: mmio.Mmio(packed struct(u32) {
                ///  B1984
                B1984: u1,
                ///  B1985
                B1985: u1,
                ///  B1986
                B1986: u1,
                ///  B1987
                B1987: u1,
                ///  B1988
                B1988: u1,
                ///  B1989
                B1989: u1,
                ///  B1990
                B1990: u1,
                ///  B1991
                B1991: u1,
                ///  B1992
                B1992: u1,
                ///  B1993
                B1993: u1,
                ///  B1994
                B1994: u1,
                ///  B1995
                B1995: u1,
                ///  B1996
                B1996: u1,
                ///  B1997
                B1997: u1,
                ///  B1998
                B1998: u1,
                ///  B1999
                B1999: u1,
                ///  B2000
                B2000: u1,
                ///  B2001
                B2001: u1,
                ///  B2002
                B2002: u1,
                ///  B2003
                B2003: u1,
                ///  B2004
                B2004: u1,
                ///  B2005
                B2005: u1,
                ///  B2006
                B2006: u1,
                ///  B2007
                B2007: u1,
                ///  B2008
                B2008: u1,
                ///  B2009
                B2009: u1,
                ///  B2010
                B2010: u1,
                ///  B2011
                B2011: u1,
                ///  B2012
                B2012: u1,
                ///  B2013
                B2013: u1,
                ///  B2014
                B2014: u1,
                ///  B2015
                B2015: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR63: mmio.Mmio(packed struct(u32) {
                ///  B2016
                B2016: u1,
                ///  B2017
                B2017: u1,
                ///  B2018
                B2018: u1,
                ///  B2019
                B2019: u1,
                ///  B2020
                B2020: u1,
                ///  B2021
                B2021: u1,
                ///  B2022
                B2022: u1,
                ///  B2023
                B2023: u1,
                ///  B2024
                B2024: u1,
                ///  B2025
                B2025: u1,
                ///  B2026
                B2026: u1,
                ///  B2027
                B2027: u1,
                ///  B2028
                B2028: u1,
                ///  B2029
                B2029: u1,
                ///  B2030
                B2030: u1,
                ///  B2031
                B2031: u1,
                ///  B2032
                B2032: u1,
                ///  B2033
                B2033: u1,
                ///  B2034
                B2034: u1,
                ///  B2035
                B2035: u1,
                ///  B2036
                B2036: u1,
                ///  B2037
                B2037: u1,
                ///  B2038
                B2038: u1,
                ///  B2039
                B2039: u1,
                ///  B2040
                B2040: u1,
                ///  B2041
                B2041: u1,
                ///  B2042
                B2042: u1,
                ///  B2043
                B2043: u1,
                ///  B2044
                B2044: u1,
                ///  B2045
                B2045: u1,
                ///  B2046
                B2046: u1,
                ///  B2047
                B2047: u1,
            }),
        };

        ///  Power control
        pub const PWR = extern struct {
            ///  Power control register 1
            CR1: mmio.Mmio(packed struct(u32) {
                ///  Low-power mode selection
                LPMS: u3,
                reserved8: u5,
                ///  Disable backup domain write protection
                DBP: u1,
                ///  Voltage scaling range selection
                VOS: u2,
                reserved14: u3,
                ///  Low-power run
                LPR: u1,
                padding: u17,
            }),
            ///  Power control register 2
            CR2: mmio.Mmio(packed struct(u32) {
                ///  Power voltage detector enable
                PVDE: u1,
                ///  Power voltage detector level selection
                PLS: u3,
                ///  Peripheral voltage monitoring 1 enable: VDDUSB vs. 1.2V
                PVME1: u1,
                ///  Peripheral voltage monitoring 2 enable: VDDIO2 vs. 0.9V
                PVME2: u1,
                ///  Peripheral voltage monitoring 3 enable: VDDA vs. 1.62V
                PVME3: u1,
                ///  Peripheral voltage monitoring 4 enable: VDDA vs. 2.2V
                PVME4: u1,
                reserved9: u1,
                ///  VDDIO2 Independent I/Os supply valid
                IOSV: u1,
                ///  VDDUSB USB supply valid
                USV: u1,
                padding: u21,
            }),
            ///  Power control register 3
            CR3: mmio.Mmio(packed struct(u32) {
                ///  Enable Wakeup pin WKUP1
                EWUP1: u1,
                ///  Enable Wakeup pin WKUP2
                EWUP2: u1,
                ///  Enable Wakeup pin WKUP3
                EWUP3: u1,
                ///  Enable Wakeup pin WKUP4
                EWUP4: u1,
                ///  Enable Wakeup pin WKUP5
                EWUP5: u1,
                reserved8: u3,
                ///  SRAM2 retention in Standby mode
                RRS: u2,
                ///  Apply pull-up and pull-down configuration
                APC: u1,
                ///  ULPMEN
                ULPMEN: u1,
                reserved13: u1,
                ///  UCPD_STDBY
                UCPD_STDBY: u1,
                ///  UCPD_DBDIS
                UCPD_DBDIS: u1,
                padding: u17,
            }),
            ///  Power control register 4
            CR4: mmio.Mmio(packed struct(u32) {
                ///  Wakeup pin WKUP1 polarity
                WUPP1: u1,
                ///  Wakeup pin WKUP2 polarity
                WUPP2: u1,
                ///  Wakeup pin WKUP3 polarity
                WUPP3: u1,
                ///  Wakeup pin WKUP4 polarity
                WUPP4: u1,
                ///  Wakeup pin WKUP5 polarity
                WUPP5: u1,
                reserved8: u3,
                ///  VBAT battery charging enable
                VBE: u1,
                ///  VBAT battery charging resistor selection
                VBRS: u1,
                reserved12: u2,
                ///  SMPSBYP
                SMPSBYP: u1,
                ///  EXTSMPSEN
                EXTSMPSEN: u1,
                ///  SMPSFSTEN
                SMPSFSTEN: u1,
                ///  SMPSLPEN
                SMPSLPEN: u1,
                padding: u16,
            }),
            ///  Power status register 1
            SR1: mmio.Mmio(packed struct(u32) {
                ///  Wakeup flag 1
                WUF1: u1,
                ///  Wakeup flag 2
                WUF2: u1,
                ///  Wakeup flag 3
                WUF3: u1,
                ///  Wakeup flag 4
                WUF4: u1,
                ///  Wakeup flag 5
                WUF5: u1,
                reserved8: u3,
                ///  Standby flag
                SBF: u1,
                reserved12: u3,
                ///  SMPSBYPRDY
                SMPSBYPRDY: u1,
                ///  EXTSMPSRDY
                EXTSMPSRDY: u1,
                reserved15: u1,
                ///  SMPSHPRDY
                SMPSHPRDY: u1,
                padding: u16,
            }),
            ///  Power status register 2
            SR2: mmio.Mmio(packed struct(u32) {
                reserved8: u8,
                ///  Low-power regulator started
                REGLPS: u1,
                ///  Low-power regulator flag
                REGLPF: u1,
                ///  Voltage scaling flag
                VOSF: u1,
                ///  Power voltage detector output
                PVDO: u1,
                ///  Peripheral voltage monitoring output: VDDUSB vs. 1.2 V
                PVMO1: u1,
                ///  Peripheral voltage monitoring output: VDDIO2 vs. 0.9 V
                PVMO2: u1,
                ///  Peripheral voltage monitoring output: VDDA vs. 1.62 V
                PVMO3: u1,
                ///  Peripheral voltage monitoring output: VDDA vs. 2.2 V
                PVMO4: u1,
                padding: u16,
            }),
            ///  Power status clear register
            SCR: mmio.Mmio(packed struct(u32) {
                ///  Clear wakeup flag 1
                CWUF1: u1,
                ///  Clear wakeup flag 2
                CWUF2: u1,
                ///  Clear wakeup flag 3
                CWUF3: u1,
                ///  Clear wakeup flag 4
                CWUF4: u1,
                ///  Clear wakeup flag 5
                CWUF5: u1,
                reserved8: u3,
                ///  Clear standby flag
                CSBF: u1,
                padding: u23,
            }),
            reserved32: [4]u8,
            ///  Power Port A pull-up control register
            PUCRA: mmio.Mmio(packed struct(u32) {
                ///  Port A pull-up bit y (y=0..15)
                PU0: u1,
                ///  Port A pull-up bit y (y=0..15)
                PU1: u1,
                ///  Port A pull-up bit y (y=0..15)
                PU2: u1,
                ///  Port A pull-up bit y (y=0..15)
                PU3: u1,
                ///  Port A pull-up bit y (y=0..15)
                PU4: u1,
                ///  Port A pull-up bit y (y=0..15)
                PU5: u1,
                ///  Port A pull-up bit y (y=0..15)
                PU6: u1,
                ///  Port A pull-up bit y (y=0..15)
                PU7: u1,
                ///  Port A pull-up bit y (y=0..15)
                PU8: u1,
                ///  Port A pull-up bit y (y=0..15)
                PU9: u1,
                ///  Port A pull-up bit y (y=0..15)
                PU10: u1,
                ///  Port A pull-up bit y (y=0..15)
                PU11: u1,
                ///  Port A pull-up bit y (y=0..15)
                PU12: u1,
                ///  Port A pull-up bit y (y=0..15)
                PU13: u1,
                ///  Port A pull-up bit y (y=0..15)
                PU14: u1,
                ///  Port A pull-up bit y (y=0..15)
                PU15: u1,
                padding: u16,
            }),
            ///  Power Port A pull-down control register
            PDCRA: mmio.Mmio(packed struct(u32) {
                ///  Port A pull-down bit y (y=0..15)
                PD0: u1,
                ///  Port A pull-down bit y (y=0..15)
                PD1: u1,
                ///  Port A pull-down bit y (y=0..15)
                PD2: u1,
                ///  Port A pull-down bit y (y=0..15)
                PD3: u1,
                ///  Port A pull-down bit y (y=0..15)
                PD4: u1,
                ///  Port A pull-down bit y (y=0..15)
                PD5: u1,
                ///  Port A pull-down bit y (y=0..15)
                PD6: u1,
                ///  Port A pull-down bit y (y=0..15)
                PD7: u1,
                ///  Port A pull-down bit y (y=0..15)
                PD8: u1,
                ///  Port A pull-down bit y (y=0..15)
                PD9: u1,
                ///  Port A pull-down bit y (y=0..15)
                PD10: u1,
                ///  Port A pull-down bit y (y=0..15)
                PD11: u1,
                ///  Port A pull-down bit y (y=0..15)
                PD12: u1,
                ///  Port A pull-down bit y (y=0..15)
                PD13: u1,
                ///  Port A pull-down bit y (y=0..15)
                PD14: u1,
                ///  Port A pull-down bit y (y=0..15)
                PD15: u1,
                padding: u16,
            }),
            ///  Power Port B pull-up control register
            PUCRB: mmio.Mmio(packed struct(u32) {
                ///  Port B pull-up bit y (y=0..15)
                PU0: u1,
                ///  Port B pull-up bit y (y=0..15)
                PU1: u1,
                ///  Port B pull-up bit y (y=0..15)
                PU2: u1,
                ///  Port B pull-up bit y (y=0..15)
                PU3: u1,
                ///  Port B pull-up bit y (y=0..15)
                PU4: u1,
                ///  Port B pull-up bit y (y=0..15)
                PU5: u1,
                ///  Port B pull-up bit y (y=0..15)
                PU6: u1,
                ///  Port B pull-up bit y (y=0..15)
                PU7: u1,
                ///  Port B pull-up bit y (y=0..15)
                PU8: u1,
                ///  Port B pull-up bit y (y=0..15)
                PU9: u1,
                ///  Port B pull-up bit y (y=0..15)
                PU10: u1,
                ///  Port B pull-up bit y (y=0..15)
                PU11: u1,
                ///  Port B pull-up bit y (y=0..15)
                PU12: u1,
                ///  Port B pull-up bit y (y=0..15)
                PU13: u1,
                ///  Port B pull-up bit y (y=0..15)
                PU14: u1,
                ///  Port B pull-up bit y (y=0..15)
                PU15: u1,
                padding: u16,
            }),
            ///  Power Port B pull-down control register
            PDCRB: mmio.Mmio(packed struct(u32) {
                ///  Port B pull-down bit y (y=0..15)
                PD0: u1,
                ///  Port B pull-down bit y (y=0..15)
                PD1: u1,
                ///  Port B pull-down bit y (y=0..15)
                PD2: u1,
                ///  Port B pull-down bit y (y=0..15)
                PD3: u1,
                ///  Port B pull-down bit y (y=0..15)
                PD4: u1,
                ///  Port B pull-down bit y (y=0..15)
                PD5: u1,
                ///  Port B pull-down bit y (y=0..15)
                PD6: u1,
                ///  Port B pull-down bit y (y=0..15)
                PD7: u1,
                ///  Port B pull-down bit y (y=0..15)
                PD8: u1,
                ///  Port B pull-down bit y (y=0..15)
                PD9: u1,
                ///  Port B pull-down bit y (y=0..15)
                PD10: u1,
                ///  Port B pull-down bit y (y=0..15)
                PD11: u1,
                ///  Port B pull-down bit y (y=0..15)
                PD12: u1,
                ///  Port B pull-down bit y (y=0..15)
                PD13: u1,
                ///  Port B pull-down bit y (y=0..15)
                PD14: u1,
                ///  Port B pull-down bit y (y=0..15)
                PD15: u1,
                padding: u16,
            }),
            ///  Power Port C pull-up control register
            PUCRC: mmio.Mmio(packed struct(u32) {
                ///  Port C pull-up bit y (y=0..15)
                PU0: u1,
                ///  Port C pull-up bit y (y=0..15)
                PU1: u1,
                ///  Port C pull-up bit y (y=0..15)
                PU2: u1,
                ///  Port C pull-up bit y (y=0..15)
                PU3: u1,
                ///  Port C pull-up bit y (y=0..15)
                PU4: u1,
                ///  Port C pull-up bit y (y=0..15)
                PU5: u1,
                ///  Port C pull-up bit y (y=0..15)
                PU6: u1,
                ///  Port C pull-up bit y (y=0..15)
                PU7: u1,
                ///  Port C pull-up bit y (y=0..15)
                PU8: u1,
                ///  Port C pull-up bit y (y=0..15)
                PU9: u1,
                ///  Port C pull-up bit y (y=0..15)
                PU10: u1,
                ///  Port C pull-up bit y (y=0..15)
                PU11: u1,
                ///  Port C pull-up bit y (y=0..15)
                PU12: u1,
                ///  Port C pull-up bit y (y=0..15)
                PU13: u1,
                ///  Port C pull-up bit y (y=0..15)
                PU14: u1,
                ///  Port C pull-up bit y (y=0..15)
                PU15: u1,
                padding: u16,
            }),
            ///  Power Port C pull-down control register
            PDCRC: mmio.Mmio(packed struct(u32) {
                ///  Port C pull-down bit y (y=0..15)
                PD0: u1,
                ///  Port C pull-down bit y (y=0..15)
                PD1: u1,
                ///  Port C pull-down bit y (y=0..15)
                PD2: u1,
                ///  Port C pull-down bit y (y=0..15)
                PD3: u1,
                ///  Port C pull-down bit y (y=0..15)
                PD4: u1,
                ///  Port C pull-down bit y (y=0..15)
                PD5: u1,
                ///  Port C pull-down bit y (y=0..15)
                PD6: u1,
                ///  Port C pull-down bit y (y=0..15)
                PD7: u1,
                ///  Port C pull-down bit y (y=0..15)
                PD8: u1,
                ///  Port C pull-down bit y (y=0..15)
                PD9: u1,
                ///  Port C pull-down bit y (y=0..15)
                PD10: u1,
                ///  Port C pull-down bit y (y=0..15)
                PD11: u1,
                ///  Port C pull-down bit y (y=0..15)
                PD12: u1,
                ///  Port C pull-down bit y (y=0..15)
                PD13: u1,
                ///  Port C pull-down bit y (y=0..15)
                PD14: u1,
                ///  Port C pull-down bit y (y=0..15)
                PD15: u1,
                padding: u16,
            }),
            ///  Power Port D pull-up control register
            PUCRD: mmio.Mmio(packed struct(u32) {
                ///  Port D pull-up bit y (y=0..15)
                PU0: u1,
                ///  Port D pull-up bit y (y=0..15)
                PU1: u1,
                ///  Port D pull-up bit y (y=0..15)
                PU2: u1,
                ///  Port D pull-up bit y (y=0..15)
                PU3: u1,
                ///  Port D pull-up bit y (y=0..15)
                PU4: u1,
                ///  Port D pull-up bit y (y=0..15)
                PU5: u1,
                ///  Port D pull-up bit y (y=0..15)
                PU6: u1,
                ///  Port D pull-up bit y (y=0..15)
                PU7: u1,
                ///  Port D pull-up bit y (y=0..15)
                PU8: u1,
                ///  Port D pull-up bit y (y=0..15)
                PU9: u1,
                ///  Port D pull-up bit y (y=0..15)
                PU10: u1,
                ///  Port D pull-up bit y (y=0..15)
                PU11: u1,
                ///  Port D pull-up bit y (y=0..15)
                PU12: u1,
                ///  Port D pull-up bit y (y=0..15)
                PU13: u1,
                ///  Port D pull-up bit y (y=0..15)
                PU14: u1,
                ///  Port D pull-up bit y (y=0..15)
                PU15: u1,
                padding: u16,
            }),
            ///  Power Port D pull-down control register
            PDCRD: mmio.Mmio(packed struct(u32) {
                ///  Port D pull-down bit y (y=0..15)
                PD0: u1,
                ///  Port D pull-down bit y (y=0..15)
                PD1: u1,
                ///  Port D pull-down bit y (y=0..15)
                PD2: u1,
                ///  Port D pull-down bit y (y=0..15)
                PD3: u1,
                ///  Port D pull-down bit y (y=0..15)
                PD4: u1,
                ///  Port D pull-down bit y (y=0..15)
                PD5: u1,
                ///  Port D pull-down bit y (y=0..15)
                PD6: u1,
                ///  Port D pull-down bit y (y=0..15)
                PD7: u1,
                ///  Port D pull-down bit y (y=0..15)
                PD8: u1,
                ///  Port D pull-down bit y (y=0..15)
                PD9: u1,
                ///  Port D pull-down bit y (y=0..15)
                PD10: u1,
                ///  Port D pull-down bit y (y=0..15)
                PD11: u1,
                ///  Port D pull-down bit y (y=0..15)
                PD12: u1,
                ///  Port D pull-down bit y (y=0..15)
                PD13: u1,
                ///  Port D pull-down bit y (y=0..15)
                PD14: u1,
                ///  Port D pull-down bit y (y=0..15)
                PD15: u1,
                padding: u16,
            }),
            ///  Power Port E pull-up control register
            PUCRE: mmio.Mmio(packed struct(u32) {
                ///  Port E pull-up bit y (y=0..15)
                PU0: u1,
                ///  Port E pull-up bit y (y=0..15)
                PU1: u1,
                ///  Port E pull-up bit y (y=0..15)
                PU2: u1,
                ///  Port E pull-up bit y (y=0..15)
                PU3: u1,
                ///  Port E pull-up bit y (y=0..15)
                PU4: u1,
                ///  Port E pull-up bit y (y=0..15)
                PU5: u1,
                ///  Port E pull-up bit y (y=0..15)
                PU6: u1,
                ///  Port E pull-up bit y (y=0..15)
                PU7: u1,
                ///  Port E pull-up bit y (y=0..15)
                PU8: u1,
                ///  Port E pull-up bit y (y=0..15)
                PU9: u1,
                ///  Port E pull-up bit y (y=0..15)
                PU10: u1,
                ///  Port E pull-up bit y (y=0..15)
                PU11: u1,
                ///  Port E pull-up bit y (y=0..15)
                PU12: u1,
                ///  Port E pull-up bit y (y=0..15)
                PU13: u1,
                ///  Port E pull-up bit y (y=0..15)
                PU14: u1,
                ///  Port E pull-up bit y (y=0..15)
                PU15: u1,
                padding: u16,
            }),
            ///  Power Port E pull-down control register
            PDCRE: mmio.Mmio(packed struct(u32) {
                ///  Port E pull-down bit y (y=0..15)
                PD0: u1,
                ///  Port E pull-down bit y (y=0..15)
                PD1: u1,
                ///  Port E pull-down bit y (y=0..15)
                PD2: u1,
                ///  Port E pull-down bit y (y=0..15)
                PD3: u1,
                ///  Port E pull-down bit y (y=0..15)
                PD4: u1,
                ///  Port E pull-down bit y (y=0..15)
                PD5: u1,
                ///  Port E pull-down bit y (y=0..15)
                PD6: u1,
                ///  Port E pull-down bit y (y=0..15)
                PD7: u1,
                ///  Port E pull-down bit y (y=0..15)
                PD8: u1,
                ///  Port E pull-down bit y (y=0..15)
                PD9: u1,
                ///  Port E pull-down bit y (y=0..15)
                PD10: u1,
                ///  Port E pull-down bit y (y=0..15)
                PD11: u1,
                ///  Port E pull-down bit y (y=0..15)
                PD12: u1,
                ///  Port E pull-down bit y (y=0..15)
                PD13: u1,
                ///  Port E pull-down bit y (y=0..15)
                PD14: u1,
                ///  Port E pull-down bit y (y=0..15)
                PD15: u1,
                padding: u16,
            }),
            ///  Power Port F pull-up control register
            PUCRF: mmio.Mmio(packed struct(u32) {
                ///  Port F pull-up bit y (y=0..15)
                PU0: u1,
                ///  Port F pull-up bit y (y=0..15)
                PU1: u1,
                ///  Port F pull-up bit y (y=0..15)
                PU2: u1,
                ///  Port F pull-up bit y (y=0..15)
                PU3: u1,
                ///  Port F pull-up bit y (y=0..15)
                PU4: u1,
                ///  Port F pull-up bit y (y=0..15)
                PU5: u1,
                ///  Port F pull-up bit y (y=0..15)
                PU6: u1,
                ///  Port F pull-up bit y (y=0..15)
                PU7: u1,
                ///  Port F pull-up bit y (y=0..15)
                PU8: u1,
                ///  Port F pull-up bit y (y=0..15)
                PU9: u1,
                ///  Port F pull-up bit y (y=0..15)
                PU10: u1,
                ///  Port F pull-up bit y (y=0..15)
                PU11: u1,
                ///  Port F pull-up bit y (y=0..15)
                PU12: u1,
                ///  Port F pull-up bit y (y=0..15)
                PU13: u1,
                ///  Port F pull-up bit y (y=0..15)
                PU14: u1,
                ///  Port F pull-up bit y (y=0..15)
                PU15: u1,
                padding: u16,
            }),
            ///  Power Port F pull-down control register
            PDCRF: mmio.Mmio(packed struct(u32) {
                ///  Port F pull-down bit y (y=0..15)
                PD0: u1,
                ///  Port F pull-down bit y (y=0..15)
                PD1: u1,
                ///  Port F pull-down bit y (y=0..15)
                PD2: u1,
                ///  Port F pull-down bit y (y=0..15)
                PD3: u1,
                ///  Port F pull-down bit y (y=0..15)
                PD4: u1,
                ///  Port F pull-down bit y (y=0..15)
                PD5: u1,
                ///  Port F pull-down bit y (y=0..15)
                PD6: u1,
                ///  Port F pull-down bit y (y=0..15)
                PD7: u1,
                ///  Port F pull-down bit y (y=0..15)
                PD8: u1,
                ///  Port F pull-down bit y (y=0..15)
                PD9: u1,
                ///  Port F pull-down bit y (y=0..15)
                PD10: u1,
                ///  Port F pull-down bit y (y=0..15)
                PD11: u1,
                ///  Port F pull-down bit y (y=0..15)
                PD12: u1,
                ///  Port F pull-down bit y (y=0..15)
                PD13: u1,
                ///  Port F pull-down bit y (y=0..15)
                PD14: u1,
                ///  Port F pull-down bit y (y=0..15)
                PD15: u1,
                padding: u16,
            }),
            ///  Power Port G pull-up control register
            PUCRG: mmio.Mmio(packed struct(u32) {
                ///  Port G pull-up bit y (y=0..15)
                PU0: u1,
                ///  Port G pull-up bit y (y=0..15)
                PU1: u1,
                ///  Port G pull-up bit y (y=0..15)
                PU2: u1,
                ///  Port G pull-up bit y (y=0..15)
                PU3: u1,
                ///  Port G pull-up bit y (y=0..15)
                PU4: u1,
                ///  Port G pull-up bit y (y=0..15)
                PU5: u1,
                ///  Port G pull-up bit y (y=0..15)
                PU6: u1,
                ///  Port G pull-up bit y (y=0..15)
                PU7: u1,
                ///  Port G pull-up bit y (y=0..15)
                PU8: u1,
                ///  Port G pull-up bit y (y=0..15)
                PU9: u1,
                ///  Port G pull-up bit y (y=0..15)
                PU10: u1,
                ///  Port G pull-up bit y (y=0..15)
                PU11: u1,
                ///  Port G pull-up bit y (y=0..15)
                PU12: u1,
                ///  Port G pull-up bit y (y=0..15)
                PU13: u1,
                ///  Port G pull-up bit y (y=0..15)
                PU14: u1,
                ///  Port G pull-up bit y (y=0..15)
                PU15: u1,
                padding: u16,
            }),
            ///  Power Port G pull-down control register
            PDCRG: mmio.Mmio(packed struct(u32) {
                ///  Port G pull-down bit y (y=0..15)
                PD0: u1,
                ///  Port G pull-down bit y (y=0..15)
                PD1: u1,
                ///  Port G pull-down bit y (y=0..15)
                PD2: u1,
                ///  Port G pull-down bit y (y=0..15)
                PD3: u1,
                ///  Port G pull-down bit y (y=0..15)
                PD4: u1,
                ///  Port G pull-down bit y (y=0..15)
                PD5: u1,
                ///  Port G pull-down bit y (y=0..15)
                PD6: u1,
                ///  Port G pull-down bit y (y=0..15)
                PD7: u1,
                ///  Port G pull-down bit y (y=0..15)
                PD8: u1,
                ///  Port G pull-down bit y (y=0..15)
                PD9: u1,
                ///  Port G pull-down bit y (y=0..15)
                PD10: u1,
                ///  Port G pull-down bit y (y=0..15)
                PD11: u1,
                ///  Port G pull-down bit y (y=0..15)
                PD12: u1,
                ///  Port G pull-down bit y (y=0..15)
                PD13: u1,
                ///  Port G pull-down bit y (y=0..15)
                PD14: u1,
                ///  Port G pull-down bit y (y=0..15)
                PD15: u1,
                padding: u16,
            }),
            ///  Power Port H pull-up control register
            PUCRH: mmio.Mmio(packed struct(u32) {
                ///  Port G pull-up bit y (y=0..15)
                PU0: u1,
                ///  Port G pull-up bit y (y=0..15)
                PU1: u1,
                ///  Port G pull-up bit y (y=0..15)
                PU2: u1,
                ///  Port G pull-up bit y (y=0..15)
                PU3: u1,
                ///  Port G pull-up bit y (y=0..15)
                PU4: u1,
                ///  Port G pull-up bit y (y=0..15)
                PU5: u1,
                ///  Port G pull-up bit y (y=0..15)
                PU6: u1,
                ///  Port G pull-up bit y (y=0..15)
                PU7: u1,
                ///  Port G pull-up bit y (y=0..15)
                PU8: u1,
                ///  Port G pull-up bit y (y=0..15)
                PU9: u1,
                ///  Port G pull-up bit y (y=0..15)
                PU10: u1,
                ///  Port G pull-up bit y (y=0..15)
                PU11: u1,
                ///  Port G pull-up bit y (y=0..15)
                PU12: u1,
                ///  Port G pull-up bit y (y=0..15)
                PU13: u1,
                ///  Port G pull-up bit y (y=0..15)
                PU14: u1,
                ///  Port G pull-up bit y (y=0..15)
                PU15: u1,
                padding: u16,
            }),
            ///  Power Port H pull-down control register
            PDCRH: mmio.Mmio(packed struct(u32) {
                ///  Port G pull-down bit y (y=0..15)
                PD0: u1,
                ///  Port G pull-down bit y (y=0..15)
                PD1: u1,
                ///  Port G pull-down bit y (y=0..15)
                PD2: u1,
                ///  Port G pull-down bit y (y=0..15)
                PD3: u1,
                ///  Port G pull-down bit y (y=0..15)
                PD4: u1,
                ///  Port G pull-down bit y (y=0..15)
                PD5: u1,
                ///  Port G pull-down bit y (y=0..15)
                PD6: u1,
                ///  Port G pull-down bit y (y=0..15)
                PD7: u1,
                ///  Port G pull-down bit y (y=0..15)
                PD8: u1,
                ///  Port G pull-down bit y (y=0..15)
                PD9: u1,
                ///  Port G pull-down bit y (y=0..15)
                PD10: u1,
                ///  Port G pull-down bit y (y=0..15)
                PD11: u1,
                ///  Port G pull-down bit y (y=0..15)
                PD12: u1,
                ///  Port G pull-down bit y (y=0..15)
                PD13: u1,
                ///  Port G pull-down bit y (y=0..15)
                PD14: u1,
                ///  Port G pull-down bit y (y=0..15)
                PD15: u1,
                padding: u16,
            }),
            reserved120: [24]u8,
            ///  Power secure configuration register
            SECCFGR: mmio.Mmio(packed struct(u32) {
                ///  WKUP1 pin security
                WUP1SEC: u1,
                ///  WKUP2 pin security
                WUP2SEC: u1,
                ///  WKUP3 pin security
                WUP3SEC: u1,
                ///  WKUP4 pin security
                WUP4SEC: u1,
                ///  WKUP5 pin security
                WUP5SEC: u1,
                reserved8: u3,
                ///  LPMSEC
                LPMSEC: u1,
                ///  VDMSEC
                VDMSEC: u1,
                ///  VBSEC
                VBSEC: u1,
                ///  APCSEC
                APCSEC: u1,
                padding: u20,
            }),
            reserved128: [4]u8,
            ///  Power privilege configuration register
            PRIVCFGR: mmio.Mmio(packed struct(u32) {
                ///  PRIV
                PRIV: u1,
                padding: u31,
            }),
        };

        ///  Advanced encryption standard hardware accelerator 1
        pub const AES = extern struct {
            ///  control register
            CR: mmio.Mmio(packed struct(u32) {
                ///  AES enable
                EN: u1,
                ///  Data type selection (for data in and data out to/from the cryptographic block)
                DATATYPE: u2,
                ///  AES operating mode
                MODE: u2,
                ///  AES chaining mode selection Bit1 Bit0
                CHMOD: u2,
                ///  Computation Complete Flag Clear
                CCFC: u1,
                ///  Error clear
                ERRC: u1,
                ///  CCF flag interrupt enable
                CCFIE: u1,
                ///  Error interrupt enable
                ERRIE: u1,
                ///  Enable DMA management of data input phase
                DMAINEN: u1,
                ///  Enable DMA management of data output phase
                DMAOUTEN: u1,
                ///  Used only for GCM, CCM and GMAC algorithms and has no effect when other algorithms are selected
                GCMPH: u2,
                reserved16: u1,
                ///  AES chaining mode Bit2
                CHMOD2: u1,
                reserved18: u1,
                ///  Key size selection
                KEYSIZE: u1,
                reserved20: u1,
                ///  Number of padding bytes in last block of payload
                NPBLB: u4,
                padding: u8,
            }),
            ///  status register
            SR: mmio.Mmio(packed struct(u32) {
                ///  Computation complete flag
                CCF: u1,
                ///  Read error flag
                RDERR: u1,
                ///  Write error flag
                WRERR: u1,
                ///  Busy flag
                BUSY: u1,
                padding: u28,
            }),
            ///  data input register
            DINR: mmio.Mmio(packed struct(u32) {
                ///  Data Input Register
                DIN: u32,
            }),
            ///  data output register
            DOUTR: mmio.Mmio(packed struct(u32) {
                ///  Data output register
                DOUT: u32,
            }),
            ///  key register 0
            KEYR0: mmio.Mmio(packed struct(u32) {
                ///  Cryptographic key, bits[31:0]
                KEY: u32,
            }),
            ///  key register 1
            KEYR1: mmio.Mmio(packed struct(u32) {
                ///  Cryptographic key, bits [63:32])
                KEY: u32,
            }),
            ///  key register 2
            KEYR2: mmio.Mmio(packed struct(u32) {
                ///  Cryptographic key, bits [95:64])
                KEY: u32,
            }),
            ///  key register 3
            KEYR3: mmio.Mmio(packed struct(u32) {
                ///  Cryptographic key, bits [127:96])
                KEY: u32,
            }),
            ///  initialization vector register 0
            IVR0: mmio.Mmio(packed struct(u32) {
                ///  initialization vector register (LSB IVR [31:0])
                IVI: u32,
            }),
            ///  initialization vector register 1
            IVR1: mmio.Mmio(packed struct(u32) {
                ///  Initialization Vector Register (IVR [63:32])
                IVI: u32,
            }),
            ///  initialization vector register 2
            IVR2: mmio.Mmio(packed struct(u32) {
                ///  Initialization Vector Register (IVR [95:64])
                IVI: u32,
            }),
            ///  initialization vector register 3
            IVR3: mmio.Mmio(packed struct(u32) {
                ///  Initialization Vector Register (MSB IVR [127:96])
                IVI: u32,
            }),
            ///  key register 4
            KEYR4: mmio.Mmio(packed struct(u32) {
                ///  Cryptographic key, bits [159:128])
                KEY: u32,
            }),
            ///  key register 5
            KEYR5: mmio.Mmio(packed struct(u32) {
                ///  Cryptographic key, bits [191:160])
                KEY: u32,
            }),
            ///  key register 6
            KEYR6: mmio.Mmio(packed struct(u32) {
                ///  Cryptographic key, bits [223:192])
                KEY: u32,
            }),
            ///  key register 7
            KEYR7: mmio.Mmio(packed struct(u32) {
                ///  Cryptographic key, bits [255:224])
                KEY: u32,
            }),
            ///  AES suspend register 0
            SUSP0R: mmio.Mmio(packed struct(u32) {
                ///  AES suspend register 0
                AES_SUSP0R: u32,
            }),
            ///  AES suspend register 1
            SUSP1R: mmio.Mmio(packed struct(u32) {
                ///  AES suspend register 1
                AES_SUSP1R: u32,
            }),
            ///  AES suspend register 2
            SUSP2R: mmio.Mmio(packed struct(u32) {
                ///  AES suspend register 2
                AES_SUSP2R: u32,
            }),
            ///  AES suspend register 3
            SUSP3R: mmio.Mmio(packed struct(u32) {
                ///  AES suspend register 3
                AES_SUSP3R: u32,
            }),
            ///  AES suspend register 4
            SUSP4R: mmio.Mmio(packed struct(u32) {
                ///  AES suspend register 4
                AES_SUSP4R: u32,
            }),
            ///  AES suspend register 5
            SUSP5R: mmio.Mmio(packed struct(u32) {
                ///  AES suspend register 5
                AES_SUSP5R: u32,
            }),
            ///  AES suspend register 6
            SUSP6R: mmio.Mmio(packed struct(u32) {
                ///  AES suspend register 6
                AES_SUSP6R: u32,
            }),
            ///  AES suspend register 7
            SUSP7R: mmio.Mmio(packed struct(u32) {
                ///  AES suspend register 7
                AES_SUSP7R: u32,
            }),
        };

        ///  Reset and clock control
        pub const RCC = extern struct {
            ///  Clock control register
            CR: mmio.Mmio(packed struct(u32) {
                ///  MSI clock enable
                MSION: u1,
                ///  MSI clock ready flag
                MSIRDY: u1,
                ///  MSI clock PLL enable
                MSIPLLEN: u1,
                ///  MSI clock range selection
                MSIRGSEL: u1,
                ///  MSI clock ranges
                MSIRANGE: u4,
                ///  HSI clock enable
                HSION: u1,
                ///  HSI always enable for peripheral kernels
                HSIKERON: u1,
                ///  HSI clock ready flag
                HSIRDY: u1,
                ///  HSI automatic start from Stop
                HSIASFS: u1,
                reserved16: u4,
                ///  HSE clock enable
                HSEON: u1,
                ///  HSE clock ready flag
                HSERDY: u1,
                ///  HSE crystal oscillator bypass
                HSEBYP: u1,
                ///  Clock security system enable
                CSSON: u1,
                reserved24: u4,
                ///  Main PLL enable
                PLLON: u1,
                ///  Main PLL clock ready flag
                PLLRDY: u1,
                ///  SAI1 PLL enable
                PLLSAI1ON: u1,
                ///  SAI1 PLL clock ready flag
                PLLSAI1RDY: u1,
                ///  SAI2 PLL enable
                PLLSAI2ON: u1,
                ///  SAI2 PLL clock ready flag
                PLLSAI2RDY: u1,
                reserved31: u1,
                ///  PRIV
                PRIV: u1,
            }),
            ///  Internal clock sources calibration register
            ICSCR: mmio.Mmio(packed struct(u32) {
                ///  MSI clock calibration
                MSICAL: u8,
                ///  MSI clock trimming
                MSITRIM: u8,
                ///  HSI clock calibration
                HSICAL: u8,
                ///  HSI clock trimming
                HSITRIM: u7,
                padding: u1,
            }),
            ///  Clock configuration register
            CFGR: mmio.Mmio(packed struct(u32) {
                ///  System clock switch
                SW: u2,
                ///  System clock switch status
                SWS: u2,
                ///  AHB prescaler
                HPRE: u4,
                ///  PB low-speed prescaler (APB1)
                PPRE1: u3,
                ///  APB high-speed prescaler (APB2)
                PPRE2: u3,
                reserved15: u1,
                ///  Wakeup from Stop and CSS backup clock selection
                STOPWUCK: u1,
                reserved24: u8,
                ///  Microcontroller clock output
                MCOSEL: u4,
                ///  Microcontroller clock output prescaler
                MCOPRE: u3,
                padding: u1,
            }),
            ///  PLL configuration register
            PLLCFGR: mmio.Mmio(packed struct(u32) {
                ///  Main PLL, PLLSAI1 and PLLSAI2 entry clock source
                PLLSRC: u2,
                reserved4: u2,
                ///  Division factor for the main PLL and audio PLL (PLLSAI1 and PLLSAI2) input clock
                PLLM: u4,
                ///  Main PLL multiplication factor for VCO
                PLLN: u7,
                reserved16: u1,
                ///  Main PLL PLLSAI3CLK output enable
                PLLPEN: u1,
                ///  Main PLL division factor for PLLSAI3CLK (SAI1 and SAI2 clock)
                PLLP: u1,
                reserved20: u2,
                ///  Main PLL PLLUSB1CLK output enable
                PLLQEN: u1,
                ///  Main PLL division factor for PLLUSB1CLK(48 MHz clock)
                PLLQ: u2,
                reserved24: u1,
                ///  Main PLL PLLCLK output enable
                PLLREN: u1,
                ///  Main PLL division factor for PLLCLK (system clock)
                PLLR: u2,
                ///  Main PLL division factor for PLLSAI2CLK
                PLLPDIV: u5,
            }),
            ///  PLLSAI1 configuration register
            PLLSAI1CFGR: mmio.Mmio(packed struct(u32) {
                ///  PLLSAI1SRC
                PLLSAI1SRC: u2,
                reserved4: u2,
                ///  Division factor for PLLSAI1 input clock
                PLLSAI1M: u4,
                ///  SAI1PLL multiplication factor for VCO
                PLLSAI1N: u7,
                reserved16: u1,
                ///  SAI1PLL PLLSAI1CLK output enable
                PLLSAI1PEN: u1,
                ///  SAI1PLL division factor for PLLSAI1CLK (SAI1 or SAI2 clock)
                PLLSAI1P: u1,
                reserved20: u2,
                ///  SAI1PLL PLLUSB2CLK output enable
                PLLSAI1QEN: u1,
                ///  SAI1PLL division factor for PLLUSB2CLK (48 MHz clock)
                PLLSAI1Q: u2,
                reserved24: u1,
                ///  PLLSAI1 PLLADC1CLK output enable
                PLLSAI1REN: u1,
                ///  PLLSAI1 division factor for PLLADC1CLK (ADC clock)
                PLLSAI1R: u2,
                ///  PLLSAI1 division factor for PLLSAI1CLK
                PLLSAI1PDIV: u5,
            }),
            ///  PLLSAI2 configuration register
            PLLSAI2CFGR: mmio.Mmio(packed struct(u32) {
                ///  PLLSAI2SRC
                PLLSAI2SRC: u2,
                reserved4: u2,
                ///  Division factor for PLLSAI2 input clock
                PLLSAI2M: u4,
                ///  SAI2PLL multiplication factor for VCO
                PLLSAI2N: u7,
                reserved16: u1,
                ///  SAI2PLL PLLSAI2CLK output enable
                PLLSAI2PEN: u1,
                ///  SAI1PLL division factor for PLLSAI2CLK (SAI1 or SAI2 clock)
                PLLSAI2P: u1,
                reserved27: u9,
                ///  PLLSAI2 division factor for PLLSAI2CLK
                PLLSAI2PDIV: u5,
            }),
            ///  Clock interrupt enable register
            CIER: mmio.Mmio(packed struct(u32) {
                ///  LSI ready interrupt enable
                LSIRDYIE: u1,
                ///  LSE ready interrupt enable
                LSERDYIE: u1,
                ///  MSI ready interrupt enable
                MSIRDYIE: u1,
                ///  HSI ready interrupt enable
                HSIRDYIE: u1,
                ///  HSE ready interrupt enable
                HSERDYIE: u1,
                ///  PLL ready interrupt enable
                PLLRDYIE: u1,
                ///  PLLSAI1 ready interrupt enable
                PLLSAI1RDYIE: u1,
                ///  PLLSAI2 ready interrupt enable
                PLLSAI2RDYIE: u1,
                reserved9: u1,
                ///  LSE clock security system interrupt enable
                LSECSSIE: u1,
                ///  HSI48 ready interrupt enable
                HSI48RDYIE: u1,
                padding: u21,
            }),
            ///  Clock interrupt flag register
            CIFR: mmio.Mmio(packed struct(u32) {
                ///  LSI ready interrupt flag
                LSIRDYF: u1,
                ///  LSE ready interrupt flag
                LSERDYF: u1,
                ///  MSI ready interrupt flag
                MSIRDYF: u1,
                ///  HSI ready interrupt flag
                HSIRDYF: u1,
                ///  HSE ready interrupt flag
                HSERDYF: u1,
                ///  PLL ready interrupt flag
                PLLRDYF: u1,
                ///  PLLSAI1 ready interrupt flag
                PLLSAI1RDYF: u1,
                ///  PLLSAI2 ready interrupt flag
                PLLSAI2RDYF: u1,
                ///  Clock security system interrupt flag
                CSSF: u1,
                ///  LSE Clock security system interrupt flag
                LSECSSF: u1,
                ///  HSI48 ready interrupt flag
                HSI48RDYF: u1,
                padding: u21,
            }),
            ///  Clock interrupt clear register
            CICR: mmio.Mmio(packed struct(u32) {
                ///  LSI ready interrupt clear
                LSIRDYC: u1,
                ///  LSE ready interrupt clear
                LSERDYC: u1,
                ///  MSI ready interrupt clear
                MSIRDYC: u1,
                ///  HSI ready interrupt clear
                HSIRDYC: u1,
                ///  HSE ready interrupt clear
                HSERDYC: u1,
                ///  PLL ready interrupt clear
                PLLRDYC: u1,
                ///  PLLSAI1 ready interrupt clear
                PLLSAI1RDYC: u1,
                ///  PLLSAI2 ready interrupt clear
                PLLSAI2RDYC: u1,
                ///  Clock security system interrupt clear
                CSSC: u1,
                ///  LSE Clock security system interrupt clear
                LSECSSC: u1,
                ///  HSI48 oscillator ready interrupt clear
                HSI48RDYC: u1,
                padding: u21,
            }),
            reserved40: [4]u8,
            ///  AHB1 peripheral reset register
            AHB1RSTR: mmio.Mmio(packed struct(u32) {
                ///  DMA1 reset
                DMA1RST: u1,
                ///  DMA2 reset
                DMA2RST: u1,
                ///  DMAMUXRST
                DMAMUX1RST: u1,
                reserved8: u5,
                ///  Flash memory interface reset
                FLASHRST: u1,
                reserved12: u3,
                ///  CRC reset
                CRCRST: u1,
                reserved16: u3,
                ///  Touch Sensing Controller reset
                TSCRST: u1,
                reserved22: u5,
                ///  GTZC reset
                GTZCRST: u1,
                padding: u9,
            }),
            ///  AHB2 peripheral reset register
            AHB2RSTR: mmio.Mmio(packed struct(u32) {
                ///  IO port A reset
                GPIOARST: u1,
                ///  IO port B reset
                GPIOBRST: u1,
                ///  IO port C reset
                GPIOCRST: u1,
                ///  IO port D reset
                GPIODRST: u1,
                ///  IO port E reset
                GPIOERST: u1,
                ///  IO port F reset
                GPIOFRST: u1,
                ///  IO port G reset
                GPIOGRST: u1,
                ///  IO port H reset
                GPIOHRST: u1,
                reserved13: u5,
                ///  ADC reset
                ADCRST: u1,
                reserved16: u2,
                ///  AES hardware accelerator reset
                AESRST: u1,
                ///  Hash reset
                HASHRST: u1,
                ///  Random number generator reset
                RNGRST: u1,
                ///  PKARST
                PKARST: u1,
                reserved21: u1,
                ///  OTFDEC1RST
                OTFDEC1RST: u1,
                ///  SDMMC1 reset
                SDMMC1RST: u1,
                padding: u9,
            }),
            ///  AHB3 peripheral reset register
            AHB3RSTR: mmio.Mmio(packed struct(u32) {
                ///  Flexible memory controller reset
                FMCRST: u1,
                reserved8: u7,
                ///  OSPI1RST
                OSPI1RST: u1,
                padding: u23,
            }),
            reserved56: [4]u8,
            ///  APB1 peripheral reset register 1
            APB1RSTR1: mmio.Mmio(packed struct(u32) {
                ///  TIM2 timer reset
                TIM2RST: u1,
                ///  TIM3 timer reset
                TIM3RST: u1,
                ///  TIM3 timer reset
                TIM4RST: u1,
                ///  TIM5 timer reset
                TIM5RST: u1,
                ///  TIM6 timer reset
                TIM6RST: u1,
                ///  TIM7 timer reset
                TIM7RST: u1,
                reserved14: u8,
                ///  SPI2 reset
                SPI2RST: u1,
                ///  SPI3 reset
                SPI3RST: u1,
                reserved17: u1,
                ///  USART2 reset
                USART2RST: u1,
                ///  USART3 reset
                USART3RST: u1,
                ///  UART4 reset
                UART4RST: u1,
                ///  UART5 reset
                UART5RST: u1,
                ///  I2C1 reset
                I2C1RST: u1,
                ///  I2C2 reset
                I2C2RST: u1,
                ///  I2C3 reset
                I2C3RST: u1,
                ///  CRS reset
                CRSRST: u1,
                reserved28: u3,
                ///  Power interface reset
                PWRRST: u1,
                ///  DAC1 interface reset
                DAC1RST: u1,
                ///  OPAMP interface reset
                OPAMPRST: u1,
                ///  Low Power Timer 1 reset
                LPTIM1RST: u1,
            }),
            ///  APB1 peripheral reset register 2
            APB1RSTR2: mmio.Mmio(packed struct(u32) {
                ///  Low-power UART 1 reset
                LPUART1RST: u1,
                ///  I2C4 reset
                I2C4RST: u1,
                reserved5: u3,
                ///  Low-power timer 2 reset
                LPTIM2RST: u1,
                ///  LPTIM3RST
                LPTIM3RST: u1,
                reserved9: u2,
                ///  FDCAN1RST
                FDCAN1RST: u1,
                reserved21: u11,
                ///  USBFSRST
                USBFSRST: u1,
                reserved23: u1,
                ///  UCPD1RST
                UCPD1RST: u1,
                padding: u8,
            }),
            ///  APB2 peripheral reset register
            APB2RSTR: mmio.Mmio(packed struct(u32) {
                ///  System configuration (SYSCFG) reset
                SYSCFGRST: u1,
                reserved11: u10,
                ///  TIM1 timer reset
                TIM1RST: u1,
                ///  SPI1 reset
                SPI1RST: u1,
                ///  TIM8 timer reset
                TIM8RST: u1,
                ///  USART1 reset
                USART1RST: u1,
                reserved16: u1,
                ///  TIM15 timer reset
                TIM15RST: u1,
                ///  TIM16 timer reset
                TIM16RST: u1,
                ///  TIM17 timer reset
                TIM17RST: u1,
                reserved21: u2,
                ///  Serial audio interface 1 (SAI1) reset
                SAI1RST: u1,
                ///  Serial audio interface 2 (SAI2) reset
                SAI2RST: u1,
                reserved24: u1,
                ///  Digital filters for sigma-delata modulators (DFSDM) reset
                DFSDM1RST: u1,
                padding: u7,
            }),
            reserved72: [4]u8,
            ///  AHB1 peripheral clock enable register
            AHB1ENR: mmio.Mmio(packed struct(u32) {
                ///  DMA1 clock enable
                DMA1EN: u1,
                ///  DMA2 clock enable
                DMA2EN: u1,
                ///  DMAMUX clock enable
                DMAMUX1EN: u1,
                reserved8: u5,
                ///  Flash memory interface clock enable
                FLASHEN: u1,
                reserved12: u3,
                ///  CRC clock enable
                CRCEN: u1,
                reserved16: u3,
                ///  Touch Sensing Controller clock enable
                TSCEN: u1,
                reserved22: u5,
                ///  GTZCEN
                GTZCEN: u1,
                padding: u9,
            }),
            ///  AHB2 peripheral clock enable register
            AHB2ENR: mmio.Mmio(packed struct(u32) {
                ///  IO port A clock enable
                GPIOAEN: u1,
                ///  IO port B clock enable
                GPIOBEN: u1,
                ///  IO port C clock enable
                GPIOCEN: u1,
                ///  IO port D clock enable
                GPIODEN: u1,
                ///  IO port E clock enable
                GPIOEEN: u1,
                ///  IO port F clock enable
                GPIOFEN: u1,
                ///  IO port G clock enable
                GPIOGEN: u1,
                ///  IO port H clock enable
                GPIOHEN: u1,
                reserved13: u5,
                ///  ADC clock enable
                ADCEN: u1,
                reserved16: u2,
                ///  AES accelerator clock enable
                AESEN: u1,
                ///  HASH clock enable
                HASHEN: u1,
                ///  Random Number Generator clock enable
                RNGEN: u1,
                ///  PKAEN
                PKAEN: u1,
                reserved21: u1,
                ///  OTFDEC1EN
                OTFDEC1EN: u1,
                ///  SDMMC1 clock enable
                SDMMC1EN: u1,
                padding: u9,
            }),
            ///  AHB3 peripheral clock enable register
            AHB3ENR: mmio.Mmio(packed struct(u32) {
                ///  Flexible memory controller clock enable
                FMCEN: u1,
                reserved8: u7,
                ///  OSPI1EN
                OSPI1EN: u1,
                padding: u23,
            }),
            reserved88: [4]u8,
            ///  APB1ENR1
            APB1ENR1: mmio.Mmio(packed struct(u32) {
                ///  TIM2 timer clock enable
                TIM2EN: u1,
                ///  TIM3 timer clock enable
                TIM3EN: u1,
                ///  TIM4 timer clock enable
                TIM4EN: u1,
                ///  TIM5 timer clock enable
                TIM5EN: u1,
                ///  TIM6 timer clock enable
                TIM6EN: u1,
                ///  TIM7 timer clock enable
                TIM7EN: u1,
                reserved10: u4,
                ///  RTC APB clock enable
                RTCAPBEN: u1,
                ///  Window watchdog clock enable
                WWDGEN: u1,
                reserved14: u2,
                ///  SPI2 clock enable
                SPI2EN: u1,
                ///  SPI3 clock enable
                SP3EN: u1,
                reserved17: u1,
                ///  USART2 clock enable
                USART2EN: u1,
                ///  USART3 clock enable
                USART3EN: u1,
                ///  UART4 clock enable
                UART4EN: u1,
                ///  UART5 clock enable
                UART5EN: u1,
                ///  I2C1 clock enable
                I2C1EN: u1,
                ///  I2C2 clock enable
                I2C2EN: u1,
                ///  I2C3 clock enable
                I2C3EN: u1,
                ///  Clock Recovery System clock enable
                CRSEN: u1,
                reserved28: u3,
                ///  Power interface clock enable
                PWREN: u1,
                ///  DAC1 interface clock enable
                DAC1EN: u1,
                ///  OPAMP interface clock enable
                OPAMPEN: u1,
                ///  Low power timer 1 clock enable
                LPTIM1EN: u1,
            }),
            ///  APB1 peripheral clock enable register 2
            APB1ENR2: mmio.Mmio(packed struct(u32) {
                ///  Low power UART 1 clock enable
                LPUART1EN: u1,
                ///  I2C4 clock enable
                I2C4EN: u1,
                reserved5: u3,
                ///  LPTIM2EN
                LPTIM2EN: u1,
                ///  LPTIM3EN
                LPTIM3EN: u1,
                reserved9: u2,
                ///  FDCAN1EN
                FDCAN1EN: u1,
                reserved21: u11,
                ///  USBFSEN
                USBFSEN: u1,
                reserved23: u1,
                ///  UCPD1EN
                UCPD1EN: u1,
                padding: u8,
            }),
            ///  APB2ENR
            APB2ENR: mmio.Mmio(packed struct(u32) {
                ///  SYSCFG clock enable
                SYSCFGEN: u1,
                reserved11: u10,
                ///  TIM1 timer clock enable
                TIM1EN: u1,
                ///  SPI1 clock enable
                SPI1EN: u1,
                ///  TIM8 timer clock enable
                TIM8EN: u1,
                ///  USART1clock enable
                USART1EN: u1,
                reserved16: u1,
                ///  TIM15 timer clock enable
                TIM15EN: u1,
                ///  TIM16 timer clock enable
                TIM16EN: u1,
                ///  TIM17 timer clock enable
                TIM17EN: u1,
                reserved21: u2,
                ///  SAI1 clock enable
                SAI1EN: u1,
                ///  SAI2 clock enable
                SAI2EN: u1,
                reserved24: u1,
                ///  DFSDM timer clock enable
                DFSDM1EN: u1,
                padding: u7,
            }),
            reserved104: [4]u8,
            ///  AHB1 peripheral clocks enable in Sleep and Stop modes register
            AHB1SMENR: mmio.Mmio(packed struct(u32) {
                ///  DMA1 clocks enable during Sleep and Stop modes
                DMA1SMEN: u1,
                ///  DMA2 clocks enable during Sleep and Stop modes
                DMA2SMEN: u1,
                ///  DMAMUX clock enable during Sleep and Stop modes
                DMAMUX1SMEN: u1,
                reserved8: u5,
                ///  Flash memory interface clocks enable during Sleep and Stop modes
                FLASHSMEN: u1,
                ///  SRAM1 interface clocks enable during Sleep and Stop modes
                SRAM1SMEN: u1,
                reserved12: u2,
                ///  CRCSMEN
                CRCSMEN: u1,
                reserved16: u3,
                ///  Touch Sensing Controller clocks enable during Sleep and Stop modes
                TSCSMEN: u1,
                reserved22: u5,
                ///  GTZCSMEN
                GTZCSMEN: u1,
                ///  ICACHESMEN
                ICACHESMEN: u1,
                padding: u8,
            }),
            ///  AHB2 peripheral clocks enable in Sleep and Stop modes register
            AHB2SMENR: mmio.Mmio(packed struct(u32) {
                ///  IO port A clocks enable during Sleep and Stop modes
                GPIOASMEN: u1,
                ///  IO port B clocks enable during Sleep and Stop modes
                GPIOBSMEN: u1,
                ///  IO port C clocks enable during Sleep and Stop modes
                GPIOCSMEN: u1,
                ///  IO port D clocks enable during Sleep and Stop modes
                GPIODSMEN: u1,
                ///  IO port E clocks enable during Sleep and Stop modes
                GPIOESMEN: u1,
                ///  IO port F clocks enable during Sleep and Stop modes
                GPIOFSMEN: u1,
                ///  IO port G clocks enable during Sleep and Stop modes
                GPIOGSMEN: u1,
                ///  IO port H clocks enable during Sleep and Stop modes
                GPIOHSMEN: u1,
                reserved9: u1,
                ///  SRAM2 interface clocks enable during Sleep and Stop modes
                SRAM2SMEN: u1,
                reserved13: u3,
                ///  ADC clocks enable during Sleep and Stop modes
                ADCFSSMEN: u1,
                reserved16: u2,
                ///  AES accelerator clocks enable during Sleep and Stop modes
                AESSMEN: u1,
                ///  HASH clock enable during Sleep and Stop modes
                HASHSMEN: u1,
                ///  Random Number Generator clocks enable during Sleep and Stop modes
                RNGSMEN: u1,
                ///  PKASMEN
                PKASMEN: u1,
                reserved21: u1,
                ///  OTFDEC1SMEN
                OTFDEC1SMEN: u1,
                ///  SDMMC1 clocks enable during Sleep and Stop modes
                SDMMC1SMEN: u1,
                padding: u9,
            }),
            ///  AHB3 peripheral clocks enable in Sleep and Stop modes register
            AHB3SMENR: mmio.Mmio(packed struct(u32) {
                ///  Flexible memory controller clocks enable during Sleep and Stop modes
                FMCSMEN: u1,
                reserved8: u7,
                ///  OSPI1SMEN
                OSPI1SMEN: u1,
                padding: u23,
            }),
            reserved120: [4]u8,
            ///  APB1SMENR1
            APB1SMENR1: mmio.Mmio(packed struct(u32) {
                ///  TIM2 timer clocks enable during Sleep and Stop modes
                TIM2SMEN: u1,
                ///  TIM3 timer clocks enable during Sleep and Stop modes
                TIM3SMEN: u1,
                ///  TIM4 timer clocks enable during Sleep and Stop modes
                TIM4SMEN: u1,
                ///  TIM5 timer clocks enable during Sleep and Stop modes
                TIM5SMEN: u1,
                ///  TIM6 timer clocks enable during Sleep and Stop modes
                TIM6SMEN: u1,
                ///  TIM7 timer clocks enable during Sleep and Stop modes
                TIM7SMEN: u1,
                reserved10: u4,
                ///  RTC APB clock enable during Sleep and Stop modes
                RTCAPBSMEN: u1,
                ///  Window watchdog clocks enable during Sleep and Stop modes
                WWDGSMEN: u1,
                reserved14: u2,
                ///  SPI2 clocks enable during Sleep and Stop modes
                SPI2SMEN: u1,
                ///  SPI3 clocks enable during Sleep and Stop modes
                SP3SMEN: u1,
                reserved17: u1,
                ///  USART2 clocks enable during Sleep and Stop modes
                USART2SMEN: u1,
                ///  USART3 clocks enable during Sleep and Stop modes
                USART3SMEN: u1,
                ///  UART4 clocks enable during Sleep and Stop modes
                UART4SMEN: u1,
                ///  UART5 clocks enable during Sleep and Stop modes
                UART5SMEN: u1,
                ///  I2C1 clocks enable during Sleep and Stop modes
                I2C1SMEN: u1,
                ///  I2C2 clocks enable during Sleep and Stop modes
                I2C2SMEN: u1,
                ///  I2C3 clocks enable during Sleep and Stop modes
                I2C3SMEN: u1,
                ///  CRS clock enable during Sleep and Stop modes
                CRSSMEN: u1,
                reserved28: u3,
                ///  Power interface clocks enable during Sleep and Stop modes
                PWRSMEN: u1,
                ///  DAC1 interface clocks enable during Sleep and Stop modes
                DAC1SMEN: u1,
                ///  OPAMP interface clocks enable during Sleep and Stop modes
                OPAMPSMEN: u1,
                ///  Low power timer 1 clocks enable during Sleep and Stop modes
                LPTIM1SMEN: u1,
            }),
            ///  APB1 peripheral clocks enable in Sleep and Stop modes register 2
            APB1SMENR2: mmio.Mmio(packed struct(u32) {
                ///  Low power UART 1 clocks enable during Sleep and Stop modes
                LPUART1SMEN: u1,
                ///  I2C4 clocks enable during Sleep and Stop modes
                I2C4SMEN: u1,
                reserved5: u3,
                ///  LPTIM2SMEN
                LPTIM2SMEN: u1,
                ///  LPTIM3SMEN
                LPTIM3SMEN: u1,
                reserved9: u2,
                ///  FDCAN1SMEN
                FDCAN1SMEN: u1,
                reserved21: u11,
                ///  USBFSSMEN
                USBFSSMEN: u1,
                reserved23: u1,
                ///  UCPD1SMEN
                UCPD1SMEN: u1,
                padding: u8,
            }),
            ///  APB2SMENR
            APB2SMENR: mmio.Mmio(packed struct(u32) {
                ///  SYSCFG clocks enable during Sleep and Stop modes
                SYSCFGSMEN: u1,
                reserved11: u10,
                ///  TIM1 timer clocks enable during Sleep and Stop modes
                TIM1SMEN: u1,
                ///  SPI1 clocks enable during Sleep and Stop modes
                SPI1SMEN: u1,
                ///  TIM8 timer clocks enable during Sleep and Stop modes
                TIM8SMEN: u1,
                ///  USART1clocks enable during Sleep and Stop modes
                USART1SMEN: u1,
                reserved16: u1,
                ///  TIM15 timer clocks enable during Sleep and Stop modes
                TIM15SMEN: u1,
                ///  TIM16 timer clocks enable during Sleep and Stop modes
                TIM16SMEN: u1,
                ///  TIM17 timer clocks enable during Sleep and Stop modes
                TIM17SMEN: u1,
                reserved21: u2,
                ///  SAI1 clocks enable during Sleep and Stop modes
                SAI1SMEN: u1,
                ///  SAI2 clocks enable during Sleep and Stop modes
                SAI2SMEN: u1,
                reserved24: u1,
                ///  DFSDM timer clocks enable during Sleep and Stop modes
                DFSDM1SMEN: u1,
                padding: u7,
            }),
            reserved136: [4]u8,
            ///  CCIPR1
            CCIPR1: mmio.Mmio(packed struct(u32) {
                ///  USART1 clock source selection
                USART1SEL: u2,
                ///  USART2 clock source selection
                USART2SEL: u2,
                ///  USART3 clock source selection
                USART3SEL: u2,
                ///  UART4 clock source selection
                UART4SEL: u2,
                ///  UART5 clock source selection
                UART5SEL: u2,
                ///  LPUART1 clock source selection
                LPUART1SEL: u2,
                ///  I2C1 clock source selection
                I2C1SEL: u2,
                ///  I2C2 clock source selection
                I2C2SEL: u2,
                ///  I2C3 clock source selection
                I2C3SEL: u2,
                ///  Low power timer 1 clock source selection
                LPTIM1SEL: u2,
                ///  Low power timer 2 clock source selection
                LPTIM2SEL: u2,
                ///  Low-power timer 3 clock source selection
                LPTIM3SEL: u2,
                ///  FDCAN clock source selection
                FDCANSEL: u2,
                ///  48 MHz clock source selection
                CLK48MSEL: u2,
                ///  ADCs clock source selection
                ADCSEL: u2,
                padding: u2,
            }),
            reserved144: [4]u8,
            ///  BDCR
            BDCR: mmio.Mmio(packed struct(u32) {
                ///  LSE oscillator enable
                LSEON: u1,
                ///  LSE oscillator ready
                LSERDY: u1,
                ///  LSE oscillator bypass
                LSEBYP: u1,
                ///  SE oscillator drive capability
                LSEDRV: u2,
                ///  LSECSSON
                LSECSSON: u1,
                ///  LSECSSD
                LSECSSD: u1,
                ///  LSESYSEN
                LSESYSEN: u1,
                ///  RTC clock source selection
                RTCSEL: u2,
                reserved11: u1,
                ///  LSESYSRDY
                LSESYSRDY: u1,
                reserved15: u3,
                ///  RTC clock enable
                RTCEN: u1,
                ///  Backup domain software reset
                BDRST: u1,
                reserved24: u7,
                ///  Low speed clock output enable
                LSCOEN: u1,
                ///  Low speed clock output selection
                LSCOSEL: u1,
                padding: u6,
            }),
            ///  CSR
            CSR: mmio.Mmio(packed struct(u32) {
                ///  LSI oscillator enable
                LSION: u1,
                ///  LSI oscillator ready
                LSIRDY: u1,
                reserved4: u2,
                ///  LSIPREDIV
                LSIPREDIV: u1,
                reserved8: u3,
                ///  SI range after Standby mode
                MSISRANGE: u4,
                reserved23: u11,
                ///  Remove reset flag
                RMVF: u1,
                reserved25: u1,
                ///  Option byte loader reset flag
                OBLRSTF: u1,
                ///  Pin reset flag
                PINRSTF: u1,
                ///  BOR flag
                BORRSTF: u1,
                ///  Software reset flag
                SFTRSTF: u1,
                ///  Independent window watchdog reset flag
                IWWDGRSTF: u1,
                ///  Window watchdog reset flag
                WWDGRSTF: u1,
                ///  Low-power reset flag
                LPWRSTF: u1,
            }),
            ///  Clock recovery RC register
            CRRCR: mmio.Mmio(packed struct(u32) {
                ///  HSI48 clock enable
                HSI48ON: u1,
                ///  HSI48 clock ready flag
                HSI48RDY: u1,
                reserved7: u5,
                ///  HSI48 clock calibration
                HSI48CAL: u9,
                padding: u16,
            }),
            ///  Peripherals independent clock configuration register
            CCIPR2: mmio.Mmio(packed struct(u32) {
                ///  I2C4 clock source selection
                I2C4SEL: u2,
                ///  Digital filter for sigma delta modulator kernel clock source selection
                DFSDMSEL: u1,
                ///  Digital filter for sigma delta modulator audio clock source selection
                ADFSDMSEL: u2,
                ///  SAI1 clock source selection
                SAI1SEL: u3,
                ///  SAI2 clock source selection
                SAI2SEL: u3,
                reserved14: u3,
                ///  SDMMC clock selection
                SDMMCSEL: u1,
                reserved20: u5,
                ///  Octospi clock source selection
                OSPISEL: u2,
                padding: u10,
            }),
            reserved184: [24]u8,
            ///  RCC secure configuration register
            SECCFGR: mmio.Mmio(packed struct(u32) {
                ///  HSISEC
                HSISEC: u1,
                ///  HSESEC
                HSESEC: u1,
                ///  MSISEC
                MSISEC: u1,
                ///  LSISEC
                LSISEC: u1,
                ///  LSESEC
                LSESEC: u1,
                ///  SYSCLKSEC
                SYSCLKSEC: u1,
                ///  PRESCSEC
                PRESCSEC: u1,
                ///  PLLSEC
                PLLSEC: u1,
                ///  PLLSAI1SEC
                PLLSAI1SEC: u1,
                ///  PLLSAI2SEC
                PLLSAI2SEC: u1,
                ///  CLK48MSEC
                CLK48MSEC: u1,
                ///  HSI48SEC
                HSI48SEC: u1,
                ///  RMVFSEC
                RMVFSEC: u1,
                padding: u19,
            }),
            ///  RCC secure status register
            SECSR: mmio.Mmio(packed struct(u32) {
                ///  HSISECF
                HSISECF: u1,
                ///  HSESECF
                HSESECF: u1,
                ///  MSISECF
                MSISECF: u1,
                ///  LSISECF
                LSISECF: u1,
                ///  LSESECF
                LSESECF: u1,
                ///  SYSCLKSECF
                SYSCLKSECF: u1,
                ///  PRESCSECF
                PRESCSECF: u1,
                ///  PLLSECF
                PLLSECF: u1,
                ///  PLLSAI1SECF
                PLLSAI1SECF: u1,
                ///  PLLSAI2SECF
                PLLSAI2SECF: u1,
                ///  CLK48MSECF
                CLK48MSECF: u1,
                ///  HSI48SECF
                HSI48SECF: u1,
                ///  RMVFSECF
                RMVFSECF: u1,
                padding: u19,
            }),
            reserved232: [40]u8,
            ///  RCC AHB1 security status register
            AHB1SECSR: mmio.Mmio(packed struct(u32) {
                ///  DMA1SECF
                DMA1SECF: u1,
                ///  DMA2SECF
                DMA2SECF: u1,
                ///  DMAMUX1SECF
                DMAMUX1SECF: u1,
                reserved8: u5,
                ///  FLASHSECF
                FLASHSECF: u1,
                ///  SRAM1SECF
                SRAM1SECF: u1,
                reserved12: u2,
                ///  CRCSECF
                CRCSECF: u1,
                reserved16: u3,
                ///  TSCSECF
                TSCSECF: u1,
                reserved22: u5,
                ///  GTZCSECF
                GTZCSECF: u1,
                ///  ICACHESECF
                ICACHESECF: u1,
                padding: u8,
            }),
            ///  RCC AHB2 security status register
            AHB2SECSR: mmio.Mmio(packed struct(u32) {
                ///  GPIOASECF
                GPIOASECF: u1,
                ///  GPIOBSECF
                GPIOBSECF: u1,
                ///  GPIOCSECF
                GPIOCSECF: u1,
                ///  GPIODSECF
                GPIODSECF: u1,
                ///  GPIOESECF
                GPIOESECF: u1,
                ///  GPIOFSECF
                GPIOFSECF: u1,
                ///  GPIOGSECF
                GPIOGSECF: u1,
                ///  GPIOHSECF
                GPIOHSECF: u1,
                reserved9: u1,
                ///  SRAM2SECF
                SRAM2SECF: u1,
                reserved21: u11,
                ///  OTFDEC1SECF
                OTFDEC1SECF: u1,
                ///  SDMMC1SECF
                SDMMC1SECF: u1,
                padding: u9,
            }),
            ///  RCC AHB3 security status register
            AHB3SECSR: mmio.Mmio(packed struct(u32) {
                ///  FSMCSECF
                FSMCSECF: u1,
                reserved8: u7,
                ///  OSPI1SECF
                OSPI1SECF: u1,
                padding: u23,
            }),
            reserved248: [4]u8,
            ///  RCC APB1 security status register 1
            APB1SECSR1: mmio.Mmio(packed struct(u32) {
                ///  TIM2SECF
                TIM2SECF: u1,
                ///  TIM3SECF
                TIM3SECF: u1,
                ///  TIM4SECF
                TIM4SECF: u1,
                ///  TIM5SECF
                TIM5SECF: u1,
                ///  TIM6SECF
                TIM6SECF: u1,
                ///  TIM7SECF
                TIM7SECF: u1,
                reserved10: u4,
                ///  RTCAPBSECF
                RTCAPBSECF: u1,
                ///  WWDGSECF
                WWDGSECF: u1,
                reserved14: u2,
                ///  SPI2SECF
                SPI2SECF: u1,
                ///  SPI3SECF
                SPI3SECF: u1,
                reserved17: u1,
                ///  UART2SECF
                UART2SECF: u1,
                ///  UART3SECF
                UART3SECF: u1,
                ///  UART4SECF
                UART4SECF: u1,
                ///  UART5SECF
                UART5SECF: u1,
                ///  I2C1SECF
                I2C1SECF: u1,
                ///  I2C2SECF
                I2C2SECF: u1,
                ///  I2C3SECF
                I2C3SECF: u1,
                ///  CRSSECF
                CRSSECF: u1,
                reserved28: u3,
                ///  PWRSECF
                PWRSECF: u1,
                ///  DACSECF
                DACSECF: u1,
                ///  OPAMPSECF
                OPAMPSECF: u1,
                ///  LPTIM1SECF
                LPTIM1SECF: u1,
            }),
            ///  RCC APB1 security status register 2
            APB1SECSR2: mmio.Mmio(packed struct(u32) {
                ///  LPUART1SECF
                LPUART1SECF: u1,
                ///  I2C4SECF
                I2C4SECF: u1,
                reserved5: u3,
                ///  LPTIM2SECF
                LPTIM2SECF: u1,
                ///  LPTIM3SECF
                LPTIM3SECF: u1,
                reserved9: u2,
                ///  FDCAN1SECF
                FDCAN1SECF: u1,
                reserved21: u11,
                ///  USBFSSECF
                USBFSSECF: u1,
                reserved23: u1,
                ///  UCPD1SECF
                UCPD1SECF: u1,
                padding: u8,
            }),
            ///  RCC APB2 security status register
            APB2SECSR: mmio.Mmio(packed struct(u32) {
                ///  SYSCFGSECF
                SYSCFGSECF: u1,
                reserved11: u10,
                ///  TIM1SECF
                TIM1SECF: u1,
                ///  SPI1SECF
                SPI1SECF: u1,
                ///  TIM8SECF
                TIM8SECF: u1,
                ///  USART1SECF
                USART1SECF: u1,
                reserved16: u1,
                ///  TIM15SECF
                TIM15SECF: u1,
                ///  TIM16SECF
                TIM16SECF: u1,
                ///  TIM17SECF
                TIM17SECF: u1,
                reserved21: u2,
                ///  SAI1SECF
                SAI1SECF: u1,
                ///  SAI2SECF
                SAI2SECF: u1,
                reserved24: u1,
                ///  DFSDM1SECF
                DFSDM1SECF: u1,
                padding: u7,
            }),
        };

        ///  FDCAN1
        pub const FDCAN1 = extern struct {
            ///  FDCAN Core Release Register
            FDCAN_CREL: mmio.Mmio(packed struct(u32) {
                ///  Timestamp Day
                DAY: u8,
                ///  Timestamp Month
                MON: u8,
                ///  Timestamp Year
                YEAR: u4,
                ///  Sub-step of Core release
                SUBSTEP: u4,
                ///  Step of Core release
                STEP: u4,
                ///  Core release
                REL: u4,
            }),
            ///  FDCAN Core Release Register
            FDCAN_ENDN: mmio.Mmio(packed struct(u32) {
                ///  Endiannes Test Value
                ETV: u32,
            }),
            reserved12: [4]u8,
            ///  FDCAN Data Bit Timing and Prescaler Register
            FDCAN_DBTP: mmio.Mmio(packed struct(u32) {
                ///  Synchronization Jump Width
                DSJW: u4,
                ///  Data time segment after sample point
                DTSEG2: u4,
                ///  Data time segment after sample point
                DTSEG1: u5,
                reserved16: u3,
                ///  Data BIt Rate Prescaler
                DBRP: u5,
                reserved23: u2,
                ///  Transceiver Delay Compensation
                TDC: u1,
                padding: u8,
            }),
            ///  FDCAN Test Register
            FDCAN_TEST: mmio.Mmio(packed struct(u32) {
                reserved4: u4,
                ///  Loop Back mode
                LBCK: u1,
                ///  Loop Back mode
                TX: u2,
                ///  Control of Transmit Pin
                RX: u1,
                padding: u24,
            }),
            ///  FDCAN RAM Watchdog Register
            FDCAN_RWD: mmio.Mmio(packed struct(u32) {
                ///  Watchdog configuration
                WDC: u8,
                ///  Watchdog value
                WDV: u8,
                padding: u16,
            }),
            ///  FDCAN CC Control Register
            FDCAN_CCCR: mmio.Mmio(packed struct(u32) {
                ///  Initialization
                INIT: u1,
                ///  Configuration Change Enable
                CCE: u1,
                ///  ASM Restricted Operation Mode
                ASM: u1,
                ///  Clock Stop Acknowledge
                CSA: u1,
                ///  Clock Stop Request
                CSR: u1,
                ///  Bus Monitoring Mode
                MON: u1,
                ///  Disable Automatic Retransmission
                DAR: u1,
                ///  Test Mode Enable
                TEST: u1,
                ///  FD Operation Enable
                FDOE: u1,
                ///  FDCAN Bit Rate Switching
                BSE: u1,
                reserved12: u2,
                ///  Protocol Exception Handling Disable
                PXHD: u1,
                ///  Edge Filtering during Bus Integration
                EFBI: u1,
                ///  TXP
                TXP: u1,
                ///  Non ISO Operation
                NISO: u1,
                padding: u16,
            }),
            ///  FDCAN Nominal Bit Timing and Prescaler Register
            FDCAN_NBTP: mmio.Mmio(packed struct(u32) {
                ///  Nominal Time segment after sample point
                TSEG2: u7,
                reserved8: u1,
                ///  Nominal Time segment before sample point
                NTSEG1: u8,
                ///  Bit Rate Prescaler
                NBRP: u9,
                ///  NSJW: Nominal (Re)Synchronization Jump Width
                NSJW: u7,
            }),
            ///  FDCAN Timestamp Counter Configuration Register
            FDCAN_TSCC: mmio.Mmio(packed struct(u32) {
                ///  Timestamp Select
                TSS: u2,
                reserved16: u14,
                ///  Timestamp Counter Prescaler
                TCP: u4,
                padding: u12,
            }),
            ///  FDCAN Timestamp Counter Value Register
            FDCAN_TSCV: mmio.Mmio(packed struct(u32) {
                ///  Timestamp Counter
                TSC: u16,
                padding: u16,
            }),
            ///  FDCAN Timeout Counter Configuration Register
            FDCAN_TOCC: mmio.Mmio(packed struct(u32) {
                ///  Enable Timeout Counter
                ETOC: u1,
                ///  Timeout Select
                TOS: u2,
                reserved16: u13,
                ///  Timeout Period
                TOP: u16,
            }),
            ///  FDCAN Timeout Counter Value Register
            FDCAN_TOCV: mmio.Mmio(packed struct(u32) {
                ///  Timeout Counter
                TOC: u16,
                padding: u16,
            }),
            reserved64: [16]u8,
            ///  FDCAN Error Counter Register
            FDCAN_ECR: mmio.Mmio(packed struct(u32) {
                ///  Transmit Error Counter
                TEC: u8,
                ///  Receive Error Counter
                REC: u7,
                ///  Receive Error Passive
                RP: u1,
                ///  AN Error Logging
                CEL: u8,
                padding: u8,
            }),
            ///  FDCAN Protocol Status Register
            FDCAN_PSR: mmio.Mmio(packed struct(u32) {
                ///  Last Error Code
                LEC: u3,
                ///  Activity
                ACT: u2,
                ///  Error Passive
                EP: u1,
                ///  Warning Status
                EW: u1,
                ///  Bus_Off Status
                BO: u1,
                ///  Data Last Error Code
                DLEC: u3,
                ///  ESI flag of last received FDCAN Message
                RESI: u1,
                ///  BRS flag of last received FDCAN Message
                RBRS: u1,
                ///  Received FDCAN Message
                REDL: u1,
                ///  Protocol Exception Event
                PXE: u1,
                reserved16: u1,
                ///  Transmitter Delay Compensation Value
                TDCV: u7,
                padding: u9,
            }),
            ///  FDCAN Transmitter Delay Compensation Register
            FDCAN_TDCR: mmio.Mmio(packed struct(u32) {
                ///  Transmitter Delay Compensation Filter Window Length
                TDCF: u7,
                reserved8: u1,
                ///  Transmitter Delay Compensation Offset
                TDCO: u7,
                padding: u17,
            }),
            reserved80: [4]u8,
            ///  FDCAN Interrupt Register
            FDCAN_IR: mmio.Mmio(packed struct(u32) {
                ///  RF0N
                RF0N: u1,
                ///  RF0F
                RF0F: u1,
                ///  RF0L
                RF0L: u1,
                ///  RF1N
                RF1N: u1,
                ///  RF1F
                RF1F: u1,
                ///  RF1L
                RF1L: u1,
                ///  HPM
                HPM: u1,
                ///  TC
                TC: u1,
                ///  TCF
                TCF: u1,
                ///  TFE
                TFE: u1,
                ///  TEFN
                TEFN: u1,
                ///  TEFF
                TEFF: u1,
                ///  TEFL
                TEFL: u1,
                ///  TSW
                TSW: u1,
                ///  MRAF
                MRAF: u1,
                ///  TOO
                TOO: u1,
                ///  ELO
                ELO: u1,
                ///  EP
                EP: u1,
                ///  EW
                EW: u1,
                ///  BO
                BO: u1,
                ///  WDI
                WDI: u1,
                ///  PEA
                PEA: u1,
                ///  PED
                PED: u1,
                ///  ARA
                ARA: u1,
                padding: u8,
            }),
            ///  FDCAN Interrupt Enable Register
            FDCAN_IE: mmio.Mmio(packed struct(u32) {
                ///  Rx FIFO 0 New Message Enable
                RF0NE: u1,
                ///  Rx FIFO 0 Full Enable
                RF0FE: u1,
                ///  Rx FIFO 0 Message Lost Enable
                RF0LE: u1,
                ///  Rx FIFO 1 New Message Enable
                RF1NE: u1,
                ///  Rx FIFO 1 Watermark Reached Enable
                RF1FE: u1,
                ///  Rx FIFO 1 Message Lost Enable
                RF1LE: u1,
                ///  High Priority Message Enable
                HPME: u1,
                ///  Transmission Completed Enable
                TCE: u1,
                ///  Transmission Cancellation Finished Enable
                TCFE: u1,
                ///  Tx FIFO Empty Enable
                TEFE: u1,
                ///  Tx Event FIFO New Entry Enable
                TEFNE: u1,
                ///  Tx Event FIFO Full Enable
                TEFFE: u1,
                ///  Tx Event FIFO Element Lost Enable
                TEFLE: u1,
                ///  Message RAM Access Failure Enable
                MRAFE: u1,
                ///  Timeout Occurred Enable
                TOOE: u1,
                ///  Error Logging Overflow Enable
                ELOE: u1,
                ///  Error Passive Enable
                EPE: u1,
                ///  Warning Status Enable
                EWE: u1,
                ///  Bus_Off Status Enable
                BOE: u1,
                ///  Watchdog Interrupt Enable
                WDIE: u1,
                ///  Protocol Error in Arbitration Phase Enable
                PEAE: u1,
                ///  Protocol Error in Data Phase Enable
                PEDE: u1,
                ///  Access to Reserved Address Enable
                ARAE: u1,
                padding: u9,
            }),
            ///  FDCAN Interrupt Line Select Register
            FDCAN_ILS: mmio.Mmio(packed struct(u32) {
                ///  RxFIFO0
                RxFIFO0: u1,
                ///  RxFIFO1
                RxFIFO1: u1,
                ///  SMSG
                SMSG: u1,
                ///  TFERR
                TFERR: u1,
                ///  MISC
                MISC: u1,
                ///  BERR
                BERR: u1,
                ///  PERR
                PERR: u1,
                padding: u25,
            }),
            ///  FDCAN Interrupt Line Enable Register
            FDCAN_ILE: mmio.Mmio(packed struct(u32) {
                ///  Enable Interrupt Line 0
                EINT0: u1,
                ///  Enable Interrupt Line 1
                EINT1: u1,
                padding: u30,
            }),
            reserved128: [32]u8,
            ///  FDCAN Global Filter Configuration Register
            FDCAN_RXGFC: mmio.Mmio(packed struct(u32) {
                ///  Reject Remote Frames Extended
                RRFE: u1,
                ///  Reject Remote Frames Standard
                RRFS: u1,
                ///  Accept Non-matching Frames Extended
                ANFE: u2,
                ///  Accept Non-matching Frames Standard
                ANFS: u2,
                reserved8: u2,
                ///  F1OM
                F1OM: u1,
                ///  F0OM
                F0OM: u1,
                reserved16: u6,
                ///  LSS
                LSS: u5,
                reserved24: u3,
                ///  LSE
                LSE: u4,
                padding: u4,
            }),
            ///  FDCAN Extended ID and Mask Register
            FDCAN_XIDAM: mmio.Mmio(packed struct(u32) {
                ///  Extended ID Mask
                EIDM: u29,
                padding: u3,
            }),
            ///  FDCAN High Priority Message Status Register
            FDCAN_HPMS: mmio.Mmio(packed struct(u32) {
                ///  Buffer Index
                BIDX: u3,
                reserved6: u3,
                ///  Message Storage Indicator
                MSI: u2,
                ///  Filter Index
                FIDX: u5,
                reserved15: u2,
                ///  Filter List
                FLST: u1,
                padding: u16,
            }),
            reserved144: [4]u8,
            ///  FDCAN Rx FIFO 0 Status Register
            FDCAN_RXF0S: mmio.Mmio(packed struct(u32) {
                ///  Rx FIFO 0 Fill Level
                F0FL: u4,
                reserved8: u4,
                ///  Rx FIFO 0 Get Index
                F0GI: u2,
                reserved16: u6,
                ///  Rx FIFO 0 Put Index
                F0PI: u2,
                reserved24: u6,
                ///  Rx FIFO 0 Full
                F0F: u1,
                ///  Rx FIFO 0 Message Lost
                RF0L: u1,
                padding: u6,
            }),
            ///  CAN Rx FIFO 0 Acknowledge Register
            FDCAN_RXF0A: mmio.Mmio(packed struct(u32) {
                ///  Rx FIFO 0 Acknowledge Index
                F0AI: u3,
                padding: u29,
            }),
            ///  FDCAN Rx FIFO 1 Status Register
            FDCAN_RXF1S: mmio.Mmio(packed struct(u32) {
                ///  Rx FIFO 1 Fill Level
                F1FL: u4,
                reserved8: u4,
                ///  Rx FIFO 1 Get Index
                F1GI: u2,
                reserved16: u6,
                ///  Rx FIFO 1 Put Index
                F1PI: u2,
                reserved24: u6,
                ///  Rx FIFO 1 Full
                F1F: u1,
                ///  Rx FIFO 1 Message Lost
                RF1L: u1,
                padding: u6,
            }),
            ///  FDCAN Rx FIFO 1 Acknowledge Register
            FDCAN_RXF1A: mmio.Mmio(packed struct(u32) {
                ///  Rx FIFO 1 Acknowledge Index
                F1AI: u3,
                padding: u29,
            }),
            reserved192: [32]u8,
            ///  FDCAN Tx buffer configuration register
            FDCAN_TXBC: mmio.Mmio(packed struct(u32) {
                reserved24: u24,
                ///  Tx FIFO/Queue Mode
                TFQM: u1,
                padding: u7,
            }),
            ///  FDCAN Tx FIFO/Queue Status Register
            FDCAN_TXFQS: mmio.Mmio(packed struct(u32) {
                ///  Tx FIFO Free Level
                TFFL: u3,
                reserved8: u5,
                ///  TFGI
                TFGI: u2,
                reserved16: u6,
                ///  Tx FIFO/Queue Put Index
                TFQPI: u2,
                reserved21: u3,
                ///  Tx FIFO/Queue Full
                TFQF: u1,
                padding: u10,
            }),
            ///  FDCAN Tx Buffer Request Pending Register
            FDCAN_TXBRP: mmio.Mmio(packed struct(u32) {
                ///  Transmission Request Pending
                TRP: u3,
                padding: u29,
            }),
            ///  FDCAN Tx Buffer Add Request Register
            FDCAN_TXBAR: mmio.Mmio(packed struct(u32) {
                ///  Add Request
                AR: u3,
                padding: u29,
            }),
            ///  FDCAN Tx Buffer Cancellation Request Register
            FDCAN_TXBCR: mmio.Mmio(packed struct(u32) {
                ///  Cancellation Request
                CR: u3,
                padding: u29,
            }),
            ///  FDCAN Tx Buffer Transmission Occurred Register
            FDCAN_TXBTO: mmio.Mmio(packed struct(u32) {
                ///  Transmission Occurred.
                TO: u3,
                padding: u29,
            }),
            ///  FDCAN Tx Buffer Cancellation Finished Register
            FDCAN_TXBCF: mmio.Mmio(packed struct(u32) {
                ///  Cancellation Finished
                CF: u3,
                padding: u29,
            }),
            ///  FDCAN Tx Buffer Transmission Interrupt Enable Register
            FDCAN_TXBTIE: mmio.Mmio(packed struct(u32) {
                ///  Transmission Interrupt Enable
                TIE: u3,
                padding: u29,
            }),
            ///  FDCAN Tx Buffer Cancellation Finished Interrupt Enable Register
            FDCAN_TXBCIE: mmio.Mmio(packed struct(u32) {
                ///  Cancellation Finished Interrupt Enable
                CF: u3,
                padding: u29,
            }),
            ///  FDCAN Tx Event FIFO Status Register
            FDCAN_TXEFS: mmio.Mmio(packed struct(u32) {
                ///  Event FIFO Fill Level
                EFFL: u3,
                reserved8: u5,
                ///  Event FIFO Get Index.
                EFGI: u2,
                reserved16: u6,
                ///  Event FIFO Put Index
                EFPI: u2,
                reserved24: u6,
                ///  Event FIFO Full.
                EFF: u1,
                ///  Tx Event FIFO Element Lost.
                TEFL: u1,
                padding: u6,
            }),
            ///  FDCAN Tx Event FIFO Acknowledge Register
            FDCAN_TXEFA: mmio.Mmio(packed struct(u32) {
                ///  Event FIFO Acknowledge Index
                EFAI: u2,
                padding: u30,
            }),
            reserved256: [20]u8,
            ///  FDCAN TT Trigger Memory Configuration Register
            FDCAN_CKDIV: mmio.Mmio(packed struct(u32) {
                ///  PDIV
                PDIV: u4,
                padding: u28,
            }),
        };

        ///  Real-time clock
        pub const RTC = extern struct {
            ///  time register
            TR: mmio.Mmio(packed struct(u32) {
                ///  Second units in BCD format
                SU: u4,
                ///  Second tens in BCD format
                ST: u3,
                reserved8: u1,
                ///  Minute units in BCD format
                MNU: u4,
                ///  Minute tens in BCD format
                MNT: u3,
                reserved16: u1,
                ///  Hour units in BCD format
                HU: u4,
                ///  Hour tens in BCD format
                HT: u2,
                ///  AM/PM notation
                PM: u1,
                padding: u9,
            }),
            ///  date register
            DR: mmio.Mmio(packed struct(u32) {
                ///  Date units in BCD format
                DU: u4,
                ///  Date tens in BCD format
                DT: u2,
                reserved8: u2,
                ///  Month units in BCD format
                MU: u4,
                ///  Month tens in BCD format
                MT: u1,
                ///  Week day units
                WDU: u3,
                ///  Year units in BCD format
                YU: u4,
                ///  Year tens in BCD format
                YT: u4,
                padding: u8,
            }),
            ///  RTC sub second register
            SSR: mmio.Mmio(packed struct(u32) {
                ///  SS
                SS: u16,
                padding: u16,
            }),
            ///  RTC initialization control and status register
            ICSR: mmio.Mmio(packed struct(u32) {
                ///  Alarm A write flag
                ALRAWF: u1,
                ///  Alarm B write flag
                ALRBWF: u1,
                ///  Wakeup timer write flag
                WUTWF: u1,
                ///  Shift operation pending
                SHPF: u1,
                ///  Initialization status flag
                INITS: u1,
                ///  Registers synchronization flag
                RSF: u1,
                ///  Initialization flag
                INITF: u1,
                ///  Initialization mode
                INIT: u1,
                reserved16: u8,
                ///  Recalibration pending Flag
                RECALPF: u1,
                padding: u15,
            }),
            ///  prescaler register
            PRER: mmio.Mmio(packed struct(u32) {
                ///  Synchronous prescaler factor
                PREDIV_S: u15,
                reserved16: u1,
                ///  Asynchronous prescaler factor
                PREDIV_A: u7,
                padding: u9,
            }),
            ///  wakeup timer register
            WUTR: mmio.Mmio(packed struct(u32) {
                ///  Wakeup auto-reload value bits
                WUT: u16,
                ///  WUTOCLR
                WUTOCLR: u16,
            }),
            ///  RTC control register
            CR: mmio.Mmio(packed struct(u32) {
                ///  WUCKSEL
                WUCKSEL: u3,
                ///  TSEDGE
                TSEDGE: u1,
                ///  REFCKON
                REFCKON: u1,
                ///  BYPSHAD
                BYPSHAD: u1,
                ///  FMT
                FMT: u1,
                reserved8: u1,
                ///  ALRAE
                ALRAE: u1,
                ///  ALRBE
                ALRBE: u1,
                ///  WUTE
                WUTE: u1,
                ///  TSE
                TSE: u1,
                ///  ALRAIE
                ALRAIE: u1,
                ///  ALRBIE
                ALRBIE: u1,
                ///  WUTIE
                WUTIE: u1,
                ///  TSIE
                TSIE: u1,
                ///  ADD1H
                ADD1H: u1,
                ///  SUB1H
                SUB1H: u1,
                ///  BKP
                BKP: u1,
                ///  COSEL
                COSEL: u1,
                ///  POL
                POL: u1,
                ///  OSEL
                OSEL: u2,
                ///  COE
                COE: u1,
                ///  ITSE
                ITSE: u1,
                ///  TAMPTS
                TAMPTS: u1,
                ///  TAMPOE
                TAMPOE: u1,
                reserved29: u2,
                ///  TAMPALRM_PU
                TAMPALRM_PU: u1,
                ///  TAMPALRM_TYPE
                TAMPALRM_TYPE: u1,
                ///  OUT2EN
                OUT2EN: u1,
            }),
            ///  RTC privilege mode control register
            PRIVCR: mmio.Mmio(packed struct(u32) {
                ///  ALRAPRIV
                ALRAPRIV: u1,
                ///  ALRBPRIV
                ALRBPRIV: u1,
                ///  WUTPRIV
                WUTPRIV: u1,
                ///  TSPRIV
                TSPRIV: u1,
                reserved13: u9,
                ///  CALPRIV
                CALPRIV: u1,
                ///  INITPRIV
                INITPRIV: u1,
                ///  PRIV
                PRIV: u1,
                padding: u16,
            }),
            ///  RTC secure mode control register
            SMCR: mmio.Mmio(packed struct(u32) {
                ///  ALRADPROT
                ALRADPROT: u1,
                ///  ALRBDPROT
                ALRBDPROT: u1,
                ///  WUTDPROT
                WUTDPROT: u1,
                ///  TSDPROT
                TSDPROT: u1,
                reserved13: u9,
                ///  CALDPROT
                CALDPROT: u1,
                ///  INITDPROT
                INITDPROT: u1,
                ///  DECPROT
                DECPROT: u1,
                padding: u16,
            }),
            ///  write protection register
            WPR: mmio.Mmio(packed struct(u32) {
                ///  Write protection key
                KEY: u8,
                padding: u24,
            }),
            ///  calibration register
            CALR: mmio.Mmio(packed struct(u32) {
                ///  Calibration minus
                CALM: u9,
                reserved12: u3,
                ///  LPCAL
                LPCAL: u1,
                ///  Use a 16-second calibration cycle period
                CALW16: u1,
                ///  Use an 8-second calibration cycle period
                CALW8: u1,
                ///  Increase frequency of RTC by 488.5 ppm
                CALP: u1,
                padding: u16,
            }),
            ///  shift control register
            SHIFTR: mmio.Mmio(packed struct(u32) {
                ///  Subtract a fraction of a second
                SUBFS: u15,
                reserved31: u16,
                ///  Add one second
                ADD1S: u1,
            }),
            ///  time stamp time register
            TSTR: mmio.Mmio(packed struct(u32) {
                ///  Second units in BCD format
                SU: u4,
                ///  Second tens in BCD format
                ST: u3,
                reserved8: u1,
                ///  Minute units in BCD format
                MNU: u4,
                ///  Minute tens in BCD format
                MNT: u3,
                reserved16: u1,
                ///  Hour units in BCD format
                HU: u4,
                ///  Hour tens in BCD format
                HT: u2,
                ///  AM/PM notation
                PM: u1,
                padding: u9,
            }),
            ///  time stamp date register
            TSDR: mmio.Mmio(packed struct(u32) {
                ///  Date units in BCD format
                DU: u4,
                ///  Date tens in BCD format
                DT: u2,
                reserved8: u2,
                ///  Month units in BCD format
                MU: u4,
                ///  Month tens in BCD format
                MT: u1,
                ///  Week day units
                WDU: u3,
                padding: u16,
            }),
            ///  timestamp sub second register
            TSSSR: mmio.Mmio(packed struct(u32) {
                ///  Sub second value
                SS: u16,
                padding: u16,
            }),
            reserved64: [4]u8,
            ///  alarm A register
            ALRMAR: mmio.Mmio(packed struct(u32) {
                ///  Second units in BCD format
                SU: u4,
                ///  Second tens in BCD format
                ST: u3,
                ///  Alarm A seconds mask
                MSK1: u1,
                ///  Minute units in BCD format
                MNU: u4,
                ///  Minute tens in BCD format
                MNT: u3,
                ///  Alarm A minutes mask
                MSK2: u1,
                ///  Hour units in BCD format
                HU: u4,
                ///  Hour tens in BCD format
                HT: u2,
                ///  AM/PM notation
                PM: u1,
                ///  Alarm A hours mask
                MSK3: u1,
                ///  Date units or day in BCD format
                DU: u4,
                ///  Date tens in BCD format
                DT: u2,
                ///  Week day selection
                WDSEL: u1,
                ///  Alarm A date mask
                MSK4: u1,
            }),
            ///  alarm A sub second register
            ALRMASSR: mmio.Mmio(packed struct(u32) {
                ///  Sub seconds value
                SS: u15,
                reserved24: u9,
                ///  Mask the most-significant bits starting at this bit
                MASKSS: u4,
                padding: u4,
            }),
            ///  alarm B register
            ALRMBR: mmio.Mmio(packed struct(u32) {
                ///  Second units in BCD format
                SU: u4,
                ///  Second tens in BCD format
                ST: u3,
                ///  Alarm B seconds mask
                MSK1: u1,
                ///  Minute units in BCD format
                MNU: u4,
                ///  Minute tens in BCD format
                MNT: u3,
                ///  Alarm B minutes mask
                MSK2: u1,
                ///  Hour units in BCD format
                HU: u4,
                ///  Hour tens in BCD format
                HT: u2,
                ///  AM/PM notation
                PM: u1,
                ///  Alarm B hours mask
                MSK3: u1,
                ///  Date units or day in BCD format
                DU: u4,
                ///  Date tens in BCD format
                DT: u2,
                ///  Week day selection
                WDSEL: u1,
                ///  Alarm B date mask
                MSK4: u1,
            }),
            ///  alarm B sub second register
            ALRMBSSR: mmio.Mmio(packed struct(u32) {
                ///  Sub seconds value
                SS: u15,
                reserved24: u9,
                ///  Mask the most-significant bits starting at this bit
                MASKSS: u4,
                padding: u4,
            }),
            ///  RTC status register
            SR: mmio.Mmio(packed struct(u32) {
                ///  ALRAF
                ALRAF: u1,
                ///  ALRBF
                ALRBF: u1,
                ///  WUTF
                WUTF: u1,
                ///  TSF
                TSF: u1,
                ///  TSOVF
                TSOVF: u1,
                ///  ITSF
                ITSF: u1,
                padding: u26,
            }),
            ///  RTC non-secure masked interrupt status register
            MISR: mmio.Mmio(packed struct(u32) {
                ///  ALRAMF
                ALRAMF: u1,
                ///  ALRBMF
                ALRBMF: u1,
                ///  WUTMF
                WUTMF: u1,
                ///  TSMF
                TSMF: u1,
                ///  TSOVMF
                TSOVMF: u1,
                ///  ITSMF
                ITSMF: u1,
                padding: u26,
            }),
            ///  RTC secure masked interrupt status register
            SMISR: mmio.Mmio(packed struct(u32) {
                ///  ALRAMF
                ALRAMF: u1,
                ///  ALRBMF
                ALRBMF: u1,
                ///  WUTMF
                WUTMF: u1,
                ///  TSMF
                TSMF: u1,
                ///  TSOVMF
                TSOVMF: u1,
                ///  ITSMF
                ITSMF: u1,
                padding: u26,
            }),
            ///  RTC status clear register
            SCR: mmio.Mmio(packed struct(u32) {
                ///  CALRAF
                CALRAF: u1,
                ///  CALRBF
                CALRBF: u1,
                ///  CWUTF
                CWUTF: u1,
                ///  CTSF
                CTSF: u1,
                ///  CTSOVF
                CTSOVF: u1,
                ///  CITSF
                CITSF: u1,
                padding: u26,
            }),
        };

        ///  GTZC_TZSC
        pub const GTZC_TZSC = extern struct {
            ///  TZSC control register
            TZSC_CR: mmio.Mmio(packed struct(u32) {
                ///  LCK
                LCK: u1,
                padding: u31,
            }),
            reserved16: [12]u8,
            ///  TZSC secure configuration register 1
            TZSC_SECCFGR1: mmio.Mmio(packed struct(u32) {
                ///  TIM2SEC
                TIM2SEC: u1,
                ///  TIM3SEC
                TIM3SEC: u1,
                ///  TIM4SEC
                TIM4SEC: u1,
                ///  TIM5SEC
                TIM5SEC: u1,
                ///  TIM6SEC
                TIM6SEC: u1,
                ///  TIM7SEC
                TIM7SEC: u1,
                ///  WWDGSEC
                WWDGSEC: u1,
                ///  IWDGSEC
                IWDGSEC: u1,
                ///  SPI2SEC
                SPI2SEC: u1,
                ///  SPI3SEC
                SPI3SEC: u1,
                ///  USART2SEC
                USART2SEC: u1,
                ///  USART3SEC
                USART3SEC: u1,
                ///  UART4SEC
                UART4SEC: u1,
                ///  UART5SEC
                UART5SEC: u1,
                ///  I2C1SEC
                I2C1SEC: u1,
                ///  I2C2SEC
                I2C2SEC: u1,
                ///  I2C3SEC
                I2C3SEC: u1,
                ///  CRSSEC
                CRSSEC: u1,
                ///  DACSEC
                DACSEC: u1,
                ///  OPAMPSEC
                OPAMPSEC: u1,
                ///  LPTIM1SEC
                LPTIM1SEC: u1,
                ///  LPUART1SEC
                LPUART1SEC: u1,
                ///  I2C4SEC
                I2C4SEC: u1,
                ///  LPTIM2SEC
                LPTIM2SEC: u1,
                ///  LPTIM3SEC
                LPTIM3SEC: u1,
                ///  FDCAN1SEC
                FDCAN1SEC: u1,
                ///  USBFSSEC
                USBFSSEC: u1,
                ///  UCPD1SEC
                UCPD1SEC: u1,
                ///  VREFBUFSEC
                VREFBUFSEC: u1,
                ///  COMPSEC
                COMPSEC: u1,
                ///  TIM1SEC
                TIM1SEC: u1,
                ///  SPI1SEC
                SPI1SEC: u1,
            }),
            ///  TZSC secure configuration register 2
            TZSC_SECCFGR2: mmio.Mmio(packed struct(u32) {
                ///  TIM8SEC
                TIM8SEC: u1,
                ///  USART1SEC
                USART1SEC: u1,
                ///  TIM15SEC
                TIM15SEC: u1,
                ///  TIM16SEC
                TIM16SEC: u1,
                ///  TIM17SEC
                TIM17SEC: u1,
                ///  SAI1SEC
                SAI1SEC: u1,
                ///  SAI2SEC
                SAI2SEC: u1,
                ///  DFSDM1SEC
                DFSDM1SEC: u1,
                ///  CRCSEC
                CRCSEC: u1,
                ///  TSCSEC
                TSCSEC: u1,
                ///  ICACHESEC
                ICACHESEC: u1,
                ///  ADCSEC
                ADCSEC: u1,
                ///  AESSEC
                AESSEC: u1,
                ///  HASHSEC
                HASHSEC: u1,
                ///  RNGSEC
                RNGSEC: u1,
                ///  PKASEC
                PKASEC: u1,
                ///  SDMMC1SEC
                SDMMC1SEC: u1,
                ///  FSMC_REGSEC
                FSMC_REGSEC: u1,
                ///  OCTOSPI1_REGSEC
                OCTOSPI1_REGSEC: u1,
                padding: u13,
            }),
            reserved32: [8]u8,
            ///  TZSC privilege configuration register 1
            TZSC_PRIVCFGR1: mmio.Mmio(packed struct(u32) {
                ///  TIM2PRIV
                TIM2PRIV: u1,
                ///  TIM3PRIV
                TIM3PRIV: u1,
                ///  TIM4PRIV
                TIM4PRIV: u1,
                ///  TIM5PRIV
                TIM5PRIV: u1,
                ///  TIM6PRIV
                TIM6PRIV: u1,
                ///  TIM7PRIV
                TIM7PRIV: u1,
                ///  WWDGPRIV
                WWDGPRIV: u1,
                ///  IWDGPRIV
                IWDGPRIV: u1,
                ///  SPI2PRIV
                SPI2PRIV: u1,
                ///  SPI3PRIV
                SPI3PRIV: u1,
                ///  USART2PRIV
                USART2PRIV: u1,
                ///  USART3PRIV
                USART3PRIV: u1,
                ///  UART4PRIV
                UART4PRIV: u1,
                ///  UART5PRIV
                UART5PRIV: u1,
                ///  I2C1PRIV
                I2C1PRIV: u1,
                ///  I2C2PRIV
                I2C2PRIV: u1,
                ///  I2C3PRIV
                I2C3PRIV: u1,
                ///  CRSPRIV
                CRSPRIV: u1,
                ///  DACPRIV
                DACPRIV: u1,
                ///  OPAMPPRIV
                OPAMPPRIV: u1,
                ///  LPTIM1PRIV
                LPTIM1PRIV: u1,
                ///  LPUART1PRIV
                LPUART1PRIV: u1,
                ///  I2C4PRIV
                I2C4PRIV: u1,
                ///  LPTIM2PRIV
                LPTIM2PRIV: u1,
                ///  LPTIM3PRIV
                LPTIM3PRIV: u1,
                ///  FDCAN1PRIV
                FDCAN1PRIV: u1,
                ///  USBFSPRIV
                USBFSPRIV: u1,
                ///  UCPD1PRIV
                UCPD1PRIV: u1,
                ///  VREFBUFPRIV
                VREFBUFPRIV: u1,
                ///  COMPPRIV
                COMPPRIV: u1,
                ///  TIM1PRIV
                TIM1PRIV: u1,
                ///  SPI1PRIV
                SPI1PRIV: u1,
            }),
            ///  TZSC privilege configuration register 2
            TZSC_PRIVCFGR2: mmio.Mmio(packed struct(u32) {
                ///  TIM8PRIV
                TIM8PRIV: u1,
                ///  USART1PRIV
                USART1PRIV: u1,
                ///  TIM15PRIV
                TIM15PRIV: u1,
                ///  TIM16PRIV
                TIM16PRIV: u1,
                ///  TIM17PRIV
                TIM17PRIV: u1,
                ///  SAI1PRIV
                SAI1PRIV: u1,
                ///  SAI2PRIV
                SAI2PRIV: u1,
                ///  DFSDM1PRIV
                DFSDM1PRIV: u1,
                ///  CRCPRIV
                CRCPRIV: u1,
                ///  TSCPRIV
                TSCPRIV: u1,
                ///  ICACHEPRIV
                ICACHEPRIV: u1,
                ///  ADCPRIV
                ADCPRIV: u1,
                ///  AESPRIV
                AESPRIV: u1,
                ///  HASHPRIV
                HASHPRIV: u1,
                ///  RNGPRIV
                RNGPRIV: u1,
                ///  PKAPRIV
                PKAPRIV: u1,
                ///  SDMMC1PRIV
                SDMMC1PRIV: u1,
                ///  FSMC_REGPRIV
                FSMC_REGPRIV: u1,
                ///  OCTOSPI1_REGRIV
                OCTOSPI1_REGPRIV: u1,
                padding: u13,
            }),
            reserved48: [8]u8,
            ///  TZSC external memory non-secure watermark register 1
            TZSC_MPCWM1_NSWMR1: mmio.Mmio(packed struct(u32) {
                ///  NSWM1STRT
                NSWM1STRT: u11,
                reserved16: u5,
                ///  NSWM1LGTH
                NSWM1LGTH: u12,
                padding: u4,
            }),
            ///  TZSC external memory non-secure watermark register 1
            TZSC_MPCWM1_NSWMR2: mmio.Mmio(packed struct(u32) {
                ///  NSWM2STRT
                NSWM2STRT: u11,
                reserved16: u5,
                ///  NSWM2LGTH
                NSWM2LGTH: u12,
                padding: u4,
            }),
            ///  TZSC external memory non-secure watermark register 1
            TZSC_MPCWM2_NSWMR1: mmio.Mmio(packed struct(u32) {
                ///  NSWM1STRT
                NSWM1STRT: u11,
                reserved16: u5,
                ///  NSWM1LGTH
                NSWM1LGTH: u12,
                padding: u4,
            }),
            ///  TZSC external memory non-secure watermark register 2
            TZSC_MPCWM2_NSWMR2: mmio.Mmio(packed struct(u32) {
                ///  NSWM2STRT
                NSWM2STRT: u11,
                reserved16: u5,
                ///  NSWM2LGTH
                NSWM2LGTH: u12,
                padding: u4,
            }),
            ///  TZSC external memory non-secure watermark register 2
            TZSC_MPCWM3_NSWMR1: mmio.Mmio(packed struct(u32) {
                ///  NSWM2STRT
                NSWM2STRT: u11,
                reserved16: u5,
                ///  NSWM2LGTH
                NSWM2LGTH: u12,
                padding: u4,
            }),
        };

        ///  Serial audio interface
        pub const SAI1 = extern struct {
            ///  Global configuration register
            GCR: mmio.Mmio(packed struct(u32) {
                ///  Synchronization inputs
                SYNCIN: u2,
                reserved4: u2,
                ///  Synchronization outputs
                SYNCOUT: u2,
                padding: u26,
            }),
            ///  AConfiguration register 1
            ACR1: mmio.Mmio(packed struct(u32) {
                ///  Audio block mode
                MODE: u2,
                ///  Protocol configuration
                PRTCFG: u2,
                reserved5: u1,
                ///  Data size
                DS: u3,
                ///  Least significant bit first
                LSBFIRST: u1,
                ///  Clock strobing edge
                CKSTR: u1,
                ///  Synchronization enable
                SYNCEN: u2,
                ///  Mono mode
                MONO: u1,
                ///  Output drive
                OutDri: u1,
                reserved16: u2,
                ///  Audio block A enable
                SAIAEN: u1,
                ///  DMA enable
                DMAEN: u1,
                reserved19: u1,
                ///  No divider
                NODIV: u1,
                ///  Master clock divider
                MCJDIV: u4,
                reserved26: u2,
                ///  OSR
                OSR: u1,
                padding: u5,
            }),
            ///  AConfiguration register 2
            ACR2: mmio.Mmio(packed struct(u32) {
                ///  FIFO threshold
                FTH: u3,
                ///  FIFO flush
                FFLUS: u1,
                ///  Tristate management on data line
                TRIS: u1,
                ///  Mute
                MUTE: u1,
                ///  Mute value
                MUTEVAL: u1,
                ///  Mute counter
                MUTECN: u6,
                ///  Complement bit
                CPL: u1,
                ///  Companding mode
                COMP: u2,
                padding: u16,
            }),
            ///  AFRCR
            AFRCR: mmio.Mmio(packed struct(u32) {
                ///  Frame length
                FRL: u8,
                ///  Frame synchronization active level length
                FSALL: u7,
                reserved16: u1,
                ///  Frame synchronization definition
                FSDEF: u1,
                ///  Frame synchronization polarity
                FSPOL: u1,
                ///  Frame synchronization offset
                FSOFF: u1,
                padding: u13,
            }),
            ///  ASlot register
            ASLOTR: mmio.Mmio(packed struct(u32) {
                ///  First bit offset
                FBOFF: u5,
                reserved6: u1,
                ///  Slot size
                SLOTSZ: u2,
                ///  Number of slots in an audio frame
                NBSLOT: u4,
                reserved16: u4,
                ///  Slot enable
                SLOTEN: u16,
            }),
            ///  AInterrupt mask register2
            AIM: mmio.Mmio(packed struct(u32) {
                ///  Overrun/underrun interrupt enable
                OVRUDRIE: u1,
                ///  Mute detection interrupt enable
                MUTEDET: u1,
                ///  Wrong clock configuration interrupt enable
                WCKCFG: u1,
                ///  FIFO request interrupt enable
                FREQIE: u1,
                ///  Codec not ready interrupt enable
                CNRDYIE: u1,
                ///  Anticipated frame synchronization detection interrupt enable
                AFSDETIE: u1,
                ///  Late frame synchronization detection interrupt enable
                LFSDET: u1,
                padding: u25,
            }),
            ///  AStatus register
            ASR: mmio.Mmio(packed struct(u32) {
                ///  Overrun / underrun
                OVRUDR: u1,
                ///  Mute detection
                MUTEDET: u1,
                ///  Wrong clock configuration flag. This bit is read only
                WCKCFG: u1,
                ///  FIFO request
                FREQ: u1,
                ///  Codec not ready
                CNRDY: u1,
                ///  Anticipated frame synchronization detection
                AFSDET: u1,
                ///  Late frame synchronization detection
                LFSDET: u1,
                reserved16: u9,
                ///  FIFO level threshold
                FLVL: u3,
                padding: u13,
            }),
            ///  AClear flag register
            ACLRFR: mmio.Mmio(packed struct(u32) {
                ///  Clear overrun / underrun
                OVRUDR: u1,
                ///  Mute detection flag
                MUTEDET: u1,
                ///  Clear wrong clock configuration flag
                WCKCFG: u1,
                reserved4: u1,
                ///  Clear codec not ready flag
                CNRDY: u1,
                ///  Clear anticipated frame synchronization detection flag
                CAFSDET: u1,
                ///  Clear late frame synchronization detection flag
                LFSDET: u1,
                padding: u25,
            }),
            ///  AData register
            ADR: mmio.Mmio(packed struct(u32) {
                ///  Data
                DATA: u32,
            }),
            ///  BConfiguration register 1
            BCR1: mmio.Mmio(packed struct(u32) {
                ///  Audio block mode
                MODE: u2,
                ///  Protocol configuration
                PRTCFG: u2,
                reserved5: u1,
                ///  Data size
                DS: u3,
                ///  Least significant bit first
                LSBFIRST: u1,
                ///  Clock strobing edge
                CKSTR: u1,
                ///  Synchronization enable
                SYNCEN: u2,
                ///  Mono mode
                MONO: u1,
                ///  Output drive
                OutDri: u1,
                reserved16: u2,
                ///  Audio block B enable
                SAIBEN: u1,
                ///  DMA enable
                DMAEN: u1,
                reserved19: u1,
                ///  No divider
                NODIV: u1,
                ///  Master clock divider
                MCJDIV: u4,
                reserved26: u2,
                ///  Oversampling ratio for master clock
                OSR: u1,
                padding: u5,
            }),
            ///  BConfiguration register 2
            BCR2: mmio.Mmio(packed struct(u32) {
                ///  FIFO threshold
                FTH: u3,
                ///  FIFO flush
                FFLUS: u1,
                ///  Tristate management on data line
                TRIS: u1,
                ///  Mute
                MUTE: u1,
                ///  Mute value
                MUTEVAL: u1,
                ///  Mute counter
                MUTECN: u6,
                ///  Complement bit
                CPL: u1,
                ///  Companding mode
                COMP: u2,
                padding: u16,
            }),
            ///  BFRCR
            BFRCR: mmio.Mmio(packed struct(u32) {
                ///  Frame length
                FRL: u8,
                ///  Frame synchronization active level length
                FSALL: u7,
                reserved16: u1,
                ///  Frame synchronization definition
                FSDEF: u1,
                ///  Frame synchronization polarity
                FSPOL: u1,
                ///  Frame synchronization offset
                FSOFF: u1,
                padding: u13,
            }),
            ///  BSlot register
            BSLOTR: mmio.Mmio(packed struct(u32) {
                ///  First bit offset
                FBOFF: u5,
                reserved6: u1,
                ///  Slot size
                SLOTSZ: u2,
                ///  Number of slots in an audio frame
                NBSLOT: u4,
                reserved16: u4,
                ///  Slot enable
                SLOTEN: u16,
            }),
            ///  BInterrupt mask register2
            BIM: mmio.Mmio(packed struct(u32) {
                ///  Overrun/underrun interrupt enable
                OVRUDRIE: u1,
                ///  Mute detection interrupt enable
                MUTEDET: u1,
                ///  Wrong clock configuration interrupt enable
                WCKCFG: u1,
                ///  FIFO request interrupt enable
                FREQIE: u1,
                ///  Codec not ready interrupt enable
                CNRDYIE: u1,
                ///  Anticipated frame synchronization detection interrupt enable
                AFSDETIE: u1,
                ///  Late frame synchronization detection interrupt enable
                LFSDETIE: u1,
                padding: u25,
            }),
            ///  BStatus register
            BSR: mmio.Mmio(packed struct(u32) {
                ///  Overrun / underrun
                OVRUDR: u1,
                ///  Mute detection
                MUTEDET: u1,
                ///  Wrong clock configuration flag
                WCKCFG: u1,
                ///  FIFO request
                FREQ: u1,
                ///  Codec not ready
                CNRDY: u1,
                ///  Anticipated frame synchronization detection
                AFSDET: u1,
                ///  Late frame synchronization detection
                LFSDET: u1,
                reserved16: u9,
                ///  FIFO level threshold
                FLVL: u3,
                padding: u13,
            }),
            ///  BClear flag register
            BCLRFR: mmio.Mmio(packed struct(u32) {
                ///  Clear overrun / underrun
                OVRUDR: u1,
                ///  Mute detection flag
                MUTEDET: u1,
                ///  Clear wrong clock configuration flag
                WCKCFG: u1,
                reserved4: u1,
                ///  Clear codec not ready flag
                CNRDY: u1,
                ///  Clear anticipated frame synchronization detection flag
                CAFSDET: u1,
                ///  Clear late frame synchronization detection flag
                LFSDET: u1,
                padding: u25,
            }),
            ///  BData register
            BDR: mmio.Mmio(packed struct(u32) {
                ///  Data
                DATA: u32,
            }),
            ///  PDM control register
            PDMCR: mmio.Mmio(packed struct(u32) {
                ///  PDM enable
                PDMEN: u1,
                reserved4: u3,
                ///  MICNBR
                MICNBR: u2,
                reserved8: u2,
                ///  Clock enable of bitstream clock number 1
                CKEN1: u1,
                ///  CKEN2
                CKEN2: u1,
                padding: u22,
            }),
            ///  PDM delay register
            PDMDLY: mmio.Mmio(packed struct(u32) {
                ///  Delay line adjust for first microphone of pair 1
                DLYM1L: u3,
                reserved4: u1,
                ///  Delay line adjust for second microphone of pair 1
                DLYM1R: u3,
                reserved8: u1,
                ///  Delay line for first microphone of pair 2
                DLYM2L: u3,
                reserved12: u1,
                ///  Delay line for second microphone of pair 2
                DLYM2R: u3,
                reserved16: u1,
                ///  DLYM3L
                DLYM3L: u3,
                reserved20: u1,
                ///  DLYM3R
                DLYM3R: u3,
                reserved24: u1,
                ///  DLYM4L
                DLYM4L: u3,
                reserved28: u1,
                ///  DLYM4R
                DLYM4R: u3,
                padding: u1,
            }),
        };

        ///  USB Power Delivery interface
        pub const UCPD1 = extern struct {
            ///  UCPD configuration register
            CFG1: mmio.Mmio(packed struct(u32) {
                ///  HBITCLKDIV
                HBITCLKDIV: u6,
                ///  IFRGAP
                IFRGAP: u5,
                ///  TRANSWIN
                TRANSWIN: u5,
                reserved17: u1,
                ///  PSC_USBPDCLK
                PSC_USBPDCLK: u3,
                ///  RXORDSETEN
                RXORDSETEN: u9,
                ///  TXDMAEN
                TXDMAEN: u1,
                ///  RXDMAEN:
                RXDMAEN: u1,
                ///  UCPDEN
                UCPDEN: u1,
            }),
            ///  UCPD configuration register 2
            CFG2: mmio.Mmio(packed struct(u32) {
                ///  RXFILTDIS
                RXFILTDIS: u1,
                ///  RXFILT2N3
                RXFILT2N3: u1,
                ///  FORCECLK
                FORCECLK: u1,
                ///  WUPEN
                WUPEN: u1,
                padding: u28,
            }),
            ///  UCPD configuration register 3
            CFG3: mmio.Mmio(packed struct(u32) {
                ///  TRIM1_NG_CCRPD
                TRIM1_NG_CCRPD: u4,
                ///  TRIM1_NG_CC1A5
                TRIM1_NG_CC1A5: u5,
                ///  TRIM1_NG_CC3A0
                TRIM1_NG_CC3A0: u4,
                reserved16: u3,
                ///  TRIM2_NG_CCRPD
                TRIM2_NG_CCRPD: u4,
                ///  TRIM2_NG_CC1A5
                TRIM2_NG_CC1A5: u5,
                ///  TRIM2_NG_CC3A0
                TRIM2_NG_CC3A0: u4,
                padding: u3,
            }),
            ///  UCPD control register
            CR: mmio.Mmio(packed struct(u32) {
                ///  TXMODE
                TXMODE: u2,
                ///  TXSEND
                TXSEND: u1,
                ///  TXHRST
                TXHRST: u1,
                ///  RXMODE
                RXMODE: u1,
                ///  PHYRXEN
                PHYRXEN: u1,
                ///  PHYCCSEL
                PHYCCSEL: u1,
                ///  ANASUBMODE
                ANASUBMODE: u2,
                ///  ANAMODE
                ANAMODE: u1,
                ///  CCENABLE
                CCENABLE: u2,
                reserved16: u4,
                ///  FRSRXEN
                FRSRXEN: u1,
                ///  FRSTX
                FRSTX: u1,
                ///  RDCH
                RDCH: u1,
                reserved20: u1,
                ///  CC1TCDIS
                CC1TCDIS: u1,
                ///  CC2TCDIS
                CC2TCDIS: u1,
                padding: u10,
            }),
            ///  UCPD Interrupt Mask Register
            IMR: mmio.Mmio(packed struct(u32) {
                ///  TXISIE
                TXISIE: u1,
                ///  TXMSGDISCIE
                TXMSGDISCIE: u1,
                ///  TXMSGSENTIE
                TXMSGSENTIE: u1,
                ///  TXMSGABTIE
                TXMSGABTIE: u1,
                ///  HRSTDISCIE
                HRSTDISCIE: u1,
                ///  HRSTSENTIE
                HRSTSENTIE: u1,
                ///  TXUNDIE
                TXUNDIE: u1,
                reserved8: u1,
                ///  RXNEIE
                RXNEIE: u1,
                ///  RXORDDETIE
                RXORDDETIE: u1,
                ///  RXHRSTDETIE
                RXHRSTDETIE: u1,
                ///  RXOVRIE
                RXOVRIE: u1,
                ///  RXMSGENDIE
                RXMSGENDIE: u1,
                reserved14: u1,
                ///  TYPECEVT1IE
                TYPECEVT1IE: u1,
                ///  TYPECEVT2IE
                TYPECEVT2IE: u1,
                reserved20: u4,
                ///  FRSEVTIE
                FRSEVTIE: u1,
                padding: u11,
            }),
            ///  UCPD Status Register
            SR: mmio.Mmio(packed struct(u32) {
                ///  TXIS
                TXIS: u1,
                ///  TXMSGDISC
                TXMSGDISC: u1,
                ///  TXMSGSENT
                TXMSGSENT: u1,
                ///  TXMSGABT
                TXMSGABT: u1,
                ///  HRSTDISC
                HRSTDISC: u1,
                ///  HRSTSENT
                HRSTSENT: u1,
                ///  TXUND
                TXUND: u1,
                reserved8: u1,
                ///  RXNE
                RXNE: u1,
                ///  RXORDDET
                RXORDDET: u1,
                ///  RXHRSTDET
                RXHRSTDET: u1,
                ///  RXOVR
                RXOVR: u1,
                ///  RXMSGEND
                RXMSGEND: u1,
                ///  RXERR
                RXERR: u1,
                ///  TYPECEVT1
                TYPECEVT1: u1,
                ///  TYPECEVT2
                TYPECEVT2: u1,
                ///  TYPEC_VSTATE_CC1
                TYPEC_VSTATE_CC1: u2,
                ///  TYPEC_VSTATE_CC2
                TYPEC_VSTATE_CC2: u2,
                ///  FRSEVT
                FRSEVT: u1,
                padding: u11,
            }),
            ///  UCPD Interrupt Clear Register
            ICR: mmio.Mmio(packed struct(u32) {
                reserved1: u1,
                ///  TXMSGDISCCF
                TXMSGDISCCF: u1,
                ///  TXMSGSENTCF
                TXMSGSENTCF: u1,
                ///  TXMSGABTCF
                TXMSGABTCF: u1,
                ///  HRSTDISCCF
                HRSTDISCCF: u1,
                ///  HRSTSENTCF
                HRSTSENTCF: u1,
                ///  TXUNDCF
                TXUNDCF: u1,
                reserved9: u2,
                ///  RXORDDETCF
                RXORDDETCF: u1,
                ///  RXHRSTDETCF
                RXHRSTDETCF: u1,
                ///  RXOVRCF
                RXOVRCF: u1,
                ///  RXMSGENDCF
                RXMSGENDCF: u1,
                reserved14: u1,
                ///  TYPECEVT1CF
                TYPECEVT1CF: u1,
                ///  TYPECEVT2CF
                TYPECEVT2CF: u1,
                reserved20: u4,
                ///  FRSEVTCF
                FRSEVTCF: u1,
                padding: u11,
            }),
            ///  UCPD Tx Ordered Set Type Register
            TX_ORDSET: mmio.Mmio(packed struct(u32) {
                ///  TXORDSET
                TXORDSET: u20,
                padding: u12,
            }),
            ///  UCPD Tx Paysize Register
            TX_PAYSZ: mmio.Mmio(packed struct(u32) {
                ///  TXPAYSZ
                TXPAYSZ: u10,
                padding: u22,
            }),
            ///  UCPD Tx Data Register
            TXDR: mmio.Mmio(packed struct(u32) {
                ///  TXDATA
                TXDATA: u8,
                padding: u24,
            }),
            ///  UCPD Rx Ordered Set Register
            RX_ORDSET: mmio.Mmio(packed struct(u32) {
                ///  RXORDSET
                RXORDSET: u3,
                ///  RXSOP3OF4
                RXSOP3OF4: u1,
                ///  RXSOPKINVALID
                RXSOPKINVALID: u3,
                padding: u25,
            }),
            ///  UCPD Rx Paysize Register
            RX_PAYSZ: mmio.Mmio(packed struct(u32) {
                ///  RXPAYSZ
                RXPAYSZ: u10,
                padding: u22,
            }),
            ///  UCPD Receive Data Register
            RXDR: mmio.Mmio(packed struct(u32) {
                ///  RXDATA
                RXDATA: u8,
                padding: u24,
            }),
            ///  UCPD Rx Ordered Set Extension Register
            RX_ORDEXT1: mmio.Mmio(packed struct(u32) {
                ///  RXSOPX1
                RXSOPX1: u20,
                padding: u12,
            }),
            ///  UCPD Rx Ordered Set Extension Register
            RX_ORDEXT2: mmio.Mmio(packed struct(u32) {
                ///  RXSOPX2
                RXSOPX2: u20,
                padding: u12,
            }),
        };

        ///  General-purpose-timers
        pub const TIM6 = extern struct {
            ///  control register 1
            CR1: mmio.Mmio(packed struct(u32) {
                ///  Counter enable
                CEN: u1,
                ///  Update disable
                UDIS: u1,
                ///  Update request source
                URS: u1,
                ///  One-pulse mode
                OPM: u1,
                reserved7: u3,
                ///  Auto-reload preload enable
                ARPE: u1,
                reserved11: u3,
                ///  UIF status bit remapping
                UIFREMA: u1,
                padding: u20,
            }),
            ///  control register 2
            CR2: mmio.Mmio(packed struct(u32) {
                reserved4: u4,
                ///  Master mode selection
                MMS: u3,
                padding: u25,
            }),
            reserved12: [4]u8,
            ///  DMA/Interrupt enable register
            DIER: mmio.Mmio(packed struct(u32) {
                ///  Update interrupt enable
                UIE: u1,
                reserved8: u7,
                ///  Update DMA request enable
                UDE: u1,
                padding: u23,
            }),
            ///  status register
            SR: mmio.Mmio(packed struct(u32) {
                ///  Update interrupt flag
                UIF: u1,
                padding: u31,
            }),
            ///  event generation register
            EGR: mmio.Mmio(packed struct(u32) {
                ///  Update generation
                UG: u1,
                padding: u31,
            }),
            reserved36: [12]u8,
            ///  counter
            CNT: mmio.Mmio(packed struct(u32) {
                ///  CNT
                CNT_bit0: u16,
                reserved31: u15,
                ///  UIFCPY or Res
                UIFCPY: u1,
            }),
            ///  prescaler
            PSC: mmio.Mmio(packed struct(u32) {
                ///  Prescaler value
                PSC: u16,
                padding: u16,
            }),
            ///  auto-reload register
            ARR: mmio.Mmio(packed struct(u32) {
                ///  ARR_bit0
                ARR_bit0: u16,
                padding: u16,
            }),
        };

        ///  Touch sensing controller
        pub const TSC = extern struct {
            ///  control register
            CR: mmio.Mmio(packed struct(u32) {
                ///  Touch sensing controller enable
                TSCE: u1,
                ///  Start a new acquisition
                START: u1,
                ///  Acquisition mode
                AM: u1,
                ///  Synchronization pin polarity
                SYNCPOL: u1,
                ///  I/O Default mode
                IODEF: u1,
                ///  Max count value
                MCV: u3,
                reserved12: u4,
                ///  pulse generator prescaler
                PGPSC: u3,
                ///  Spread spectrum prescaler
                SSPSC: u1,
                ///  Spread spectrum enable
                SSE: u1,
                ///  Spread spectrum deviation
                SSD: u7,
                ///  Charge transfer pulse low
                CTPL: u4,
                ///  Charge transfer pulse high
                CTPH: u4,
            }),
            ///  interrupt enable register
            IER: mmio.Mmio(packed struct(u32) {
                ///  End of acquisition interrupt enable
                EOAIE: u1,
                ///  Max count error interrupt enable
                MCEIE: u1,
                padding: u30,
            }),
            ///  interrupt clear register
            ICR: mmio.Mmio(packed struct(u32) {
                ///  End of acquisition interrupt clear
                EOAIC: u1,
                ///  Max count error interrupt clear
                MCEIC: u1,
                padding: u30,
            }),
            ///  interrupt status register
            ISR: mmio.Mmio(packed struct(u32) {
                ///  End of acquisition flag
                EOAF: u1,
                ///  Max count error flag
                MCEF: u1,
                padding: u30,
            }),
            ///  I/O hysteresis control register
            IOHCR: mmio.Mmio(packed struct(u32) {
                ///  G1_IO1
                G1_IO1: u1,
                ///  G1_IO2
                G1_IO2: u1,
                ///  G1_IO3
                G1_IO3: u1,
                ///  G1_IO4
                G1_IO4: u1,
                ///  G2_IO1
                G2_IO1: u1,
                ///  G2_IO2
                G2_IO2: u1,
                ///  G2_IO3
                G2_IO3: u1,
                ///  G2_IO4
                G2_IO4: u1,
                ///  G3_IO1
                G3_IO1: u1,
                ///  G3_IO2
                G3_IO2: u1,
                ///  G3_IO3
                G3_IO3: u1,
                ///  G3_IO4
                G3_IO4: u1,
                ///  G4_IO1
                G4_IO1: u1,
                ///  G4_IO2
                G4_IO2: u1,
                ///  G4_IO3
                G4_IO3: u1,
                ///  G4_IO4
                G4_IO4: u1,
                ///  G5_IO1
                G5_IO1: u1,
                ///  G5_IO2
                G5_IO2: u1,
                ///  G5_IO3
                G5_IO3: u1,
                ///  G5_IO4
                G5_IO4: u1,
                ///  G6_IO1
                G6_IO1: u1,
                ///  G6_IO2
                G6_IO2: u1,
                ///  G6_IO3
                G6_IO3: u1,
                ///  G6_IO4
                G6_IO4: u1,
                ///  G7_IO1
                G7_IO1: u1,
                ///  G7_IO2
                G7_IO2: u1,
                ///  G7_IO3
                G7_IO3: u1,
                ///  G7_IO4
                G7_IO4: u1,
                ///  G8_IO1
                G8_IO1: u1,
                ///  G8_IO2
                G8_IO2: u1,
                ///  G8_IO3
                G8_IO3: u1,
                ///  G8_IO4
                G8_IO4: u1,
            }),
            reserved24: [4]u8,
            ///  I/O analog switch control register
            IOASCR: mmio.Mmio(packed struct(u32) {
                ///  G1_IO1
                G1_IO1: u1,
                ///  G1_IO2
                G1_IO2: u1,
                ///  G1_IO3
                G1_IO3: u1,
                ///  G1_IO4
                G1_IO4: u1,
                ///  G2_IO1
                G2_IO1: u1,
                ///  G2_IO2
                G2_IO2: u1,
                ///  G2_IO3
                G2_IO3: u1,
                ///  G2_IO4
                G2_IO4: u1,
                ///  G3_IO1
                G3_IO1: u1,
                ///  G3_IO2
                G3_IO2: u1,
                ///  G3_IO3
                G3_IO3: u1,
                ///  G3_IO4
                G3_IO4: u1,
                ///  G4_IO1
                G4_IO1: u1,
                ///  G4_IO2
                G4_IO2: u1,
                ///  G4_IO3
                G4_IO3: u1,
                ///  G4_IO4
                G4_IO4: u1,
                ///  G5_IO1
                G5_IO1: u1,
                ///  G5_IO2
                G5_IO2: u1,
                ///  G5_IO3
                G5_IO3: u1,
                ///  G5_IO4
                G5_IO4: u1,
                ///  G6_IO1
                G6_IO1: u1,
                ///  G6_IO2
                G6_IO2: u1,
                ///  G6_IO3
                G6_IO3: u1,
                ///  G6_IO4
                G6_IO4: u1,
                ///  G7_IO1
                G7_IO1: u1,
                ///  G7_IO2
                G7_IO2: u1,
                ///  G7_IO3
                G7_IO3: u1,
                ///  G7_IO4
                G7_IO4: u1,
                ///  G8_IO1
                G8_IO1: u1,
                ///  G8_IO2
                G8_IO2: u1,
                ///  G8_IO3
                G8_IO3: u1,
                ///  G8_IO4
                G8_IO4: u1,
            }),
            reserved32: [4]u8,
            ///  I/O sampling control register
            IOSCR: mmio.Mmio(packed struct(u32) {
                ///  G1_IO1
                G1_IO1: u1,
                ///  G1_IO2
                G1_IO2: u1,
                ///  G1_IO3
                G1_IO3: u1,
                ///  G1_IO4
                G1_IO4: u1,
                ///  G2_IO1
                G2_IO1: u1,
                ///  G2_IO2
                G2_IO2: u1,
                ///  G2_IO3
                G2_IO3: u1,
                ///  G2_IO4
                G2_IO4: u1,
                ///  G3_IO1
                G3_IO1: u1,
                ///  G3_IO2
                G3_IO2: u1,
                ///  G3_IO3
                G3_IO3: u1,
                ///  G3_IO4
                G3_IO4: u1,
                ///  G4_IO1
                G4_IO1: u1,
                ///  G4_IO2
                G4_IO2: u1,
                ///  G4_IO3
                G4_IO3: u1,
                ///  G4_IO4
                G4_IO4: u1,
                ///  G5_IO1
                G5_IO1: u1,
                ///  G5_IO2
                G5_IO2: u1,
                ///  G5_IO3
                G5_IO3: u1,
                ///  G5_IO4
                G5_IO4: u1,
                ///  G6_IO1
                G6_IO1: u1,
                ///  G6_IO2
                G6_IO2: u1,
                ///  G6_IO3
                G6_IO3: u1,
                ///  G6_IO4
                G6_IO4: u1,
                ///  G7_IO1
                G7_IO1: u1,
                ///  G7_IO2
                G7_IO2: u1,
                ///  G7_IO3
                G7_IO3: u1,
                ///  G7_IO4
                G7_IO4: u1,
                ///  G8_IO1
                G8_IO1: u1,
                ///  G8_IO2
                G8_IO2: u1,
                ///  G8_IO3
                G8_IO3: u1,
                ///  G8_IO4
                G8_IO4: u1,
            }),
            reserved40: [4]u8,
            ///  I/O channel control register
            IOCCR: mmio.Mmio(packed struct(u32) {
                ///  G1_IO1
                G1_IO1: u1,
                ///  G1_IO2
                G1_IO2: u1,
                ///  G1_IO3
                G1_IO3: u1,
                ///  G1_IO4
                G1_IO4: u1,
                ///  G2_IO1
                G2_IO1: u1,
                ///  G2_IO2
                G2_IO2: u1,
                ///  G2_IO3
                G2_IO3: u1,
                ///  G2_IO4
                G2_IO4: u1,
                ///  G3_IO1
                G3_IO1: u1,
                ///  G3_IO2
                G3_IO2: u1,
                ///  G3_IO3
                G3_IO3: u1,
                ///  G3_IO4
                G3_IO4: u1,
                ///  G4_IO1
                G4_IO1: u1,
                ///  G4_IO2
                G4_IO2: u1,
                ///  G4_IO3
                G4_IO3: u1,
                ///  G4_IO4
                G4_IO4: u1,
                ///  G5_IO1
                G5_IO1: u1,
                ///  G5_IO2
                G5_IO2: u1,
                ///  G5_IO3
                G5_IO3: u1,
                ///  G5_IO4
                G5_IO4: u1,
                ///  G6_IO1
                G6_IO1: u1,
                ///  G6_IO2
                G6_IO2: u1,
                ///  G6_IO3
                G6_IO3: u1,
                ///  G6_IO4
                G6_IO4: u1,
                ///  G7_IO1
                G7_IO1: u1,
                ///  G7_IO2
                G7_IO2: u1,
                ///  G7_IO3
                G7_IO3: u1,
                ///  G7_IO4
                G7_IO4: u1,
                ///  G8_IO1
                G8_IO1: u1,
                ///  G8_IO2
                G8_IO2: u1,
                ///  G8_IO3
                G8_IO3: u1,
                ///  G8_IO4
                G8_IO4: u1,
            }),
            reserved48: [4]u8,
            ///  I/O group control status register
            IOGCSR: mmio.Mmio(packed struct(u32) {
                ///  Analog I/O group x enable
                G1E: u1,
                ///  Analog I/O group x enable
                G2E: u1,
                ///  Analog I/O group x enable
                G3E: u1,
                ///  Analog I/O group x enable
                G4E: u1,
                ///  Analog I/O group x enable
                G5E: u1,
                ///  Analog I/O group x enable
                G6E: u1,
                ///  Analog I/O group x enable
                G7E: u1,
                ///  Analog I/O group x enable
                G8E: u1,
                reserved16: u8,
                ///  Analog I/O group x status
                G1S: u1,
                ///  Analog I/O group x status
                G2S: u1,
                ///  Analog I/O group x status
                G3S: u1,
                ///  Analog I/O group x status
                G4S: u1,
                ///  Analog I/O group x status
                G5S: u1,
                ///  Analog I/O group x status
                G6S: u1,
                ///  Analog I/O group x status
                G7S: u1,
                ///  Analog I/O group x status
                G8S: u1,
                padding: u8,
            }),
            ///  I/O group x counter register
            IOG1CR: mmio.Mmio(packed struct(u32) {
                ///  Counter value
                CNT: u14,
                padding: u18,
            }),
            ///  I/O group x counter register
            IOG2CR: mmio.Mmio(packed struct(u32) {
                ///  Counter value
                CNT: u14,
                padding: u18,
            }),
            ///  I/O group x counter register
            IOG3CR: mmio.Mmio(packed struct(u32) {
                ///  Counter value
                CNT: u14,
                padding: u18,
            }),
            ///  I/O group x counter register
            IOG4CR: mmio.Mmio(packed struct(u32) {
                ///  Counter value
                CNT: u14,
                padding: u18,
            }),
            ///  I/O group x counter register
            IOG5CR: mmio.Mmio(packed struct(u32) {
                ///  Counter value
                CNT: u14,
                padding: u18,
            }),
            ///  I/O group x counter register
            IOG6CR: mmio.Mmio(packed struct(u32) {
                ///  Counter value
                CNT: u14,
                padding: u18,
            }),
            ///  I/O group x counter register
            IOG7CR: mmio.Mmio(packed struct(u32) {
                ///  Counter value
                CNT: u14,
                padding: u18,
            }),
            ///  I/O group x counter register
            IOG8CR: mmio.Mmio(packed struct(u32) {
                ///  Counter value
                CNT: u14,
                padding: u18,
            }),
        };

        ///  Direct memory access controller
        pub const DMA1 = extern struct {
            ///  interrupt status register
            ISR: mmio.Mmio(packed struct(u32) {
                ///  Channel x global interrupt flag (x = 1 ..7)
                GIF1: u1,
                ///  Channel x transfer complete flag (x = 1 ..7)
                TCIF1: u1,
                ///  Channel x half transfer flag (x = 1 ..7)
                HTIF1: u1,
                ///  Channel x transfer error flag (x = 1 ..7)
                TEIF1: u1,
                ///  Channel x global interrupt flag (x = 1 ..7)
                GIF2: u1,
                ///  Channel x transfer complete flag (x = 1 ..7)
                TCIF2: u1,
                ///  Channel x half transfer flag (x = 1 ..7)
                HTIF2: u1,
                ///  Channel x transfer error flag (x = 1 ..7)
                TEIF2: u1,
                ///  Channel x global interrupt flag (x = 1 ..7)
                GIF3: u1,
                ///  Channel x transfer complete flag (x = 1 ..7)
                TCIF3: u1,
                ///  Channel x half transfer flag (x = 1 ..7)
                HTIF3: u1,
                ///  Channel x transfer error flag (x = 1 ..7)
                TEIF3: u1,
                ///  Channel x global interrupt flag (x = 1 ..7)
                GIF4: u1,
                ///  Channel x transfer complete flag (x = 1 ..7)
                TCIF4: u1,
                ///  Channel x half transfer flag (x = 1 ..7)
                HTIF4: u1,
                ///  Channel x transfer error flag (x = 1 ..7)
                TEIF4: u1,
                ///  Channel x global interrupt flag (x = 1 ..7)
                GIF5: u1,
                ///  Channel x transfer complete flag (x = 1 ..7)
                TCIF5: u1,
                ///  Channel x half transfer flag (x = 1 ..7)
                HTIF5: u1,
                ///  Channel x transfer error flag (x = 1 ..7)
                TEIF5: u1,
                ///  Channel x global interrupt flag (x = 1 ..7)
                GIF6: u1,
                ///  Channel x transfer complete flag (x = 1 ..7)
                TCIF6: u1,
                ///  Channel x half transfer flag (x = 1 ..7)
                HTIF6: u1,
                ///  Channel x transfer error flag (x = 1 ..7)
                TEIF6: u1,
                ///  Channel x global interrupt flag (x = 1 ..7)
                GIF7: u1,
                ///  Channel x transfer complete flag (x = 1 ..7)
                TCIF7: u1,
                ///  Channel x half transfer flag (x = 1 ..7)
                HTIF7: u1,
                ///  Channel x transfer error flag (x = 1 ..7)
                TEIF7: u1,
                ///  global interrupt flag for channel 8
                GIF8: u1,
                ///  transfer complete (TC) flag for channel 8
                TCIF8: u1,
                ///  half transfer (HT) flag for channel 8
                HTIF8: u1,
                ///  transfer error (TE) flag for channel 8
                TEIF8: u1,
            }),
            ///  interrupt flag clear register
            IFCR: mmio.Mmio(packed struct(u32) {
                ///  Channel x global interrupt clear (x = 1 ..7)
                CGIF1: u1,
                ///  Channel x transfer complete clear (x = 1 ..7)
                CTCIF1: u1,
                ///  Channel x half transfer clear (x = 1 ..7)
                CHTIF1: u1,
                ///  Channel x transfer error clear (x = 1 ..7)
                CTEIF1: u1,
                ///  Channel x global interrupt clear (x = 1 ..7)
                CGIF2: u1,
                ///  Channel x transfer complete clear (x = 1 ..7)
                CTCIF2: u1,
                ///  Channel x half transfer clear (x = 1 ..7)
                CHTIF2: u1,
                ///  Channel x transfer error clear (x = 1 ..7)
                CTEIF2: u1,
                ///  Channel x global interrupt clear (x = 1 ..7)
                CGIF3: u1,
                ///  Channel x transfer complete clear (x = 1 ..7)
                CTCIF3: u1,
                ///  Channel x half transfer clear (x = 1 ..7)
                CHTIF3: u1,
                ///  Channel x transfer error clear (x = 1 ..7)
                CTEIF3: u1,
                ///  Channel x global interrupt clear (x = 1 ..7)
                CGIF4: u1,
                ///  Channel x transfer complete clear (x = 1 ..7)
                CTCIF4: u1,
                ///  Channel x half transfer clear (x = 1 ..7)
                CHTIF4: u1,
                ///  Channel x transfer error clear (x = 1 ..7)
                CTEIF4: u1,
                ///  Channel x global interrupt clear (x = 1 ..7)
                CGIF5: u1,
                ///  Channel x transfer complete clear (x = 1 ..7)
                CTCIF5: u1,
                ///  Channel x half transfer clear (x = 1 ..7)
                CHTIF5: u1,
                ///  Channel x transfer error clear (x = 1 ..7)
                CTEIF5: u1,
                ///  Channel x global interrupt clear (x = 1 ..7)
                CGIF6: u1,
                ///  Channel x transfer complete clear (x = 1 ..7)
                CTCIF6: u1,
                ///  Channel x half transfer clear (x = 1 ..7)
                CHTIF6: u1,
                ///  Channel x transfer error clear (x = 1 ..7)
                CTEIF6: u1,
                ///  Channel x global interrupt clear (x = 1 ..7)
                CGIF7: u1,
                ///  Channel x transfer complete clear (x = 1 ..7)
                CTCIF7: u1,
                ///  Channel x half transfer clear (x = 1 ..7)
                CHTIF7: u1,
                ///  Channel x transfer error clear (x = 1 ..7)
                CTEIF7: u1,
                ///  global interrupt flag clear for channel 8
                CGIF8: u1,
                ///  transfer complete flag clear for channel 8
                CTCIF8: u1,
                ///  half transfer flag clear for channel 8
                CHTIF8: u1,
                ///  transfer error flag clear for channel 8
                CTEIF8: u1,
            }),
            ///  channel x configuration register
            CCR1: mmio.Mmio(packed struct(u32) {
                ///  Channel enable
                EN: u1,
                ///  Transfer complete interrupt enable
                TCIE: u1,
                ///  Half transfer interrupt enable
                HTIE: u1,
                ///  Transfer error interrupt enable
                TEIE: u1,
                ///  Data transfer direction
                DIR: u1,
                ///  Circular mode
                CIRC: u1,
                ///  Peripheral increment mode
                PINC: u1,
                ///  Memory increment mode
                MINC: u1,
                ///  Peripheral size
                PSIZE: u2,
                ///  Memory size
                MSIZE: u2,
                ///  Channel priority level
                PL: u2,
                ///  Memory to memory mode
                MEM2MEM: u1,
                ///  double-buffer mode
                DBM: u1,
                ///  current target memory of DMA transfer in double-buffer mode
                CT: u1,
                ///  secure mode
                SECM: u1,
                ///  security of the DMA transfer from the source
                SSEC: u1,
                ///  security of the DMA transfer to the destination
                DSEC: u1,
                ///  privileged mode
                PRIV: u1,
                padding: u11,
            }),
            ///  channel x number of data register
            CNDTR1: mmio.Mmio(packed struct(u32) {
                ///  Number of data to transfer
                NDT: u18,
                padding: u14,
            }),
            ///  channel x peripheral address register
            CPAR1: mmio.Mmio(packed struct(u32) {
                ///  Peripheral address
                PA: u32,
            }),
            ///  channel x memory address register
            CM0AR1: mmio.Mmio(packed struct(u32) {
                ///  Memory address
                MA: u32,
            }),
            ///  channel x memory address register
            CM1AR1: mmio.Mmio(packed struct(u32) {
                ///  peripheral address
                MA: u32,
            }),
            ///  channel x configuration register
            CCR2: mmio.Mmio(packed struct(u32) {
                ///  Channel enable
                EN: u1,
                ///  Transfer complete interrupt enable
                TCIE: u1,
                ///  Half transfer interrupt enable
                HTIE: u1,
                ///  Transfer error interrupt enable
                TEIE: u1,
                ///  Data transfer direction
                DIR: u1,
                ///  Circular mode
                CIRC: u1,
                ///  Peripheral increment mode
                PINC: u1,
                ///  Memory increment mode
                MINC: u1,
                ///  Peripheral size
                PSIZE: u2,
                ///  Memory size
                MSIZE: u2,
                ///  Channel priority level
                PL: u2,
                ///  Memory to memory mode
                MEM2MEM: u1,
                ///  double-buffer mode
                DBM: u1,
                ///  current target memory of DMA transfer in double-buffer mode
                CT: u1,
                ///  secure mode
                SECM: u1,
                ///  security of the DMA transfer from the source
                SSEC: u1,
                ///  security of the DMA transfer to the destination
                DSEC: u1,
                ///  privileged mode
                PRIV: u1,
                padding: u11,
            }),
            ///  channel x number of data register
            CNDTR2: mmio.Mmio(packed struct(u32) {
                ///  Number of data to transfer
                NDT: u18,
                padding: u14,
            }),
            ///  channel x peripheral address register
            CPAR2: mmio.Mmio(packed struct(u32) {
                ///  Peripheral address
                PA: u32,
            }),
            ///  channel x memory address register
            CM0AR2: mmio.Mmio(packed struct(u32) {
                ///  Memory address
                MA: u32,
            }),
            ///  channel x memory address register
            CM1AR2: mmio.Mmio(packed struct(u32) {
                ///  peripheral address
                MA: u32,
            }),
            ///  channel x configuration register
            CCR3: mmio.Mmio(packed struct(u32) {
                ///  Channel enable
                EN: u1,
                ///  Transfer complete interrupt enable
                TCIE: u1,
                ///  Half transfer interrupt enable
                HTIE: u1,
                ///  Transfer error interrupt enable
                TEIE: u1,
                ///  Data transfer direction
                DIR: u1,
                ///  Circular mode
                CIRC: u1,
                ///  Peripheral increment mode
                PINC: u1,
                ///  Memory increment mode
                MINC: u1,
                ///  Peripheral size
                PSIZE: u2,
                ///  Memory size
                MSIZE: u2,
                ///  Channel priority level
                PL: u2,
                ///  Memory to memory mode
                MEM2MEM: u1,
                ///  double-buffer mode
                DBM: u1,
                ///  current target memory of DMA transfer in double-buffer mode
                CT: u1,
                ///  secure mode
                SECM: u1,
                ///  security of the DMA transfer from the source
                SSEC: u1,
                ///  security of the DMA transfer to the destination
                DSEC: u1,
                ///  privileged mode
                PRIV: u1,
                padding: u11,
            }),
            ///  channel x number of data register
            CNDTR3: mmio.Mmio(packed struct(u32) {
                ///  Number of data to transfer
                NDT: u18,
                padding: u14,
            }),
            ///  channel x peripheral address register
            CPAR3: mmio.Mmio(packed struct(u32) {
                ///  Peripheral address
                PA: u32,
            }),
            ///  channel x memory address register
            CM0AR3: mmio.Mmio(packed struct(u32) {
                ///  Memory address
                MA: u32,
            }),
            ///  channel x memory address register
            CM1AR3: mmio.Mmio(packed struct(u32) {
                ///  peripheral address
                MA: u32,
            }),
            ///  channel x configuration register
            CCR4: mmio.Mmio(packed struct(u32) {
                ///  Channel enable
                EN: u1,
                ///  Transfer complete interrupt enable
                TCIE: u1,
                ///  Half transfer interrupt enable
                HTIE: u1,
                ///  Transfer error interrupt enable
                TEIE: u1,
                ///  Data transfer direction
                DIR: u1,
                ///  Circular mode
                CIRC: u1,
                ///  Peripheral increment mode
                PINC: u1,
                ///  Memory increment mode
                MINC: u1,
                ///  Peripheral size
                PSIZE: u2,
                ///  Memory size
                MSIZE: u2,
                ///  Channel priority level
                PL: u2,
                ///  Memory to memory mode
                MEM2MEM: u1,
                ///  double-buffer mode
                DBM: u1,
                ///  current target memory of DMA transfer in double-buffer mode
                CT: u1,
                ///  secure mode
                SECM: u1,
                ///  security of the DMA transfer from the source
                SSEC: u1,
                ///  security of the DMA transfer to the destination
                DSEC: u1,
                ///  privileged mode
                PRIV: u1,
                padding: u11,
            }),
            ///  channel x number of data register
            CNDTR4: mmio.Mmio(packed struct(u32) {
                ///  Number of data to transfer
                NDT: u18,
                padding: u14,
            }),
            ///  channel x peripheral address register
            CPAR4: mmio.Mmio(packed struct(u32) {
                ///  Peripheral address
                PA: u32,
            }),
            ///  channel x memory address register
            CM0AR4: mmio.Mmio(packed struct(u32) {
                ///  Memory address
                MA: u32,
            }),
            ///  channel x memory address register
            CM1AR4: mmio.Mmio(packed struct(u32) {
                ///  Memory address
                MA: u32,
            }),
            ///  channel x configuration register
            CCR5: mmio.Mmio(packed struct(u32) {
                ///  Channel enable
                EN: u1,
                ///  Transfer complete interrupt enable
                TCIE: u1,
                ///  Half transfer interrupt enable
                HTIE: u1,
                ///  Transfer error interrupt enable
                TEIE: u1,
                ///  Data transfer direction
                DIR: u1,
                ///  Circular mode
                CIRC: u1,
                ///  Peripheral increment mode
                PINC: u1,
                ///  Memory increment mode
                MINC: u1,
                ///  Peripheral size
                PSIZE: u2,
                ///  Memory size
                MSIZE: u2,
                ///  Channel priority level
                PL: u2,
                ///  Memory to memory mode
                MEM2MEM: u1,
                ///  double-buffer mode
                DBM: u1,
                ///  current target memory of DMA transfer in double-buffer mode
                CT: u1,
                ///  secure mode
                SECM: u1,
                ///  security of the DMA transfer from the source
                SSEC: u1,
                ///  security of the DMA transfer to the destination
                DSEC: u1,
                ///  privileged mode
                PRIV: u1,
                padding: u11,
            }),
            ///  channel x number of data register
            CNDTR5: mmio.Mmio(packed struct(u32) {
                ///  Number of data to transfer
                NDT: u18,
                padding: u14,
            }),
            ///  channel x peripheral address register
            CPAR5: mmio.Mmio(packed struct(u32) {
                ///  Peripheral address
                PA: u32,
            }),
            ///  channel x memory address register
            CM0AR5: mmio.Mmio(packed struct(u32) {
                ///  Memory address
                MA: u32,
            }),
            ///  channel x memory address register
            CM1AR5: mmio.Mmio(packed struct(u32) {
                ///  peripheral address
                MA: u32,
            }),
            ///  channel x configuration register
            CCR6: mmio.Mmio(packed struct(u32) {
                ///  Channel enable
                EN: u1,
                ///  Transfer complete interrupt enable
                TCIE: u1,
                ///  Half transfer interrupt enable
                HTIE: u1,
                ///  Transfer error interrupt enable
                TEIE: u1,
                ///  Data transfer direction
                DIR: u1,
                ///  Circular mode
                CIRC: u1,
                ///  Peripheral increment mode
                PINC: u1,
                ///  Memory increment mode
                MINC: u1,
                ///  Peripheral size
                PSIZE: u2,
                ///  Memory size
                MSIZE: u2,
                ///  Channel priority level
                PL: u2,
                ///  Memory to memory mode
                MEM2MEM: u1,
                ///  double-buffer mode
                DBM: u1,
                ///  current target memory of DMA transfer in double-buffer mode
                CT: u1,
                ///  secure mode
                SECM: u1,
                ///  security of the DMA transfer from the source
                SSEC: u1,
                ///  security of the DMA transfer to the destination
                DSEC: u1,
                ///  privileged mode
                PRIV: u1,
                padding: u11,
            }),
            ///  channel x number of data register
            CNDTR6: mmio.Mmio(packed struct(u32) {
                ///  Number of data to transfer
                NDT: u18,
                padding: u14,
            }),
            ///  channel x peripheral address register
            CPAR6: mmio.Mmio(packed struct(u32) {
                ///  Peripheral address
                PA: u32,
            }),
            ///  channel x memory address register
            CM0AR6: mmio.Mmio(packed struct(u32) {
                ///  Memory address
                MA: u32,
            }),
            ///  channel x memory address register
            CM1AR6: mmio.Mmio(packed struct(u32) {
                ///  peripheral address
                MA: u32,
            }),
            ///  channel x configuration register
            CCR7: mmio.Mmio(packed struct(u32) {
                ///  Channel enable
                EN: u1,
                ///  Transfer complete interrupt enable
                TCIE: u1,
                ///  Half transfer interrupt enable
                HTIE: u1,
                ///  Transfer error interrupt enable
                TEIE: u1,
                ///  Data transfer direction
                DIR: u1,
                ///  Circular mode
                CIRC: u1,
                ///  Peripheral increment mode
                PINC: u1,
                ///  Memory increment mode
                MINC: u1,
                ///  Peripheral size
                PSIZE: u2,
                ///  Memory size
                MSIZE: u2,
                ///  Channel priority level
                PL: u2,
                ///  Memory to memory mode
                MEM2MEM: u1,
                ///  double-buffer mode
                DBM: u1,
                ///  current target memory of DMA transfer in double-buffer mode
                CT: u1,
                ///  secure mode
                SECM: u1,
                ///  security of the DMA transfer from the source
                SSEC: u1,
                ///  security of the DMA transfer to the destination
                DSEC: u1,
                ///  privileged mode
                PRIV: u1,
                padding: u11,
            }),
            ///  channel x number of data register
            CNDTR7: mmio.Mmio(packed struct(u32) {
                ///  Number of data to transfer
                NDT: u18,
                padding: u14,
            }),
            ///  channel x peripheral address register
            CPAR7: mmio.Mmio(packed struct(u32) {
                ///  Peripheral address
                PA: u32,
            }),
            ///  channel x memory address register
            CM0AR7: mmio.Mmio(packed struct(u32) {
                ///  peripheral address
                MA: u32,
            }),
            ///  channel x memory address register
            CM1AR7: mmio.Mmio(packed struct(u32) {
                ///  peripheral address
                MA: u32,
            }),
            ///  channel x configuration register
            CCR8: mmio.Mmio(packed struct(u32) {
                ///  Channel enable
                EN: u1,
                ///  Transfer complete interrupt enable
                TCIE: u1,
                ///  Half transfer interrupt enable
                HTIE: u1,
                ///  Transfer error interrupt enable
                TEIE: u1,
                ///  Data transfer direction
                DIR: u1,
                ///  Circular mode
                CIRC: u1,
                ///  Peripheral increment mode
                PINC: u1,
                ///  Memory increment mode
                MINC: u1,
                ///  Peripheral size
                PSIZE: u2,
                ///  Memory size
                MSIZE: u2,
                ///  Channel priority level
                PL: u2,
                ///  Memory to memory mode
                MEM2MEM: u1,
                ///  double-buffer mode
                DBM: u1,
                ///  current target memory of DMA transfer in double-buffer mode
                CT: u1,
                ///  secure mode
                SECM: u1,
                ///  security of the DMA transfer from the source
                SSEC: u1,
                ///  security of the DMA transfer to the destination
                DSEC: u1,
                ///  privileged mode
                PRIV: u1,
                padding: u11,
            }),
            ///  channel x number of data register
            CNDTR8: mmio.Mmio(packed struct(u32) {
                ///  Number of data to transfer
                NDT: u18,
                padding: u14,
            }),
            ///  channel x peripheral address register
            CPAR8: mmio.Mmio(packed struct(u32) {
                ///  Peripheral address
                PA: u32,
            }),
            ///  channel x peripheral address register
            CM0AR8: mmio.Mmio(packed struct(u32) {
                ///  Memory address
                MA: u32,
            }),
            ///  channel x peripheral address register
            CM1AR8: mmio.Mmio(packed struct(u32) {
                ///  peripheral address
                MA: u32,
            }),
            ///  channel selection register
            CSELR: mmio.Mmio(packed struct(u32) {
                ///  peripheral address
                MA: u32,
            }),
        };

        ///  On-The-Fly Decryption engine
        pub const OTFDEC1 = extern struct {
            ///  OTFDEC control register
            CR: mmio.Mmio(packed struct(u32) {
                ///  Encryption mode bit
                ENC: u1,
                padding: u31,
            }),
            reserved32: [28]u8,
            ///  OTFDEC region x configuration register
            R1CFGR: mmio.Mmio(packed struct(u32) {
                ///  region on-the-fly decryption enable
                REG_EN: u1,
                ///  region config lock
                CONFIGLOCK: u1,
                ///  region key lock
                KEYLOCK: u1,
                reserved4: u1,
                ///  operating mode
                MODE: u2,
                reserved8: u2,
                ///  region key 8-bit CRC
                KEYCRC: u8,
                ///  region firmware version
                REGx_VERSION: u16,
            }),
            ///  OTFDEC region x start address register
            R1STARTADDR: mmio.Mmio(packed struct(u32) {
                ///  Region AXI start address
                REGx_START_ADDR: u32,
            }),
            ///  OTFDEC region x end address register
            R1ENDADDR: mmio.Mmio(packed struct(u32) {
                ///  Region AXI end address
                REGx_END_ADDR: u32,
            }),
            ///  OTFDEC region x nonce register 0
            R1NONCER0: mmio.Mmio(packed struct(u32) {
                ///  REGx_NONCE
                REGx_NONCE: u32,
            }),
            ///  OTFDEC region x nonce register 1
            R1NONCER1: mmio.Mmio(packed struct(u32) {
                ///  Region nonce
                REGx_NONCE: u32,
            }),
            ///  OTFDEC region x key register 0
            R1KEYR0: mmio.Mmio(packed struct(u32) {
                ///  REGx_KEY
                REGx_KEY: u32,
            }),
            ///  OTFDEC region x key register 1
            R1KEYR1: mmio.Mmio(packed struct(u32) {
                ///  REGx_KEY
                REGx_KEY: u32,
            }),
            ///  OTFDEC region x key register 2
            R1KEYR2: mmio.Mmio(packed struct(u32) {
                ///  REGx_KEY
                REGx_KEY: u32,
            }),
            ///  OTFDEC region x key register 3
            R1KEYR3: mmio.Mmio(packed struct(u32) {
                ///  REGx_KEY
                REGx_KEY: u32,
            }),
            reserved80: [12]u8,
            ///  OTFDEC region x configuration register
            R2CFGR: mmio.Mmio(packed struct(u32) {
                ///  region on-the-fly decryption enable
                REG_EN: u1,
                ///  region config lock
                CONFIGLOCK: u1,
                ///  region key lock
                KEYLOCK: u1,
                reserved4: u1,
                ///  operating mode
                MODE: u2,
                reserved8: u2,
                ///  region key 8-bit CRC
                KEYCRC: u8,
                ///  region firmware version
                REGx_VERSION: u16,
            }),
            ///  OTFDEC region x start address register
            R2STARTADDR: mmio.Mmio(packed struct(u32) {
                ///  Region AXI start address
                REGx_START_ADDR: u32,
            }),
            ///  OTFDEC region x end address register
            R2ENDADDR: mmio.Mmio(packed struct(u32) {
                ///  Region AXI end address
                REGx_END_ADDR: u32,
            }),
            ///  OTFDEC region x nonce register 0
            R2NONCER0: mmio.Mmio(packed struct(u32) {
                ///  REGx_NONCE
                REGx_NONCE: u32,
            }),
            ///  OTFDEC region x nonce register 1
            R2NONCER1: mmio.Mmio(packed struct(u32) {
                ///  Region nonce, bits [63:32]REGx_NONCE[63:32]
                REGx_NONCE: u32,
            }),
            ///  OTFDEC region x key register 0
            R2KEYR0: mmio.Mmio(packed struct(u32) {
                ///  REGx_KEY
                REGx_KEY: u32,
            }),
            ///  OTFDEC region x key register 1
            R2KEYR1: mmio.Mmio(packed struct(u32) {
                ///  REGx_KEY
                REGx_KEY: u32,
            }),
            ///  OTFDEC region x key register 2
            R2KEYR2: mmio.Mmio(packed struct(u32) {
                ///  REGx_KEY
                REGx_KEY_: u32,
            }),
            ///  OTFDEC region x key register 3
            R2KEYR3: mmio.Mmio(packed struct(u32) {
                ///  REGx_KEY
                REGx_KEY: u32,
            }),
            reserved128: [12]u8,
            ///  OTFDEC region x configuration register
            R3CFGR: mmio.Mmio(packed struct(u32) {
                ///  region on-the-fly decryption enable
                REG_EN: u1,
                ///  region config lock
                CONFIGLOCK: u1,
                ///  region key lock
                KEYLOCK: u1,
                reserved4: u1,
                ///  operating mode
                MODE: u2,
                reserved8: u2,
                ///  region key 8-bit CRC
                KEYCRC: u8,
                ///  region firmware version
                REGx_VERSION: u16,
            }),
            ///  OTFDEC region x start address register
            R3STARTADDR: mmio.Mmio(packed struct(u32) {
                ///  Region AXI start address
                REGx_START_ADDR: u32,
            }),
            ///  OTFDEC region x end address register
            R3ENDADDR: mmio.Mmio(packed struct(u32) {
                ///  Region AXI end address
                REGx_END_ADDR: u32,
            }),
            ///  OTFDEC region x nonce register 0
            R3NONCER0: mmio.Mmio(packed struct(u32) {
                ///  REGx_NONCE
                REGx_NONCE: u32,
            }),
            ///  OTFDEC region x nonce register 1
            R3NONCER1: mmio.Mmio(packed struct(u32) {
                ///  REGx_NONCE
                REGx_NONCE: u32,
            }),
            ///  OTFDEC region x key register 0
            R3KEYR0: mmio.Mmio(packed struct(u32) {
                ///  REGx_KEY
                REGx_KEY: u32,
            }),
            ///  OTFDEC region x key register 1
            R3KEYR1: mmio.Mmio(packed struct(u32) {
                ///  REGx_KEY
                REGx_KEY: u32,
            }),
            ///  OTFDEC region x key register 2
            R3KEYR2: mmio.Mmio(packed struct(u32) {
                ///  REGx_KEY
                REGx_KEY: u32,
            }),
            ///  OTFDEC region x key register 3
            R3KEYR3: mmio.Mmio(packed struct(u32) {
                ///  REGx_KEY
                REGx_KEY: u32,
            }),
            reserved176: [12]u8,
            ///  OTFDEC region x configuration register
            R4CFGR: mmio.Mmio(packed struct(u32) {
                ///  region on-the-fly decryption enable
                REG_EN: u1,
                ///  region config lock
                CONFIGLOCK: u1,
                ///  region key lock
                KEYLOCK: u1,
                reserved4: u1,
                ///  operating mode
                MODE: u2,
                reserved8: u2,
                ///  region key 8-bit CRC
                KEYCRC: u8,
                ///  region firmware version
                REGx_VERSION: u16,
            }),
            ///  OTFDEC region x start address register
            R4STARTADDR: mmio.Mmio(packed struct(u32) {
                ///  Region AXI start address
                REGx_START_ADDR: u32,
            }),
            ///  OTFDEC region x end address register
            R4ENDADDR: mmio.Mmio(packed struct(u32) {
                ///  Region AXI end address
                REGx_END_ADDR: u32,
            }),
            ///  OTFDEC region x nonce register 0
            R4NONCER0: mmio.Mmio(packed struct(u32) {
                ///  REGx_NONCE
                REGx_NONCE: u32,
            }),
            ///  OTFDEC region x nonce register 1
            R4NONCER1: mmio.Mmio(packed struct(u32) {
                ///  REGx_NONCE
                REGx_NONCE: u32,
            }),
            ///  OTFDEC region x key register 0
            R4KEYR0: mmio.Mmio(packed struct(u32) {
                ///  REGx_KEY
                REGx_KEY: u32,
            }),
            ///  OTFDEC region x key register 1
            R4KEYR1: mmio.Mmio(packed struct(u32) {
                ///  REGx_KEY
                REGx_KEY: u32,
            }),
            ///  OTFDEC region x key register 2
            R4KEYR2: mmio.Mmio(packed struct(u32) {
                ///  REGx_KEY
                REGx_KEY: u32,
            }),
            ///  OTFDEC region x key register 3
            R4KEYR3: mmio.Mmio(packed struct(u32) {
                ///  REGx_KEY
                REGx_KEY: u32,
            }),
            reserved768: [556]u8,
            ///  OTFDEC interrupt status register
            ISR: mmio.Mmio(packed struct(u32) {
                ///  Security Error Interrupt Flag status
                SEIF: u1,
                ///  Execute-only execute-Never Error Interrupt Flag status
                XONEIF: u1,
                ///  Key Error Interrupt Flag status
                KEIF: u1,
                padding: u29,
            }),
            ///  OTFDEC interrupt clear register
            ICR: mmio.Mmio(packed struct(u32) {
                ///  SEIF
                SEIF: u1,
                ///  Execute-only execute-Never Error Interrupt Flag clear
                XONEIF: u1,
                ///  KEIF
                KEIF: u1,
                padding: u29,
            }),
            ///  OTFDEC interrupt enable register
            IER: mmio.Mmio(packed struct(u32) {
                ///  Security Error Interrupt Enable
                SEIE: u1,
                ///  XONEIE
                XONEIE: u1,
                ///  KEIE
                KEIE: u1,
                padding: u29,
            }),
        };

        ///  Voltage reference buffer
        pub const VREFBUF = extern struct {
            ///  VREF control and status register
            CSR: mmio.Mmio(packed struct(u32) {
                ///  Voltage reference buffer enable
                ENVR: u1,
                ///  High impedance mode
                HIZ: u1,
                ///  Voltage reference scale
                VRS: u1,
                ///  Voltage reference buffer ready
                VRR: u1,
                padding: u28,
            }),
            ///  calibration control register
            CCR: mmio.Mmio(packed struct(u32) {
                ///  Trimming code
                TRIM: u6,
                padding: u26,
            }),
        };

        ///  General-purpose-timers
        pub const TIM7 = extern struct {
            ///  control register 1
            CR1: mmio.Mmio(packed struct(u32) {
                ///  Counter enable
                CEN: u1,
                ///  Update disable
                UDIS: u1,
                ///  Update request source
                URS: u1,
                ///  One-pulse mode
                OPM: u1,
                reserved7: u3,
                ///  Auto-reload preload enable
                ARPE: u1,
                reserved11: u3,
                ///  UIF status bit remapping
                UIFREMA: u1,
                padding: u20,
            }),
            ///  control register 2
            CR2: mmio.Mmio(packed struct(u32) {
                reserved4: u4,
                ///  Master mode selection
                MMS: u3,
                padding: u25,
            }),
            reserved12: [4]u8,
            ///  DMA/Interrupt enable register
            DIER: mmio.Mmio(packed struct(u32) {
                ///  Update interrupt enable
                UIE: u1,
                reserved8: u7,
                ///  Update DMA request enable
                UDE: u1,
                padding: u23,
            }),
            ///  status register
            SR: mmio.Mmio(packed struct(u32) {
                ///  Update interrupt flag
                UIF: u1,
                padding: u31,
            }),
            ///  event generation register
            EGR: mmio.Mmio(packed struct(u32) {
                ///  Update generation
                UG: u1,
                padding: u31,
            }),
            reserved36: [12]u8,
            ///  counter
            CNT: mmio.Mmio(packed struct(u32) {
                ///  CNT
                CNT_bit0: u16,
                reserved31: u15,
                ///  UIFCPY or Res
                UIFCPY: u1,
            }),
            ///  prescaler
            PSC: mmio.Mmio(packed struct(u32) {
                ///  Prescaler value
                PSC: u16,
                padding: u16,
            }),
            ///  auto-reload register
            ARR: mmio.Mmio(packed struct(u32) {
                ///  ARR_bit0
                ARR_bit0: u16,
                padding: u16,
            }),
        };

        ///  SEC_GTZC_MPCBB1
        pub const SEC_GTZC_MPCBB1 = extern struct {
            ///  MPCBB control register
            MPCBB1_CR: mmio.Mmio(packed struct(u32) {
                ///  LCK
                LCK: u1,
                reserved30: u29,
                ///  INVSECSTATE
                INVSECSTATE: u1,
                ///  SRWILADIS
                SRWILADIS: u1,
            }),
            reserved16: [12]u8,
            ///  MPCBB control register
            MPCBB1_LCKVTR1: mmio.Mmio(packed struct(u32) {
                ///  LCKSB0
                LCKSB0: u1,
                ///  LCKSB1
                LCKSB1: u1,
                ///  LCKSB2
                LCKSB2: u1,
                ///  LCKSB3
                LCKSB3: u1,
                ///  LCKSB4
                LCKSB4: u1,
                ///  LCKSB5
                LCKSB5: u1,
                ///  LCKSB6
                LCKSB6: u1,
                ///  LCKSB7
                LCKSB7: u1,
                ///  LCKSB8
                LCKSB8: u1,
                ///  LCKSB9
                LCKSB9: u1,
                ///  LCKSB10
                LCKSB10: u1,
                ///  LCKSB11
                LCKSB11: u1,
                ///  LCKSB12
                LCKSB12: u1,
                ///  LCKSB13
                LCKSB13: u1,
                ///  LCKSB14
                LCKSB14: u1,
                ///  LCKSB15
                LCKSB15: u1,
                ///  LCKSB16
                LCKSB16: u1,
                ///  LCKSB17
                LCKSB17: u1,
                ///  LCKSB18
                LCKSB18: u1,
                ///  LCKSB19
                LCKSB19: u1,
                ///  LCKSB20
                LCKSB20: u1,
                ///  LCKSB21
                LCKSB21: u1,
                ///  LCKSB22
                LCKSB22: u1,
                ///  LCKSB23
                LCKSB23: u1,
                ///  LCKSB24
                LCKSB24: u1,
                ///  LCKSB25
                LCKSB25: u1,
                ///  LCKSB26
                LCKSB26: u1,
                ///  LCKSB27
                LCKSB27: u1,
                ///  LCKSB28
                LCKSB28: u1,
                ///  LCKSB29
                LCKSB29: u1,
                ///  LCKSB30
                LCKSB30: u1,
                ///  LCKSB31
                LCKSB31: u1,
            }),
            ///  MPCBB control register
            MPCBB1_LCKVTR2: mmio.Mmio(packed struct(u32) {
                ///  LCKSB32
                LCKSB32: u1,
                ///  LCKSB33
                LCKSB33: u1,
                ///  LCKSB34
                LCKSB34: u1,
                ///  LCKSB35
                LCKSB35: u1,
                ///  LCKSB36
                LCKSB36: u1,
                ///  LCKSB37
                LCKSB37: u1,
                ///  LCKSB38
                LCKSB38: u1,
                ///  LCKSB39
                LCKSB39: u1,
                ///  LCKSB40
                LCKSB40: u1,
                ///  LCKSB41
                LCKSB41: u1,
                ///  LCKSB42
                LCKSB42: u1,
                ///  LCKSB43
                LCKSB43: u1,
                ///  LCKSB44
                LCKSB44: u1,
                ///  LCKSB45
                LCKSB45: u1,
                ///  LCKSB46
                LCKSB46: u1,
                ///  LCKSB47
                LCKSB47: u1,
                ///  LCKSB48
                LCKSB48: u1,
                ///  LCKSB49
                LCKSB49: u1,
                ///  LCKSB50
                LCKSB50: u1,
                ///  LCKSB51
                LCKSB51: u1,
                ///  LCKSB52
                LCKSB52: u1,
                ///  LCKSB53
                LCKSB53: u1,
                ///  LCKSB54
                LCKSB54: u1,
                ///  LCKSB55
                LCKSB55: u1,
                ///  LCKSB56
                LCKSB56: u1,
                ///  LCKSB57
                LCKSB57: u1,
                ///  LCKSB58
                LCKSB58: u1,
                ///  LCKSB59
                LCKSB59: u1,
                ///  LCKSB60
                LCKSB60: u1,
                ///  LCKSB61
                LCKSB61: u1,
                ///  LCKSB62
                LCKSB62: u1,
                ///  LCKSB63
                LCKSB63: u1,
            }),
            reserved256: [232]u8,
            ///  MPCBBx vector register
            MPCBB1_VCTR0: mmio.Mmio(packed struct(u32) {
                ///  B0
                B0: u1,
                ///  B1
                B1: u1,
                ///  B2
                B2: u1,
                ///  B3
                B3: u1,
                ///  B4
                B4: u1,
                ///  B5
                B5: u1,
                ///  B6
                B6: u1,
                ///  B7
                B7: u1,
                ///  B8
                B8: u1,
                ///  B9
                B9: u1,
                ///  B10
                B10: u1,
                ///  B11
                B11: u1,
                ///  B12
                B12: u1,
                ///  B13
                B13: u1,
                ///  B14
                B14: u1,
                ///  B15
                B15: u1,
                ///  B16
                B16: u1,
                ///  B17
                B17: u1,
                ///  B18
                B18: u1,
                ///  B19
                B19: u1,
                ///  B20
                B20: u1,
                ///  B21
                B21: u1,
                ///  B22
                B22: u1,
                ///  B23
                B23: u1,
                ///  B24
                B24: u1,
                ///  B25
                B25: u1,
                ///  B26
                B26: u1,
                ///  B27
                B27: u1,
                ///  B28
                B28: u1,
                ///  B29
                B29: u1,
                ///  B30
                B30: u1,
                ///  B31
                B31: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR1: mmio.Mmio(packed struct(u32) {
                ///  B32
                B32: u1,
                ///  B33
                B33: u1,
                ///  B34
                B34: u1,
                ///  B35
                B35: u1,
                ///  B36
                B36: u1,
                ///  B37
                B37: u1,
                ///  B38
                B38: u1,
                ///  B39
                B39: u1,
                ///  B40
                B40: u1,
                ///  B41
                B41: u1,
                ///  B42
                B42: u1,
                ///  B43
                B43: u1,
                ///  B44
                B44: u1,
                ///  B45
                B45: u1,
                ///  B46
                B46: u1,
                ///  B47
                B47: u1,
                ///  B48
                B48: u1,
                ///  B49
                B49: u1,
                ///  B50
                B50: u1,
                ///  B51
                B51: u1,
                ///  B52
                B52: u1,
                ///  B53
                B53: u1,
                ///  B54
                B54: u1,
                ///  B55
                B55: u1,
                ///  B56
                B56: u1,
                ///  B57
                B57: u1,
                ///  B58
                B58: u1,
                ///  B59
                B59: u1,
                ///  B60
                B60: u1,
                ///  B61
                B61: u1,
                ///  B62
                B62: u1,
                ///  B63
                B63: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR2: mmio.Mmio(packed struct(u32) {
                ///  B64
                B64: u1,
                ///  B65
                B65: u1,
                ///  B66
                B66: u1,
                ///  B67
                B67: u1,
                ///  B68
                B68: u1,
                ///  B69
                B69: u1,
                ///  B70
                B70: u1,
                ///  B71
                B71: u1,
                ///  B72
                B72: u1,
                ///  B73
                B73: u1,
                ///  B74
                B74: u1,
                ///  B75
                B75: u1,
                ///  B76
                B76: u1,
                ///  B77
                B77: u1,
                ///  B78
                B78: u1,
                ///  B79
                B79: u1,
                ///  B80
                B80: u1,
                ///  B81
                B81: u1,
                ///  B82
                B82: u1,
                ///  B83
                B83: u1,
                ///  B84
                B84: u1,
                ///  B85
                B85: u1,
                ///  B86
                B86: u1,
                ///  B87
                B87: u1,
                ///  B88
                B88: u1,
                ///  B89
                B89: u1,
                ///  B90
                B90: u1,
                ///  B91
                B91: u1,
                ///  B92
                B92: u1,
                ///  B93
                B93: u1,
                ///  B94
                B94: u1,
                ///  B95
                B95: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR3: mmio.Mmio(packed struct(u32) {
                ///  B96
                B96: u1,
                ///  B97
                B97: u1,
                ///  B98
                B98: u1,
                ///  B99
                B99: u1,
                ///  B100
                B100: u1,
                ///  B101
                B101: u1,
                ///  B102
                B102: u1,
                ///  B103
                B103: u1,
                ///  B104
                B104: u1,
                ///  B105
                B105: u1,
                ///  B106
                B106: u1,
                ///  B107
                B107: u1,
                ///  B108
                B108: u1,
                ///  B109
                B109: u1,
                ///  B110
                B110: u1,
                ///  B111
                B111: u1,
                ///  B112
                B112: u1,
                ///  B113
                B113: u1,
                ///  B114
                B114: u1,
                ///  B115
                B115: u1,
                ///  B116
                B116: u1,
                ///  B117
                B117: u1,
                ///  B118
                B118: u1,
                ///  B119
                B119: u1,
                ///  B120
                B120: u1,
                ///  B121
                B121: u1,
                ///  B122
                B122: u1,
                ///  B123
                B123: u1,
                ///  B124
                B124: u1,
                ///  B125
                B125: u1,
                ///  B126
                B126: u1,
                ///  B127
                B127: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR4: mmio.Mmio(packed struct(u32) {
                ///  B128
                B128: u1,
                ///  B129
                B129: u1,
                ///  B130
                B130: u1,
                ///  B131
                B131: u1,
                ///  B132
                B132: u1,
                ///  B133
                B133: u1,
                ///  B134
                B134: u1,
                ///  B135
                B135: u1,
                ///  B136
                B136: u1,
                ///  B137
                B137: u1,
                ///  B138
                B138: u1,
                ///  B139
                B139: u1,
                ///  B140
                B140: u1,
                ///  B141
                B141: u1,
                ///  B142
                B142: u1,
                ///  B143
                B143: u1,
                ///  B144
                B144: u1,
                ///  B145
                B145: u1,
                ///  B146
                B146: u1,
                ///  B147
                B147: u1,
                ///  B148
                B148: u1,
                ///  B149
                B149: u1,
                ///  B150
                B150: u1,
                ///  B151
                B151: u1,
                ///  B152
                B152: u1,
                ///  B153
                B153: u1,
                ///  B154
                B154: u1,
                ///  B155
                B155: u1,
                ///  B156
                B156: u1,
                ///  B157
                B157: u1,
                ///  B158
                B158: u1,
                ///  B159
                B159: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR5: mmio.Mmio(packed struct(u32) {
                ///  B160
                B160: u1,
                ///  B161
                B161: u1,
                ///  B162
                B162: u1,
                ///  B163
                B163: u1,
                ///  B164
                B164: u1,
                ///  B165
                B165: u1,
                ///  B166
                B166: u1,
                ///  B167
                B167: u1,
                ///  B168
                B168: u1,
                ///  B169
                B169: u1,
                ///  B170
                B170: u1,
                ///  B171
                B171: u1,
                ///  B172
                B172: u1,
                ///  B173
                B173: u1,
                ///  B174
                B174: u1,
                ///  B175
                B175: u1,
                ///  B176
                B176: u1,
                ///  B177
                B177: u1,
                ///  B178
                B178: u1,
                ///  B179
                B179: u1,
                ///  B180
                B180: u1,
                ///  B181
                B181: u1,
                ///  B182
                B182: u1,
                ///  B183
                B183: u1,
                ///  B184
                B184: u1,
                ///  B185
                B185: u1,
                ///  B186
                B186: u1,
                ///  B187
                B187: u1,
                ///  B188
                B188: u1,
                ///  B189
                B189: u1,
                ///  B190
                B190: u1,
                ///  B191
                B191: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR6: mmio.Mmio(packed struct(u32) {
                ///  B192
                B192: u1,
                ///  B193
                B193: u1,
                ///  B194
                B194: u1,
                ///  B195
                B195: u1,
                ///  B196
                B196: u1,
                ///  B197
                B197: u1,
                ///  B198
                B198: u1,
                ///  B199
                B199: u1,
                ///  B200
                B200: u1,
                ///  B201
                B201: u1,
                ///  B202
                B202: u1,
                ///  B203
                B203: u1,
                ///  B204
                B204: u1,
                ///  B205
                B205: u1,
                ///  B206
                B206: u1,
                ///  B207
                B207: u1,
                ///  B208
                B208: u1,
                ///  B209
                B209: u1,
                ///  B210
                B210: u1,
                ///  B211
                B211: u1,
                ///  B212
                B212: u1,
                ///  B213
                B213: u1,
                ///  B214
                B214: u1,
                ///  B215
                B215: u1,
                ///  B216
                B216: u1,
                ///  B217
                B217: u1,
                ///  B218
                B218: u1,
                ///  B219
                B219: u1,
                ///  B220
                B220: u1,
                ///  B221
                B221: u1,
                ///  B222
                B222: u1,
                ///  B223
                B223: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR7: mmio.Mmio(packed struct(u32) {
                ///  B224
                B224: u1,
                ///  B225
                B225: u1,
                ///  B226
                B226: u1,
                ///  B227
                B227: u1,
                ///  B228
                B228: u1,
                ///  B229
                B229: u1,
                ///  B230
                B230: u1,
                ///  B231
                B231: u1,
                ///  B232
                B232: u1,
                ///  B233
                B233: u1,
                ///  B234
                B234: u1,
                ///  B235
                B235: u1,
                ///  B236
                B236: u1,
                ///  B237
                B237: u1,
                ///  B238
                B238: u1,
                ///  B239
                B239: u1,
                ///  B240
                B240: u1,
                ///  B241
                B241: u1,
                ///  B242
                B242: u1,
                ///  B243
                B243: u1,
                ///  B244
                B244: u1,
                ///  B245
                B245: u1,
                ///  B246
                B246: u1,
                ///  B247
                B247: u1,
                ///  B248
                B248: u1,
                ///  B249
                B249: u1,
                ///  B250
                B250: u1,
                ///  B251
                B251: u1,
                ///  B252
                B252: u1,
                ///  B253
                B253: u1,
                ///  B254
                B254: u1,
                ///  B255
                B255: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR8: mmio.Mmio(packed struct(u32) {
                ///  B256
                B256: u1,
                ///  B257
                B257: u1,
                ///  B258
                B258: u1,
                ///  B259
                B259: u1,
                ///  B260
                B260: u1,
                ///  B261
                B261: u1,
                ///  B262
                B262: u1,
                ///  B263
                B263: u1,
                ///  B264
                B264: u1,
                ///  B265
                B265: u1,
                ///  B266
                B266: u1,
                ///  B267
                B267: u1,
                ///  B268
                B268: u1,
                ///  B269
                B269: u1,
                ///  B270
                B270: u1,
                ///  B271
                B271: u1,
                ///  B272
                B272: u1,
                ///  B273
                B273: u1,
                ///  B274
                B274: u1,
                ///  B275
                B275: u1,
                ///  B276
                B276: u1,
                ///  B277
                B277: u1,
                ///  B278
                B278: u1,
                ///  B279
                B279: u1,
                ///  B280
                B280: u1,
                ///  B281
                B281: u1,
                ///  B282
                B282: u1,
                ///  B283
                B283: u1,
                ///  B284
                B284: u1,
                ///  B285
                B285: u1,
                ///  B286
                B286: u1,
                ///  B287
                B287: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR9: mmio.Mmio(packed struct(u32) {
                ///  B288
                B288: u1,
                ///  B289
                B289: u1,
                ///  B290
                B290: u1,
                ///  B291
                B291: u1,
                ///  B292
                B292: u1,
                ///  B293
                B293: u1,
                ///  B294
                B294: u1,
                ///  B295
                B295: u1,
                ///  B296
                B296: u1,
                ///  B297
                B297: u1,
                ///  B298
                B298: u1,
                ///  B299
                B299: u1,
                ///  B300
                B300: u1,
                ///  B301
                B301: u1,
                ///  B302
                B302: u1,
                ///  B303
                B303: u1,
                ///  B304
                B304: u1,
                ///  B305
                B305: u1,
                ///  B306
                B306: u1,
                ///  B307
                B307: u1,
                ///  B308
                B308: u1,
                ///  B309
                B309: u1,
                ///  B310
                B310: u1,
                ///  B311
                B311: u1,
                ///  B312
                B312: u1,
                ///  B313
                B313: u1,
                ///  B314
                B314: u1,
                ///  B315
                B315: u1,
                ///  B316
                B316: u1,
                ///  B317
                B317: u1,
                ///  B318
                B318: u1,
                ///  B319
                B319: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR10: mmio.Mmio(packed struct(u32) {
                ///  B320
                B320: u1,
                ///  B321
                B321: u1,
                ///  B322
                B322: u1,
                ///  B323
                B323: u1,
                ///  B324
                B324: u1,
                ///  B325
                B325: u1,
                ///  B326
                B326: u1,
                ///  B327
                B327: u1,
                ///  B328
                B328: u1,
                ///  B329
                B329: u1,
                ///  B330
                B330: u1,
                ///  B331
                B331: u1,
                ///  B332
                B332: u1,
                ///  B333
                B333: u1,
                ///  B334
                B334: u1,
                ///  B335
                B335: u1,
                ///  B336
                B336: u1,
                ///  B337
                B337: u1,
                ///  B338
                B338: u1,
                ///  B339
                B339: u1,
                ///  B340
                B340: u1,
                ///  B341
                B341: u1,
                ///  B342
                B342: u1,
                ///  B343
                B343: u1,
                ///  B344
                B344: u1,
                ///  B345
                B345: u1,
                ///  B346
                B346: u1,
                ///  B347
                B347: u1,
                ///  B348
                B348: u1,
                ///  B349
                B349: u1,
                ///  B350
                B350: u1,
                ///  B351
                B351: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR11: mmio.Mmio(packed struct(u32) {
                ///  B352
                B352: u1,
                ///  B353
                B353: u1,
                ///  B354
                B354: u1,
                ///  B355
                B355: u1,
                ///  B356
                B356: u1,
                ///  B357
                B357: u1,
                ///  B358
                B358: u1,
                ///  B359
                B359: u1,
                ///  B360
                B360: u1,
                ///  B361
                B361: u1,
                ///  B362
                B362: u1,
                ///  B363
                B363: u1,
                ///  B364
                B364: u1,
                ///  B365
                B365: u1,
                ///  B366
                B366: u1,
                ///  B367
                B367: u1,
                ///  B368
                B368: u1,
                ///  B369
                B369: u1,
                ///  B370
                B370: u1,
                ///  B371
                B371: u1,
                ///  B372
                B372: u1,
                ///  B373
                B373: u1,
                ///  B374
                B374: u1,
                ///  B375
                B375: u1,
                ///  B376
                B376: u1,
                ///  B377
                B377: u1,
                ///  B378
                B378: u1,
                ///  B379
                B379: u1,
                ///  B380
                B380: u1,
                ///  B381
                B381: u1,
                ///  B382
                B382: u1,
                ///  B383
                B383: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR12: mmio.Mmio(packed struct(u32) {
                ///  B384
                B384: u1,
                ///  B385
                B385: u1,
                ///  B386
                B386: u1,
                ///  B387
                B387: u1,
                ///  B388
                B388: u1,
                ///  B389
                B389: u1,
                ///  B390
                B390: u1,
                ///  B391
                B391: u1,
                ///  B392
                B392: u1,
                ///  B393
                B393: u1,
                ///  B394
                B394: u1,
                ///  B395
                B395: u1,
                ///  B396
                B396: u1,
                ///  B397
                B397: u1,
                ///  B398
                B398: u1,
                ///  B399
                B399: u1,
                ///  B400
                B400: u1,
                ///  B401
                B401: u1,
                ///  B402
                B402: u1,
                ///  B403
                B403: u1,
                ///  B404
                B404: u1,
                ///  B405
                B405: u1,
                ///  B406
                B406: u1,
                ///  B407
                B407: u1,
                ///  B408
                B408: u1,
                ///  B409
                B409: u1,
                ///  B410
                B410: u1,
                ///  B411
                B411: u1,
                ///  B412
                B412: u1,
                ///  B413
                B413: u1,
                ///  B414
                B414: u1,
                ///  B415
                B415: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR13: mmio.Mmio(packed struct(u32) {
                ///  B416
                B416: u1,
                ///  B417
                B417: u1,
                ///  B418
                B418: u1,
                ///  B419
                B419: u1,
                ///  B420
                B420: u1,
                ///  B421
                B421: u1,
                ///  B422
                B422: u1,
                ///  B423
                B423: u1,
                ///  B424
                B424: u1,
                ///  B425
                B425: u1,
                ///  B426
                B426: u1,
                ///  B427
                B427: u1,
                ///  B428
                B428: u1,
                ///  B429
                B429: u1,
                ///  B430
                B430: u1,
                ///  B431
                B431: u1,
                ///  B432
                B432: u1,
                ///  B433
                B433: u1,
                ///  B434
                B434: u1,
                ///  B435
                B435: u1,
                ///  B436
                B436: u1,
                ///  B437
                B437: u1,
                ///  B438
                B438: u1,
                ///  B439
                B439: u1,
                ///  B440
                B440: u1,
                ///  B441
                B441: u1,
                ///  B442
                B442: u1,
                ///  B443
                B443: u1,
                ///  B444
                B444: u1,
                ///  B445
                B445: u1,
                ///  B446
                B446: u1,
                ///  B447
                B447: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR14: mmio.Mmio(packed struct(u32) {
                ///  B448
                B448: u1,
                ///  B449
                B449: u1,
                ///  B450
                B450: u1,
                ///  B451
                B451: u1,
                ///  B452
                B452: u1,
                ///  B453
                B453: u1,
                ///  B454
                B454: u1,
                ///  B455
                B455: u1,
                ///  B456
                B456: u1,
                ///  B457
                B457: u1,
                ///  B458
                B458: u1,
                ///  B459
                B459: u1,
                ///  B460
                B460: u1,
                ///  B461
                B461: u1,
                ///  B462
                B462: u1,
                ///  B463
                B463: u1,
                ///  B464
                B464: u1,
                ///  B465
                B465: u1,
                ///  B466
                B466: u1,
                ///  B467
                B467: u1,
                ///  B468
                B468: u1,
                ///  B469
                B469: u1,
                ///  B470
                B470: u1,
                ///  B471
                B471: u1,
                ///  B472
                B472: u1,
                ///  B473
                B473: u1,
                ///  B474
                B474: u1,
                ///  B475
                B475: u1,
                ///  B476
                B476: u1,
                ///  B477
                B477: u1,
                ///  B478
                B478: u1,
                ///  B479
                B479: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR15: mmio.Mmio(packed struct(u32) {
                ///  B480
                B480: u1,
                ///  B481
                B481: u1,
                ///  B482
                B482: u1,
                ///  B483
                B483: u1,
                ///  B484
                B484: u1,
                ///  B485
                B485: u1,
                ///  B486
                B486: u1,
                ///  B487
                B487: u1,
                ///  B488
                B488: u1,
                ///  B489
                B489: u1,
                ///  B490
                B490: u1,
                ///  B491
                B491: u1,
                ///  B492
                B492: u1,
                ///  B493
                B493: u1,
                ///  B494
                B494: u1,
                ///  B495
                B495: u1,
                ///  B496
                B496: u1,
                ///  B497
                B497: u1,
                ///  B498
                B498: u1,
                ///  B499
                B499: u1,
                ///  B500
                B500: u1,
                ///  B501
                B501: u1,
                ///  B502
                B502: u1,
                ///  B503
                B503: u1,
                ///  B504
                B504: u1,
                ///  B505
                B505: u1,
                ///  B506
                B506: u1,
                ///  B507
                B507: u1,
                ///  B508
                B508: u1,
                ///  B509
                B509: u1,
                ///  B510
                B510: u1,
                ///  B511
                B511: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR16: mmio.Mmio(packed struct(u32) {
                ///  B512
                B512: u1,
                ///  B513
                B513: u1,
                ///  B514
                B514: u1,
                ///  B515
                B515: u1,
                ///  B516
                B516: u1,
                ///  B517
                B517: u1,
                ///  B518
                B518: u1,
                ///  B519
                B519: u1,
                ///  B520
                B520: u1,
                ///  B521
                B521: u1,
                ///  B522
                B522: u1,
                ///  B523
                B523: u1,
                ///  B524
                B524: u1,
                ///  B525
                B525: u1,
                ///  B526
                B526: u1,
                ///  B527
                B527: u1,
                ///  B528
                B528: u1,
                ///  B529
                B529: u1,
                ///  B530
                B530: u1,
                ///  B531
                B531: u1,
                ///  B532
                B532: u1,
                ///  B533
                B533: u1,
                ///  B534
                B534: u1,
                ///  B535
                B535: u1,
                ///  B536
                B536: u1,
                ///  B537
                B537: u1,
                ///  B538
                B538: u1,
                ///  B539
                B539: u1,
                ///  B540
                B540: u1,
                ///  B541
                B541: u1,
                ///  B542
                B542: u1,
                ///  B543
                B543: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR17: mmio.Mmio(packed struct(u32) {
                ///  B544
                B544: u1,
                ///  B545
                B545: u1,
                ///  B546
                B546: u1,
                ///  B547
                B547: u1,
                ///  B548
                B548: u1,
                ///  B549
                B549: u1,
                ///  B550
                B550: u1,
                ///  B551
                B551: u1,
                ///  B552
                B552: u1,
                ///  B553
                B553: u1,
                ///  B554
                B554: u1,
                ///  B555
                B555: u1,
                ///  B556
                B556: u1,
                ///  B557
                B557: u1,
                ///  B558
                B558: u1,
                ///  B559
                B559: u1,
                ///  B560
                B560: u1,
                ///  B561
                B561: u1,
                ///  B562
                B562: u1,
                ///  B563
                B563: u1,
                ///  B564
                B564: u1,
                ///  B565
                B565: u1,
                ///  B566
                B566: u1,
                ///  B567
                B567: u1,
                ///  B568
                B568: u1,
                ///  B569
                B569: u1,
                ///  B570
                B570: u1,
                ///  B571
                B571: u1,
                ///  B572
                B572: u1,
                ///  B573
                B573: u1,
                ///  B574
                B574: u1,
                ///  B575
                B575: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR18: mmio.Mmio(packed struct(u32) {
                ///  B576
                B576: u1,
                ///  B577
                B577: u1,
                ///  B578
                B578: u1,
                ///  B579
                B579: u1,
                ///  B580
                B580: u1,
                ///  B581
                B581: u1,
                ///  B582
                B582: u1,
                ///  B583
                B583: u1,
                ///  B584
                B584: u1,
                ///  B585
                B585: u1,
                ///  B586
                B586: u1,
                ///  B587
                B587: u1,
                ///  B588
                B588: u1,
                ///  B589
                B589: u1,
                ///  B590
                B590: u1,
                ///  B591
                B591: u1,
                ///  B592
                B592: u1,
                ///  B593
                B593: u1,
                ///  B594
                B594: u1,
                ///  B595
                B595: u1,
                ///  B596
                B596: u1,
                ///  B597
                B597: u1,
                ///  B598
                B598: u1,
                ///  B599
                B599: u1,
                ///  B600
                B600: u1,
                ///  B601
                B601: u1,
                ///  B602
                B602: u1,
                ///  B603
                B603: u1,
                ///  B604
                B604: u1,
                ///  B605
                B605: u1,
                ///  B606
                B606: u1,
                ///  B607
                B607: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR19: mmio.Mmio(packed struct(u32) {
                ///  B608
                B608: u1,
                ///  B609
                B609: u1,
                ///  B610
                B610: u1,
                ///  B611
                B611: u1,
                ///  B612
                B612: u1,
                ///  B613
                B613: u1,
                ///  B614
                B614: u1,
                ///  B615
                B615: u1,
                ///  B616
                B616: u1,
                ///  B617
                B617: u1,
                ///  B618
                B618: u1,
                ///  B619
                B619: u1,
                ///  B620
                B620: u1,
                ///  B621
                B621: u1,
                ///  B622
                B622: u1,
                ///  B623
                B623: u1,
                ///  B624
                B624: u1,
                ///  B625
                B625: u1,
                ///  B626
                B626: u1,
                ///  B627
                B627: u1,
                ///  B628
                B628: u1,
                ///  B629
                B629: u1,
                ///  B630
                B630: u1,
                ///  B631
                B631: u1,
                ///  B632
                B632: u1,
                ///  B633
                B633: u1,
                ///  B634
                B634: u1,
                ///  B635
                B635: u1,
                ///  B636
                B636: u1,
                ///  B637
                B637: u1,
                ///  B638
                B638: u1,
                ///  B639
                B639: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR20: mmio.Mmio(packed struct(u32) {
                ///  B640
                B640: u1,
                ///  B641
                B641: u1,
                ///  B642
                B642: u1,
                ///  B643
                B643: u1,
                ///  B644
                B644: u1,
                ///  B645
                B645: u1,
                ///  B646
                B646: u1,
                ///  B647
                B647: u1,
                ///  B648
                B648: u1,
                ///  B649
                B649: u1,
                ///  B650
                B650: u1,
                ///  B651
                B651: u1,
                ///  B652
                B652: u1,
                ///  B653
                B653: u1,
                ///  B654
                B654: u1,
                ///  B655
                B655: u1,
                ///  B656
                B656: u1,
                ///  B657
                B657: u1,
                ///  B658
                B658: u1,
                ///  B659
                B659: u1,
                ///  B660
                B660: u1,
                ///  B661
                B661: u1,
                ///  B662
                B662: u1,
                ///  B663
                B663: u1,
                ///  B664
                B664: u1,
                ///  B665
                B665: u1,
                ///  B666
                B666: u1,
                ///  B667
                B667: u1,
                ///  B668
                B668: u1,
                ///  B669
                B669: u1,
                ///  B670
                B670: u1,
                ///  B671
                B671: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR21: mmio.Mmio(packed struct(u32) {
                ///  B672
                B672: u1,
                ///  B673
                B673: u1,
                ///  B674
                B674: u1,
                ///  B675
                B675: u1,
                ///  B676
                B676: u1,
                ///  B677
                B677: u1,
                ///  B678
                B678: u1,
                ///  B679
                B679: u1,
                ///  B680
                B680: u1,
                ///  B681
                B681: u1,
                ///  B682
                B682: u1,
                ///  B683
                B683: u1,
                ///  B684
                B684: u1,
                ///  B685
                B685: u1,
                ///  B686
                B686: u1,
                ///  B687
                B687: u1,
                ///  B688
                B688: u1,
                ///  B689
                B689: u1,
                ///  B690
                B690: u1,
                ///  B691
                B691: u1,
                ///  B692
                B692: u1,
                ///  B693
                B693: u1,
                ///  B694
                B694: u1,
                ///  B695
                B695: u1,
                ///  B696
                B696: u1,
                ///  B697
                B697: u1,
                ///  B698
                B698: u1,
                ///  B699
                B699: u1,
                ///  B700
                B700: u1,
                ///  B701
                B701: u1,
                ///  B702
                B702: u1,
                ///  B703
                B703: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR22: mmio.Mmio(packed struct(u32) {
                ///  B704
                B704: u1,
                ///  B705
                B705: u1,
                ///  B706
                B706: u1,
                ///  B707
                B707: u1,
                ///  B708
                B708: u1,
                ///  B709
                B709: u1,
                ///  B710
                B710: u1,
                ///  B711
                B711: u1,
                ///  B712
                B712: u1,
                ///  B713
                B713: u1,
                ///  B714
                B714: u1,
                ///  B715
                B715: u1,
                ///  B716
                B716: u1,
                ///  B717
                B717: u1,
                ///  B718
                B718: u1,
                ///  B719
                B719: u1,
                ///  B720
                B720: u1,
                ///  B721
                B721: u1,
                ///  B722
                B722: u1,
                ///  B723
                B723: u1,
                ///  B724
                B724: u1,
                ///  B725
                B725: u1,
                ///  B726
                B726: u1,
                ///  B727
                B727: u1,
                ///  B728
                B728: u1,
                ///  B729
                B729: u1,
                ///  B730
                B730: u1,
                ///  B731
                B731: u1,
                ///  B732
                B732: u1,
                ///  B733
                B733: u1,
                ///  B734
                B734: u1,
                ///  B735
                B735: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR23: mmio.Mmio(packed struct(u32) {
                ///  B736
                B736: u1,
                ///  B737
                B737: u1,
                ///  B738
                B738: u1,
                ///  B739
                B739: u1,
                ///  B740
                B740: u1,
                ///  B741
                B741: u1,
                ///  B742
                B742: u1,
                ///  B743
                B743: u1,
                ///  B744
                B744: u1,
                ///  B745
                B745: u1,
                ///  B746
                B746: u1,
                ///  B747
                B747: u1,
                ///  B748
                B748: u1,
                ///  B749
                B749: u1,
                ///  B750
                B750: u1,
                ///  B751
                B751: u1,
                ///  B752
                B752: u1,
                ///  B753
                B753: u1,
                ///  B754
                B754: u1,
                ///  B755
                B755: u1,
                ///  B756
                B756: u1,
                ///  B757
                B757: u1,
                ///  B758
                B758: u1,
                ///  B759
                B759: u1,
                ///  B760
                B760: u1,
                ///  B761
                B761: u1,
                ///  B762
                B762: u1,
                ///  B763
                B763: u1,
                ///  B764
                B764: u1,
                ///  B765
                B765: u1,
                ///  B766
                B766: u1,
                ///  B767
                B767: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR24: mmio.Mmio(packed struct(u32) {
                ///  B768
                B768: u1,
                ///  B769
                B769: u1,
                ///  B770
                B770: u1,
                ///  B771
                B771: u1,
                ///  B772
                B772: u1,
                ///  B773
                B773: u1,
                ///  B774
                B774: u1,
                ///  B775
                B775: u1,
                ///  B776
                B776: u1,
                ///  B777
                B777: u1,
                ///  B778
                B778: u1,
                ///  B779
                B779: u1,
                ///  B780
                B780: u1,
                ///  B781
                B781: u1,
                ///  B782
                B782: u1,
                ///  B783
                B783: u1,
                ///  B784
                B784: u1,
                ///  B785
                B785: u1,
                ///  B786
                B786: u1,
                ///  B787
                B787: u1,
                ///  B788
                B788: u1,
                ///  B789
                B789: u1,
                ///  B790
                B790: u1,
                ///  B791
                B791: u1,
                ///  B792
                B792: u1,
                ///  B793
                B793: u1,
                ///  B794
                B794: u1,
                ///  B795
                B795: u1,
                ///  B796
                B796: u1,
                ///  B797
                B797: u1,
                ///  B798
                B798: u1,
                ///  B799
                B799: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR25: mmio.Mmio(packed struct(u32) {
                ///  B800
                B800: u1,
                ///  B801
                B801: u1,
                ///  B802
                B802: u1,
                ///  B803
                B803: u1,
                ///  B804
                B804: u1,
                ///  B805
                B805: u1,
                ///  B806
                B806: u1,
                ///  B807
                B807: u1,
                ///  B808
                B808: u1,
                ///  B809
                B809: u1,
                ///  B810
                B810: u1,
                ///  B811
                B811: u1,
                ///  B812
                B812: u1,
                ///  B813
                B813: u1,
                ///  B814
                B814: u1,
                ///  B815
                B815: u1,
                ///  B816
                B816: u1,
                ///  B817
                B817: u1,
                ///  B818
                B818: u1,
                ///  B819
                B819: u1,
                ///  B820
                B820: u1,
                ///  B821
                B821: u1,
                ///  B822
                B822: u1,
                ///  B823
                B823: u1,
                ///  B824
                B824: u1,
                ///  B825
                B825: u1,
                ///  B826
                B826: u1,
                ///  B827
                B827: u1,
                ///  B828
                B828: u1,
                ///  B829
                B829: u1,
                ///  B830
                B830: u1,
                ///  B831
                B831: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR26: mmio.Mmio(packed struct(u32) {
                ///  B832
                B832: u1,
                ///  B833
                B833: u1,
                ///  B834
                B834: u1,
                ///  B835
                B835: u1,
                ///  B836
                B836: u1,
                ///  B837
                B837: u1,
                ///  B838
                B838: u1,
                ///  B839
                B839: u1,
                ///  B840
                B840: u1,
                ///  B841
                B841: u1,
                ///  B842
                B842: u1,
                ///  B843
                B843: u1,
                ///  B844
                B844: u1,
                ///  B845
                B845: u1,
                ///  B846
                B846: u1,
                ///  B847
                B847: u1,
                ///  B848
                B848: u1,
                ///  B849
                B849: u1,
                ///  B850
                B850: u1,
                ///  B851
                B851: u1,
                ///  B852
                B852: u1,
                ///  B853
                B853: u1,
                ///  B854
                B854: u1,
                ///  B855
                B855: u1,
                ///  B856
                B856: u1,
                ///  B857
                B857: u1,
                ///  B858
                B858: u1,
                ///  B859
                B859: u1,
                ///  B860
                B860: u1,
                ///  B861
                B861: u1,
                ///  B862
                B862: u1,
                ///  B863
                B863: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR27: mmio.Mmio(packed struct(u32) {
                ///  B864
                B864: u1,
                ///  B865
                B865: u1,
                ///  B866
                B866: u1,
                ///  B867
                B867: u1,
                ///  B868
                B868: u1,
                ///  B869
                B869: u1,
                ///  B870
                B870: u1,
                ///  B871
                B871: u1,
                ///  B872
                B872: u1,
                ///  B873
                B873: u1,
                ///  B874
                B874: u1,
                ///  B875
                B875: u1,
                ///  B876
                B876: u1,
                ///  B877
                B877: u1,
                ///  B878
                B878: u1,
                ///  B879
                B879: u1,
                ///  B880
                B880: u1,
                ///  B881
                B881: u1,
                ///  B882
                B882: u1,
                ///  B883
                B883: u1,
                ///  B884
                B884: u1,
                ///  B885
                B885: u1,
                ///  B886
                B886: u1,
                ///  B887
                B887: u1,
                ///  B888
                B888: u1,
                ///  B889
                B889: u1,
                ///  B890
                B890: u1,
                ///  B891
                B891: u1,
                ///  B892
                B892: u1,
                ///  B893
                B893: u1,
                ///  B894
                B894: u1,
                ///  B895
                B895: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR28: mmio.Mmio(packed struct(u32) {
                ///  B896
                B896: u1,
                ///  B897
                B897: u1,
                ///  B898
                B898: u1,
                ///  B899
                B899: u1,
                ///  B900
                B900: u1,
                ///  B901
                B901: u1,
                ///  B902
                B902: u1,
                ///  B903
                B903: u1,
                ///  B904
                B904: u1,
                ///  B905
                B905: u1,
                ///  B906
                B906: u1,
                ///  B907
                B907: u1,
                ///  B908
                B908: u1,
                ///  B909
                B909: u1,
                ///  B910
                B910: u1,
                ///  B911
                B911: u1,
                ///  B912
                B912: u1,
                ///  B913
                B913: u1,
                ///  B914
                B914: u1,
                ///  B915
                B915: u1,
                ///  B916
                B916: u1,
                ///  B917
                B917: u1,
                ///  B918
                B918: u1,
                ///  B919
                B919: u1,
                ///  B920
                B920: u1,
                ///  B921
                B921: u1,
                ///  B922
                B922: u1,
                ///  B923
                B923: u1,
                ///  B924
                B924: u1,
                ///  B925
                B925: u1,
                ///  B926
                B926: u1,
                ///  B927
                B927: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR29: mmio.Mmio(packed struct(u32) {
                ///  B928
                B928: u1,
                ///  B929
                B929: u1,
                ///  B930
                B930: u1,
                ///  B931
                B931: u1,
                ///  B932
                B932: u1,
                ///  B933
                B933: u1,
                ///  B934
                B934: u1,
                ///  B935
                B935: u1,
                ///  B936
                B936: u1,
                ///  B937
                B937: u1,
                ///  B938
                B938: u1,
                ///  B939
                B939: u1,
                ///  B940
                B940: u1,
                ///  B941
                B941: u1,
                ///  B942
                B942: u1,
                ///  B943
                B943: u1,
                ///  B944
                B944: u1,
                ///  B945
                B945: u1,
                ///  B946
                B946: u1,
                ///  B947
                B947: u1,
                ///  B948
                B948: u1,
                ///  B949
                B949: u1,
                ///  B950
                B950: u1,
                ///  B951
                B951: u1,
                ///  B952
                B952: u1,
                ///  B953
                B953: u1,
                ///  B954
                B954: u1,
                ///  B955
                B955: u1,
                ///  B956
                B956: u1,
                ///  B957
                B957: u1,
                ///  B958
                B958: u1,
                ///  B959
                B959: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR30: mmio.Mmio(packed struct(u32) {
                ///  B960
                B960: u1,
                ///  B961
                B961: u1,
                ///  B962
                B962: u1,
                ///  B963
                B963: u1,
                ///  B964
                B964: u1,
                ///  B965
                B965: u1,
                ///  B966
                B966: u1,
                ///  B967
                B967: u1,
                ///  B968
                B968: u1,
                ///  B969
                B969: u1,
                ///  B970
                B970: u1,
                ///  B971
                B971: u1,
                ///  B972
                B972: u1,
                ///  B973
                B973: u1,
                ///  B974
                B974: u1,
                ///  B975
                B975: u1,
                ///  B976
                B976: u1,
                ///  B977
                B977: u1,
                ///  B978
                B978: u1,
                ///  B979
                B979: u1,
                ///  B980
                B980: u1,
                ///  B981
                B981: u1,
                ///  B982
                B982: u1,
                ///  B983
                B983: u1,
                ///  B984
                B984: u1,
                ///  B985
                B985: u1,
                ///  B986
                B986: u1,
                ///  B987
                B987: u1,
                ///  B988
                B988: u1,
                ///  B989
                B989: u1,
                ///  B990
                B990: u1,
                ///  B991
                B991: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR31: mmio.Mmio(packed struct(u32) {
                ///  B992
                B992: u1,
                ///  B993
                B993: u1,
                ///  B994
                B994: u1,
                ///  B995
                B995: u1,
                ///  B996
                B996: u1,
                ///  B997
                B997: u1,
                ///  B998
                B998: u1,
                ///  B999
                B999: u1,
                ///  B1000
                B1000: u1,
                ///  B1001
                B1001: u1,
                ///  B1002
                B1002: u1,
                ///  B1003
                B1003: u1,
                ///  B1004
                B1004: u1,
                ///  B1005
                B1005: u1,
                ///  B1006
                B1006: u1,
                ///  B1007
                B1007: u1,
                ///  B1008
                B1008: u1,
                ///  B1009
                B1009: u1,
                ///  B1010
                B1010: u1,
                ///  B1011
                B1011: u1,
                ///  B1012
                B1012: u1,
                ///  B1013
                B1013: u1,
                ///  B1014
                B1014: u1,
                ///  B1015
                B1015: u1,
                ///  B1016
                B1016: u1,
                ///  B1017
                B1017: u1,
                ///  B1018
                B1018: u1,
                ///  B1019
                B1019: u1,
                ///  B1020
                B1020: u1,
                ///  B1021
                B1021: u1,
                ///  B1022
                B1022: u1,
                ///  B1023
                B1023: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR32: mmio.Mmio(packed struct(u32) {
                ///  B1024
                B1024: u1,
                ///  B1025
                B1025: u1,
                ///  B1026
                B1026: u1,
                ///  B1027
                B1027: u1,
                ///  B1028
                B1028: u1,
                ///  B1029
                B1029: u1,
                ///  B1030
                B1030: u1,
                ///  B1031
                B1031: u1,
                ///  B1032
                B1032: u1,
                ///  B1033
                B1033: u1,
                ///  B1034
                B1034: u1,
                ///  B1035
                B1035: u1,
                ///  B1036
                B1036: u1,
                ///  B1037
                B1037: u1,
                ///  B1038
                B1038: u1,
                ///  B1039
                B1039: u1,
                ///  B1040
                B1040: u1,
                ///  B1041
                B1041: u1,
                ///  B1042
                B1042: u1,
                ///  B1043
                B1043: u1,
                ///  B1044
                B1044: u1,
                ///  B1045
                B1045: u1,
                ///  B1046
                B1046: u1,
                ///  B1047
                B1047: u1,
                ///  B1048
                B1048: u1,
                ///  B1049
                B1049: u1,
                ///  B1050
                B1050: u1,
                ///  B1051
                B1051: u1,
                ///  B1052
                B1052: u1,
                ///  B1053
                B1053: u1,
                ///  B1054
                B1054: u1,
                ///  B1055
                B1055: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR33: mmio.Mmio(packed struct(u32) {
                ///  B1056
                B1056: u1,
                ///  B1057
                B1057: u1,
                ///  B1058
                B1058: u1,
                ///  B1059
                B1059: u1,
                ///  B1060
                B1060: u1,
                ///  B1061
                B1061: u1,
                ///  B1062
                B1062: u1,
                ///  B1063
                B1063: u1,
                ///  B1064
                B1064: u1,
                ///  B1065
                B1065: u1,
                ///  B1066
                B1066: u1,
                ///  B1067
                B1067: u1,
                ///  B1068
                B1068: u1,
                ///  B1069
                B1069: u1,
                ///  B1070
                B1070: u1,
                ///  B1071
                B1071: u1,
                ///  B1072
                B1072: u1,
                ///  B1073
                B1073: u1,
                ///  B1074
                B1074: u1,
                ///  B1075
                B1075: u1,
                ///  B1076
                B1076: u1,
                ///  B1077
                B1077: u1,
                ///  B1078
                B1078: u1,
                ///  B1079
                B1079: u1,
                ///  B1080
                B1080: u1,
                ///  B1081
                B1081: u1,
                ///  B1082
                B1082: u1,
                ///  B1083
                B1083: u1,
                ///  B1084
                B1084: u1,
                ///  B1085
                B1085: u1,
                ///  B1086
                B1086: u1,
                ///  B1087
                B1087: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR34: mmio.Mmio(packed struct(u32) {
                ///  B1088
                B1088: u1,
                ///  B1089
                B1089: u1,
                ///  B1090
                B1090: u1,
                ///  B1091
                B1091: u1,
                ///  B1092
                B1092: u1,
                ///  B1093
                B1093: u1,
                ///  B1094
                B1094: u1,
                ///  B1095
                B1095: u1,
                ///  B1096
                B1096: u1,
                ///  B1097
                B1097: u1,
                ///  B1098
                B1098: u1,
                ///  B1099
                B1099: u1,
                ///  B1100
                B1100: u1,
                ///  B1101
                B1101: u1,
                ///  B1102
                B1102: u1,
                ///  B1103
                B1103: u1,
                ///  B1104
                B1104: u1,
                ///  B1105
                B1105: u1,
                ///  B1106
                B1106: u1,
                ///  B1107
                B1107: u1,
                ///  B1108
                B1108: u1,
                ///  B1109
                B1109: u1,
                ///  B1110
                B1110: u1,
                ///  B1111
                B1111: u1,
                ///  B1112
                B1112: u1,
                ///  B1113
                B1113: u1,
                ///  B1114
                B1114: u1,
                ///  B1115
                B1115: u1,
                ///  B1116
                B1116: u1,
                ///  B1117
                B1117: u1,
                ///  B1118
                B1118: u1,
                ///  B1119
                B1119: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR35: mmio.Mmio(packed struct(u32) {
                ///  B1120
                B1120: u1,
                ///  B1121
                B1121: u1,
                ///  B1122
                B1122: u1,
                ///  B1123
                B1123: u1,
                ///  B1124
                B1124: u1,
                ///  B1125
                B1125: u1,
                ///  B1126
                B1126: u1,
                ///  B1127
                B1127: u1,
                ///  B1128
                B1128: u1,
                ///  B1129
                B1129: u1,
                ///  B1130
                B1130: u1,
                ///  B1131
                B1131: u1,
                ///  B1132
                B1132: u1,
                ///  B1133
                B1133: u1,
                ///  B1134
                B1134: u1,
                ///  B1135
                B1135: u1,
                ///  B1136
                B1136: u1,
                ///  B1137
                B1137: u1,
                ///  B1138
                B1138: u1,
                ///  B1139
                B1139: u1,
                ///  B1140
                B1140: u1,
                ///  B1141
                B1141: u1,
                ///  B1142
                B1142: u1,
                ///  B1143
                B1143: u1,
                ///  B1144
                B1144: u1,
                ///  B1145
                B1145: u1,
                ///  B1146
                B1146: u1,
                ///  B1147
                B1147: u1,
                ///  B1148
                B1148: u1,
                ///  B1149
                B1149: u1,
                ///  B1150
                B1150: u1,
                ///  B1151
                B1151: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR36: mmio.Mmio(packed struct(u32) {
                ///  B1152
                B1152: u1,
                ///  B1153
                B1153: u1,
                ///  B1154
                B1154: u1,
                ///  B1155
                B1155: u1,
                ///  B1156
                B1156: u1,
                ///  B1157
                B1157: u1,
                ///  B1158
                B1158: u1,
                ///  B1159
                B1159: u1,
                ///  B1160
                B1160: u1,
                ///  B1161
                B1161: u1,
                ///  B1162
                B1162: u1,
                ///  B1163
                B1163: u1,
                ///  B1164
                B1164: u1,
                ///  B1165
                B1165: u1,
                ///  B1166
                B1166: u1,
                ///  B1167
                B1167: u1,
                ///  B1168
                B1168: u1,
                ///  B1169
                B1169: u1,
                ///  B1170
                B1170: u1,
                ///  B1171
                B1171: u1,
                ///  B1172
                B1172: u1,
                ///  B1173
                B1173: u1,
                ///  B1174
                B1174: u1,
                ///  B1175
                B1175: u1,
                ///  B1176
                B1176: u1,
                ///  B1177
                B1177: u1,
                ///  B1178
                B1178: u1,
                ///  B1179
                B1179: u1,
                ///  B1180
                B1180: u1,
                ///  B1181
                B1181: u1,
                ///  B1182
                B1182: u1,
                ///  B1183
                B1183: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR37: mmio.Mmio(packed struct(u32) {
                ///  B1184
                B1184: u1,
                ///  B1185
                B1185: u1,
                ///  B1186
                B1186: u1,
                ///  B1187
                B1187: u1,
                ///  B1188
                B1188: u1,
                ///  B1189
                B1189: u1,
                ///  B1190
                B1190: u1,
                ///  B1191
                B1191: u1,
                ///  B1192
                B1192: u1,
                ///  B1193
                B1193: u1,
                ///  B1194
                B1194: u1,
                ///  B1195
                B1195: u1,
                ///  B1196
                B1196: u1,
                ///  B1197
                B1197: u1,
                ///  B1198
                B1198: u1,
                ///  B1199
                B1199: u1,
                ///  B1200
                B1200: u1,
                ///  B1201
                B1201: u1,
                ///  B1202
                B1202: u1,
                ///  B1203
                B1203: u1,
                ///  B1204
                B1204: u1,
                ///  B1205
                B1205: u1,
                ///  B1206
                B1206: u1,
                ///  B1207
                B1207: u1,
                ///  B1208
                B1208: u1,
                ///  B1209
                B1209: u1,
                ///  B1210
                B1210: u1,
                ///  B1211
                B1211: u1,
                ///  B1212
                B1212: u1,
                ///  B1213
                B1213: u1,
                ///  B1214
                B1214: u1,
                ///  B1215
                B1215: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR38: mmio.Mmio(packed struct(u32) {
                ///  B1216
                B1216: u1,
                ///  B1217
                B1217: u1,
                ///  B1218
                B1218: u1,
                ///  B1219
                B1219: u1,
                ///  B1220
                B1220: u1,
                ///  B1221
                B1221: u1,
                ///  B1222
                B1222: u1,
                ///  B1223
                B1223: u1,
                ///  B1224
                B1224: u1,
                ///  B1225
                B1225: u1,
                ///  B1226
                B1226: u1,
                ///  B1227
                B1227: u1,
                ///  B1228
                B1228: u1,
                ///  B1229
                B1229: u1,
                ///  B1230
                B1230: u1,
                ///  B1231
                B1231: u1,
                ///  B1232
                B1232: u1,
                ///  B1233
                B1233: u1,
                ///  B1234
                B1234: u1,
                ///  B1235
                B1235: u1,
                ///  B1236
                B1236: u1,
                ///  B1237
                B1237: u1,
                ///  B1238
                B1238: u1,
                ///  B1239
                B1239: u1,
                ///  B1240
                B1240: u1,
                ///  B1241
                B1241: u1,
                ///  B1242
                B1242: u1,
                ///  B1243
                B1243: u1,
                ///  B1244
                B1244: u1,
                ///  B1245
                B1245: u1,
                ///  B1246
                B1246: u1,
                ///  B1247
                B1247: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR39: mmio.Mmio(packed struct(u32) {
                ///  B1248
                B1248: u1,
                ///  B1249
                B1249: u1,
                ///  B1250
                B1250: u1,
                ///  B1251
                B1251: u1,
                ///  B1252
                B1252: u1,
                ///  B1253
                B1253: u1,
                ///  B1254
                B1254: u1,
                ///  B1255
                B1255: u1,
                ///  B1256
                B1256: u1,
                ///  B1257
                B1257: u1,
                ///  B1258
                B1258: u1,
                ///  B1259
                B1259: u1,
                ///  B1260
                B1260: u1,
                ///  B1261
                B1261: u1,
                ///  B1262
                B1262: u1,
                ///  B1263
                B1263: u1,
                ///  B1264
                B1264: u1,
                ///  B1265
                B1265: u1,
                ///  B1266
                B1266: u1,
                ///  B1267
                B1267: u1,
                ///  B1268
                B1268: u1,
                ///  B1269
                B1269: u1,
                ///  B1270
                B1270: u1,
                ///  B1271
                B1271: u1,
                ///  B1272
                B1272: u1,
                ///  B1273
                B1273: u1,
                ///  B1274
                B1274: u1,
                ///  B1275
                B1275: u1,
                ///  B1276
                B1276: u1,
                ///  B1277
                B1277: u1,
                ///  B1278
                B1278: u1,
                ///  B1279
                B1279: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR40: mmio.Mmio(packed struct(u32) {
                ///  B1280
                B1280: u1,
                ///  B1281
                B1281: u1,
                ///  B1282
                B1282: u1,
                ///  B1283
                B1283: u1,
                ///  B1284
                B1284: u1,
                ///  B1285
                B1285: u1,
                ///  B1286
                B1286: u1,
                ///  B1287
                B1287: u1,
                ///  B1288
                B1288: u1,
                ///  B1289
                B1289: u1,
                ///  B1290
                B1290: u1,
                ///  B1291
                B1291: u1,
                ///  B1292
                B1292: u1,
                ///  B1293
                B1293: u1,
                ///  B1294
                B1294: u1,
                ///  B1295
                B1295: u1,
                ///  B1296
                B1296: u1,
                ///  B1297
                B1297: u1,
                ///  B1298
                B1298: u1,
                ///  B1299
                B1299: u1,
                ///  B1300
                B1300: u1,
                ///  B1301
                B1301: u1,
                ///  B1302
                B1302: u1,
                ///  B1303
                B1303: u1,
                ///  B1304
                B1304: u1,
                ///  B1305
                B1305: u1,
                ///  B1306
                B1306: u1,
                ///  B1307
                B1307: u1,
                ///  B1308
                B1308: u1,
                ///  B1309
                B1309: u1,
                ///  B1310
                B1310: u1,
                ///  B1311
                B1311: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR41: mmio.Mmio(packed struct(u32) {
                ///  B1312
                B1312: u1,
                ///  B1313
                B1313: u1,
                ///  B1314
                B1314: u1,
                ///  B1315
                B1315: u1,
                ///  B1316
                B1316: u1,
                ///  B1317
                B1317: u1,
                ///  B1318
                B1318: u1,
                ///  B1319
                B1319: u1,
                ///  B1320
                B1320: u1,
                ///  B1321
                B1321: u1,
                ///  B1322
                B1322: u1,
                ///  B1323
                B1323: u1,
                ///  B1324
                B1324: u1,
                ///  B1325
                B1325: u1,
                ///  B1326
                B1326: u1,
                ///  B1327
                B1327: u1,
                ///  B1328
                B1328: u1,
                ///  B1329
                B1329: u1,
                ///  B1330
                B1330: u1,
                ///  B1331
                B1331: u1,
                ///  B1332
                B1332: u1,
                ///  B1333
                B1333: u1,
                ///  B1334
                B1334: u1,
                ///  B1335
                B1335: u1,
                ///  B1336
                B1336: u1,
                ///  B1337
                B1337: u1,
                ///  B1338
                B1338: u1,
                ///  B1339
                B1339: u1,
                ///  B1340
                B1340: u1,
                ///  B1341
                B1341: u1,
                ///  B1342
                B1342: u1,
                ///  B1343
                B1343: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR42: mmio.Mmio(packed struct(u32) {
                ///  B1344
                B1344: u1,
                ///  B1345
                B1345: u1,
                ///  B1346
                B1346: u1,
                ///  B1347
                B1347: u1,
                ///  B1348
                B1348: u1,
                ///  B1349
                B1349: u1,
                ///  B1350
                B1350: u1,
                ///  B1351
                B1351: u1,
                ///  B1352
                B1352: u1,
                ///  B1353
                B1353: u1,
                ///  B1354
                B1354: u1,
                ///  B1355
                B1355: u1,
                ///  B1356
                B1356: u1,
                ///  B1357
                B1357: u1,
                ///  B1358
                B1358: u1,
                ///  B1359
                B1359: u1,
                ///  B1360
                B1360: u1,
                ///  B1361
                B1361: u1,
                ///  B1362
                B1362: u1,
                ///  B1363
                B1363: u1,
                ///  B1364
                B1364: u1,
                ///  B1365
                B1365: u1,
                ///  B1366
                B1366: u1,
                ///  B1367
                B1367: u1,
                ///  B1368
                B1368: u1,
                ///  B1369
                B1369: u1,
                ///  B1370
                B1370: u1,
                ///  B1371
                B1371: u1,
                ///  B1372
                B1372: u1,
                ///  B1373
                B1373: u1,
                ///  B1374
                B1374: u1,
                ///  B1375
                B1375: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR43: mmio.Mmio(packed struct(u32) {
                ///  B1376
                B1376: u1,
                ///  B1377
                B1377: u1,
                ///  B1378
                B1378: u1,
                ///  B1379
                B1379: u1,
                ///  B1380
                B1380: u1,
                ///  B1381
                B1381: u1,
                ///  B1382
                B1382: u1,
                ///  B1383
                B1383: u1,
                ///  B1384
                B1384: u1,
                ///  B1385
                B1385: u1,
                ///  B1386
                B1386: u1,
                ///  B1387
                B1387: u1,
                ///  B1388
                B1388: u1,
                ///  B1389
                B1389: u1,
                ///  B1390
                B1390: u1,
                ///  B1391
                B1391: u1,
                ///  B1392
                B1392: u1,
                ///  B1393
                B1393: u1,
                ///  B1394
                B1394: u1,
                ///  B1395
                B1395: u1,
                ///  B1396
                B1396: u1,
                ///  B1397
                B1397: u1,
                ///  B1398
                B1398: u1,
                ///  B1399
                B1399: u1,
                ///  B1400
                B1400: u1,
                ///  B1401
                B1401: u1,
                ///  B1402
                B1402: u1,
                ///  B1403
                B1403: u1,
                ///  B1404
                B1404: u1,
                ///  B1405
                B1405: u1,
                ///  B1406
                B1406: u1,
                ///  B1407
                B1407: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR44: mmio.Mmio(packed struct(u32) {
                ///  B1408
                B1408: u1,
                ///  B1409
                B1409: u1,
                ///  B1410
                B1410: u1,
                ///  B1411
                B1411: u1,
                ///  B1412
                B1412: u1,
                ///  B1413
                B1413: u1,
                ///  B1414
                B1414: u1,
                ///  B1415
                B1415: u1,
                ///  B1416
                B1416: u1,
                ///  B1417
                B1417: u1,
                ///  B1418
                B1418: u1,
                ///  B1419
                B1419: u1,
                ///  B1420
                B1420: u1,
                ///  B1421
                B1421: u1,
                ///  B1422
                B1422: u1,
                ///  B1423
                B1423: u1,
                ///  B1424
                B1424: u1,
                ///  B1425
                B1425: u1,
                ///  B1426
                B1426: u1,
                ///  B1427
                B1427: u1,
                ///  B1428
                B1428: u1,
                ///  B1429
                B1429: u1,
                ///  B1430
                B1430: u1,
                ///  B1431
                B1431: u1,
                ///  B1432
                B1432: u1,
                ///  B1433
                B1433: u1,
                ///  B1434
                B1434: u1,
                ///  B1435
                B1435: u1,
                ///  B1436
                B1436: u1,
                ///  B1437
                B1437: u1,
                ///  B1438
                B1438: u1,
                ///  B1439
                B1439: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR45: mmio.Mmio(packed struct(u32) {
                ///  B1440
                B1440: u1,
                ///  B1441
                B1441: u1,
                ///  B1442
                B1442: u1,
                ///  B1443
                B1443: u1,
                ///  B1444
                B1444: u1,
                ///  B1445
                B1445: u1,
                ///  B1446
                B1446: u1,
                ///  B1447
                B1447: u1,
                ///  B1448
                B1448: u1,
                ///  B1449
                B1449: u1,
                ///  B1450
                B1450: u1,
                ///  B1451
                B1451: u1,
                ///  B1452
                B1452: u1,
                ///  B1453
                B1453: u1,
                ///  B1454
                B1454: u1,
                ///  B1455
                B1455: u1,
                ///  B1456
                B1456: u1,
                ///  B1457
                B1457: u1,
                ///  B1458
                B1458: u1,
                ///  B1459
                B1459: u1,
                ///  B1460
                B1460: u1,
                ///  B1461
                B1461: u1,
                ///  B1462
                B1462: u1,
                ///  B1463
                B1463: u1,
                ///  B1464
                B1464: u1,
                ///  B1465
                B1465: u1,
                ///  B1466
                B1466: u1,
                ///  B1467
                B1467: u1,
                ///  B1468
                B1468: u1,
                ///  B1469
                B1469: u1,
                ///  B1470
                B1470: u1,
                ///  B1471
                B1471: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR46: mmio.Mmio(packed struct(u32) {
                ///  B1472
                B1472: u1,
                ///  B1473
                B1473: u1,
                ///  B1474
                B1474: u1,
                ///  B1475
                B1475: u1,
                ///  B1476
                B1476: u1,
                ///  B1477
                B1477: u1,
                ///  B1478
                B1478: u1,
                ///  B1479
                B1479: u1,
                ///  B1480
                B1480: u1,
                ///  B1481
                B1481: u1,
                ///  B1482
                B1482: u1,
                ///  B1483
                B1483: u1,
                ///  B1484
                B1484: u1,
                ///  B1485
                B1485: u1,
                ///  B1486
                B1486: u1,
                ///  B1487
                B1487: u1,
                ///  B1488
                B1488: u1,
                ///  B1489
                B1489: u1,
                ///  B1490
                B1490: u1,
                ///  B1491
                B1491: u1,
                ///  B1492
                B1492: u1,
                ///  B1493
                B1493: u1,
                ///  B1494
                B1494: u1,
                ///  B1495
                B1495: u1,
                ///  B1496
                B1496: u1,
                ///  B1497
                B1497: u1,
                ///  B1498
                B1498: u1,
                ///  B1499
                B1499: u1,
                ///  B1500
                B1500: u1,
                ///  B1501
                B1501: u1,
                ///  B1502
                B1502: u1,
                ///  B1503
                B1503: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR47: mmio.Mmio(packed struct(u32) {
                ///  B1504
                B1504: u1,
                ///  B1505
                B1505: u1,
                ///  B1506
                B1506: u1,
                ///  B1507
                B1507: u1,
                ///  B1508
                B1508: u1,
                ///  B1509
                B1509: u1,
                ///  B1510
                B1510: u1,
                ///  B1511
                B1511: u1,
                ///  B1512
                B1512: u1,
                ///  B1513
                B1513: u1,
                ///  B1514
                B1514: u1,
                ///  B1515
                B1515: u1,
                ///  B1516
                B1516: u1,
                ///  B1517
                B1517: u1,
                ///  B1518
                B1518: u1,
                ///  B1519
                B1519: u1,
                ///  B1520
                B1520: u1,
                ///  B1521
                B1521: u1,
                ///  B1522
                B1522: u1,
                ///  B1523
                B1523: u1,
                ///  B1524
                B1524: u1,
                ///  B1525
                B1525: u1,
                ///  B1526
                B1526: u1,
                ///  B1527
                B1527: u1,
                ///  B1528
                B1528: u1,
                ///  B1529
                B1529: u1,
                ///  B1530
                B1530: u1,
                ///  B1531
                B1531: u1,
                ///  B1532
                B1532: u1,
                ///  B1533
                B1533: u1,
                ///  B1534
                B1534: u1,
                ///  B1535
                B1535: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR48: mmio.Mmio(packed struct(u32) {
                ///  B1536
                B1536: u1,
                ///  B1537
                B1537: u1,
                ///  B1538
                B1538: u1,
                ///  B1539
                B1539: u1,
                ///  B1540
                B1540: u1,
                ///  B1541
                B1541: u1,
                ///  B1542
                B1542: u1,
                ///  B1543
                B1543: u1,
                ///  B1544
                B1544: u1,
                ///  B1545
                B1545: u1,
                ///  B1546
                B1546: u1,
                ///  B1547
                B1547: u1,
                ///  B1548
                B1548: u1,
                ///  B1549
                B1549: u1,
                ///  B1550
                B1550: u1,
                ///  B1551
                B1551: u1,
                ///  B1552
                B1552: u1,
                ///  B1553
                B1553: u1,
                ///  B1554
                B1554: u1,
                ///  B1555
                B1555: u1,
                ///  B1556
                B1556: u1,
                ///  B1557
                B1557: u1,
                ///  B1558
                B1558: u1,
                ///  B1559
                B1559: u1,
                ///  B1560
                B1560: u1,
                ///  B1561
                B1561: u1,
                ///  B1562
                B1562: u1,
                ///  B1563
                B1563: u1,
                ///  B1564
                B1564: u1,
                ///  B1565
                B1565: u1,
                ///  B1566
                B1566: u1,
                ///  B1567
                B1567: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR49: mmio.Mmio(packed struct(u32) {
                ///  B1568
                B1568: u1,
                ///  B1569
                B1569: u1,
                ///  B1570
                B1570: u1,
                ///  B1571
                B1571: u1,
                ///  B1572
                B1572: u1,
                ///  B1573
                B1573: u1,
                ///  B1574
                B1574: u1,
                ///  B1575
                B1575: u1,
                ///  B1576
                B1576: u1,
                ///  B1577
                B1577: u1,
                ///  B1578
                B1578: u1,
                ///  B1579
                B1579: u1,
                ///  B1580
                B1580: u1,
                ///  B1581
                B1581: u1,
                ///  B1582
                B1582: u1,
                ///  B1583
                B1583: u1,
                ///  B1584
                B1584: u1,
                ///  B1585
                B1585: u1,
                ///  B1586
                B1586: u1,
                ///  B1587
                B1587: u1,
                ///  B1588
                B1588: u1,
                ///  B1589
                B1589: u1,
                ///  B1590
                B1590: u1,
                ///  B1591
                B1591: u1,
                ///  B1592
                B1592: u1,
                ///  B1593
                B1593: u1,
                ///  B1594
                B1594: u1,
                ///  B1595
                B1595: u1,
                ///  B1596
                B1596: u1,
                ///  B1597
                B1597: u1,
                ///  B1598
                B1598: u1,
                ///  B1599
                B1599: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR50: mmio.Mmio(packed struct(u32) {
                ///  B1600
                B1600: u1,
                ///  B1601
                B1601: u1,
                ///  B1602
                B1602: u1,
                ///  B1603
                B1603: u1,
                ///  B1604
                B1604: u1,
                ///  B1605
                B1605: u1,
                ///  B1606
                B1606: u1,
                ///  B1607
                B1607: u1,
                ///  B1608
                B1608: u1,
                ///  B1609
                B1609: u1,
                ///  B1610
                B1610: u1,
                ///  B1611
                B1611: u1,
                ///  B1612
                B1612: u1,
                ///  B1613
                B1613: u1,
                ///  B1614
                B1614: u1,
                ///  B1615
                B1615: u1,
                ///  B1616
                B1616: u1,
                ///  B1617
                B1617: u1,
                ///  B1618
                B1618: u1,
                ///  B1619
                B1619: u1,
                ///  B1620
                B1620: u1,
                ///  B1621
                B1621: u1,
                ///  B1622
                B1622: u1,
                ///  B1623
                B1623: u1,
                ///  B1624
                B1624: u1,
                ///  B1625
                B1625: u1,
                ///  B1626
                B1626: u1,
                ///  B1627
                B1627: u1,
                ///  B1628
                B1628: u1,
                ///  B1629
                B1629: u1,
                ///  B1630
                B1630: u1,
                ///  B1631
                B1631: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR51: mmio.Mmio(packed struct(u32) {
                ///  B1632
                B1632: u1,
                ///  B1633
                B1633: u1,
                ///  B1634
                B1634: u1,
                ///  B1635
                B1635: u1,
                ///  B1636
                B1636: u1,
                ///  B1637
                B1637: u1,
                ///  B1638
                B1638: u1,
                ///  B1639
                B1639: u1,
                ///  B1640
                B1640: u1,
                ///  B1641
                B1641: u1,
                ///  B1642
                B1642: u1,
                ///  B1643
                B1643: u1,
                ///  B1644
                B1644: u1,
                ///  B1645
                B1645: u1,
                ///  B1646
                B1646: u1,
                ///  B1647
                B1647: u1,
                ///  B1648
                B1648: u1,
                ///  B1649
                B1649: u1,
                ///  B1650
                B1650: u1,
                ///  B1651
                B1651: u1,
                ///  B1652
                B1652: u1,
                ///  B1653
                B1653: u1,
                ///  B1654
                B1654: u1,
                ///  B1655
                B1655: u1,
                ///  B1656
                B1656: u1,
                ///  B1657
                B1657: u1,
                ///  B1658
                B1658: u1,
                ///  B1659
                B1659: u1,
                ///  B1660
                B1660: u1,
                ///  B1661
                B1661: u1,
                ///  B1662
                B1662: u1,
                ///  B1663
                B1663: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR52: mmio.Mmio(packed struct(u32) {
                ///  B1664
                B1664: u1,
                ///  B1665
                B1665: u1,
                ///  B1666
                B1666: u1,
                ///  B1667
                B1667: u1,
                ///  B1668
                B1668: u1,
                ///  B1669
                B1669: u1,
                ///  B1670
                B1670: u1,
                ///  B1671
                B1671: u1,
                ///  B1672
                B1672: u1,
                ///  B1673
                B1673: u1,
                ///  B1674
                B1674: u1,
                ///  B1675
                B1675: u1,
                ///  B1676
                B1676: u1,
                ///  B1677
                B1677: u1,
                ///  B1678
                B1678: u1,
                ///  B1679
                B1679: u1,
                ///  B1680
                B1680: u1,
                ///  B1681
                B1681: u1,
                ///  B1682
                B1682: u1,
                ///  B1683
                B1683: u1,
                ///  B1684
                B1684: u1,
                ///  B1685
                B1685: u1,
                ///  B1686
                B1686: u1,
                ///  B1687
                B1687: u1,
                ///  B1688
                B1688: u1,
                ///  B1689
                B1689: u1,
                ///  B1690
                B1690: u1,
                ///  B1691
                B1691: u1,
                ///  B1692
                B1692: u1,
                ///  B1693
                B1693: u1,
                ///  B1694
                B1694: u1,
                ///  B1695
                B1695: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR53: mmio.Mmio(packed struct(u32) {
                ///  B1696
                B1696: u1,
                ///  B1697
                B1697: u1,
                ///  B1698
                B1698: u1,
                ///  B1699
                B1699: u1,
                ///  B1700
                B1700: u1,
                ///  B1701
                B1701: u1,
                ///  B1702
                B1702: u1,
                ///  B1703
                B1703: u1,
                ///  B1704
                B1704: u1,
                ///  B1705
                B1705: u1,
                ///  B1706
                B1706: u1,
                ///  B1707
                B1707: u1,
                ///  B1708
                B1708: u1,
                ///  B1709
                B1709: u1,
                ///  B1710
                B1710: u1,
                ///  B1711
                B1711: u1,
                ///  B1712
                B1712: u1,
                ///  B1713
                B1713: u1,
                ///  B1714
                B1714: u1,
                ///  B1715
                B1715: u1,
                ///  B1716
                B1716: u1,
                ///  B1717
                B1717: u1,
                ///  B1718
                B1718: u1,
                ///  B1719
                B1719: u1,
                ///  B1720
                B1720: u1,
                ///  B1721
                B1721: u1,
                ///  B1722
                B1722: u1,
                ///  B1723
                B1723: u1,
                ///  B1724
                B1724: u1,
                ///  B1725
                B1725: u1,
                ///  B1726
                B1726: u1,
                ///  B1727
                B1727: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR54: mmio.Mmio(packed struct(u32) {
                ///  B1728
                B1728: u1,
                ///  B1729
                B1729: u1,
                ///  B1730
                B1730: u1,
                ///  B1731
                B1731: u1,
                ///  B1732
                B1732: u1,
                ///  B1733
                B1733: u1,
                ///  B1734
                B1734: u1,
                ///  B1735
                B1735: u1,
                ///  B1736
                B1736: u1,
                ///  B1737
                B1737: u1,
                ///  B1738
                B1738: u1,
                ///  B1739
                B1739: u1,
                ///  B1740
                B1740: u1,
                ///  B1741
                B1741: u1,
                ///  B1742
                B1742: u1,
                ///  B1743
                B1743: u1,
                ///  B1744
                B1744: u1,
                ///  B1745
                B1745: u1,
                ///  B1746
                B1746: u1,
                ///  B1747
                B1747: u1,
                ///  B1748
                B1748: u1,
                ///  B1749
                B1749: u1,
                ///  B1750
                B1750: u1,
                ///  B1751
                B1751: u1,
                ///  B1752
                B1752: u1,
                ///  B1753
                B1753: u1,
                ///  B1754
                B1754: u1,
                ///  B1755
                B1755: u1,
                ///  B1756
                B1756: u1,
                ///  B1757
                B1757: u1,
                ///  B1758
                B1758: u1,
                ///  B1759
                B1759: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR55: mmio.Mmio(packed struct(u32) {
                ///  B1760
                B1760: u1,
                ///  B1761
                B1761: u1,
                ///  B1762
                B1762: u1,
                ///  B1763
                B1763: u1,
                ///  B1764
                B1764: u1,
                ///  B1765
                B1765: u1,
                ///  B1766
                B1766: u1,
                ///  B1767
                B1767: u1,
                ///  B1768
                B1768: u1,
                ///  B1769
                B1769: u1,
                ///  B1770
                B1770: u1,
                ///  B1771
                B1771: u1,
                ///  B1772
                B1772: u1,
                ///  B1773
                B1773: u1,
                ///  B1774
                B1774: u1,
                ///  B1775
                B1775: u1,
                ///  B1776
                B1776: u1,
                ///  B1777
                B1777: u1,
                ///  B1778
                B1778: u1,
                ///  B1779
                B1779: u1,
                ///  B1780
                B1780: u1,
                ///  B1781
                B1781: u1,
                ///  B1782
                B1782: u1,
                ///  B1783
                B1783: u1,
                ///  B1784
                B1784: u1,
                ///  B1785
                B1785: u1,
                ///  B1786
                B1786: u1,
                ///  B1787
                B1787: u1,
                ///  B1788
                B1788: u1,
                ///  B1789
                B1789: u1,
                ///  B1790
                B1790: u1,
                ///  B1791
                B1791: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR56: mmio.Mmio(packed struct(u32) {
                ///  B1792
                B1792: u1,
                ///  B1793
                B1793: u1,
                ///  B1794
                B1794: u1,
                ///  B1795
                B1795: u1,
                ///  B1796
                B1796: u1,
                ///  B1797
                B1797: u1,
                ///  B1798
                B1798: u1,
                ///  B1799
                B1799: u1,
                ///  B1800
                B1800: u1,
                ///  B1801
                B1801: u1,
                ///  B1802
                B1802: u1,
                ///  B1803
                B1803: u1,
                ///  B1804
                B1804: u1,
                ///  B1805
                B1805: u1,
                ///  B1806
                B1806: u1,
                ///  B1807
                B1807: u1,
                ///  B1808
                B1808: u1,
                ///  B1809
                B1809: u1,
                ///  B1810
                B1810: u1,
                ///  B1811
                B1811: u1,
                ///  B1812
                B1812: u1,
                ///  B1813
                B1813: u1,
                ///  B1814
                B1814: u1,
                ///  B1815
                B1815: u1,
                ///  B1816
                B1816: u1,
                ///  B1817
                B1817: u1,
                ///  B1818
                B1818: u1,
                ///  B1819
                B1819: u1,
                ///  B1820
                B1820: u1,
                ///  B1821
                B1821: u1,
                ///  B1822
                B1822: u1,
                ///  B1823
                B1823: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR57: mmio.Mmio(packed struct(u32) {
                ///  B1824
                B1824: u1,
                ///  B1825
                B1825: u1,
                ///  B1826
                B1826: u1,
                ///  B1827
                B1827: u1,
                ///  B1828
                B1828: u1,
                ///  B1829
                B1829: u1,
                ///  B1830
                B1830: u1,
                ///  B1831
                B1831: u1,
                ///  B1832
                B1832: u1,
                ///  B1833
                B1833: u1,
                ///  B1834
                B1834: u1,
                ///  B1835
                B1835: u1,
                ///  B1836
                B1836: u1,
                ///  B1837
                B1837: u1,
                ///  B1838
                B1838: u1,
                ///  B1839
                B1839: u1,
                ///  B1840
                B1840: u1,
                ///  B1841
                B1841: u1,
                ///  B1842
                B1842: u1,
                ///  B1843
                B1843: u1,
                ///  B1844
                B1844: u1,
                ///  B1845
                B1845: u1,
                ///  B1846
                B1846: u1,
                ///  B1847
                B1847: u1,
                ///  B1848
                B1848: u1,
                ///  B1849
                B1849: u1,
                ///  B1850
                B1850: u1,
                ///  B1851
                B1851: u1,
                ///  B1852
                B1852: u1,
                ///  B1853
                B1853: u1,
                ///  B1854
                B1854: u1,
                ///  B1855
                B1855: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR58: mmio.Mmio(packed struct(u32) {
                ///  B1856
                B1856: u1,
                ///  B1857
                B1857: u1,
                ///  B1858
                B1858: u1,
                ///  B1859
                B1859: u1,
                ///  B1860
                B1860: u1,
                ///  B1861
                B1861: u1,
                ///  B1862
                B1862: u1,
                ///  B1863
                B1863: u1,
                ///  B1864
                B1864: u1,
                ///  B1865
                B1865: u1,
                ///  B1866
                B1866: u1,
                ///  B1867
                B1867: u1,
                ///  B1868
                B1868: u1,
                ///  B1869
                B1869: u1,
                ///  B1870
                B1870: u1,
                ///  B1871
                B1871: u1,
                ///  B1872
                B1872: u1,
                ///  B1873
                B1873: u1,
                ///  B1874
                B1874: u1,
                ///  B1875
                B1875: u1,
                ///  B1876
                B1876: u1,
                ///  B1877
                B1877: u1,
                ///  B1878
                B1878: u1,
                ///  B1879
                B1879: u1,
                ///  B1880
                B1880: u1,
                ///  B1881
                B1881: u1,
                ///  B1882
                B1882: u1,
                ///  B1883
                B1883: u1,
                ///  B1884
                B1884: u1,
                ///  B1885
                B1885: u1,
                ///  B1886
                B1886: u1,
                ///  B1887
                B1887: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR59: mmio.Mmio(packed struct(u32) {
                ///  B1888
                B1888: u1,
                ///  B1889
                B1889: u1,
                ///  B1890
                B1890: u1,
                ///  B1891
                B1891: u1,
                ///  B1892
                B1892: u1,
                ///  B1893
                B1893: u1,
                ///  B1894
                B1894: u1,
                ///  B1895
                B1895: u1,
                ///  B1896
                B1896: u1,
                ///  B1897
                B1897: u1,
                ///  B1898
                B1898: u1,
                ///  B1899
                B1899: u1,
                ///  B1900
                B1900: u1,
                ///  B1901
                B1901: u1,
                ///  B1902
                B1902: u1,
                ///  B1903
                B1903: u1,
                ///  B1904
                B1904: u1,
                ///  B1905
                B1905: u1,
                ///  B1906
                B1906: u1,
                ///  B1907
                B1907: u1,
                ///  B1908
                B1908: u1,
                ///  B1909
                B1909: u1,
                ///  B1910
                B1910: u1,
                ///  B1911
                B1911: u1,
                ///  B1912
                B1912: u1,
                ///  B1913
                B1913: u1,
                ///  B1914
                B1914: u1,
                ///  B1915
                B1915: u1,
                ///  B1916
                B1916: u1,
                ///  B1917
                B1917: u1,
                ///  B1918
                B1918: u1,
                ///  B1919
                B1919: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR60: mmio.Mmio(packed struct(u32) {
                ///  B1920
                B1920: u1,
                ///  B1921
                B1921: u1,
                ///  B1922
                B1922: u1,
                ///  B1923
                B1923: u1,
                ///  B1924
                B1924: u1,
                ///  B1925
                B1925: u1,
                ///  B1926
                B1926: u1,
                ///  B1927
                B1927: u1,
                ///  B1928
                B1928: u1,
                ///  B1929
                B1929: u1,
                ///  B1930
                B1930: u1,
                ///  B1931
                B1931: u1,
                ///  B1932
                B1932: u1,
                ///  B1933
                B1933: u1,
                ///  B1934
                B1934: u1,
                ///  B1935
                B1935: u1,
                ///  B1936
                B1936: u1,
                ///  B1937
                B1937: u1,
                ///  B1938
                B1938: u1,
                ///  B1939
                B1939: u1,
                ///  B1940
                B1940: u1,
                ///  B1941
                B1941: u1,
                ///  B1942
                B1942: u1,
                ///  B1943
                B1943: u1,
                ///  B1944
                B1944: u1,
                ///  B1945
                B1945: u1,
                ///  B1946
                B1946: u1,
                ///  B1947
                B1947: u1,
                ///  B1948
                B1948: u1,
                ///  B1949
                B1949: u1,
                ///  B1950
                B1950: u1,
                ///  B1951
                B1951: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR61: mmio.Mmio(packed struct(u32) {
                ///  B1952
                B1952: u1,
                ///  B1953
                B1953: u1,
                ///  B1954
                B1954: u1,
                ///  B1955
                B1955: u1,
                ///  B1956
                B1956: u1,
                ///  B1957
                B1957: u1,
                ///  B1958
                B1958: u1,
                ///  B1959
                B1959: u1,
                ///  B1960
                B1960: u1,
                ///  B1961
                B1961: u1,
                ///  B1962
                B1962: u1,
                ///  B1963
                B1963: u1,
                ///  B1964
                B1964: u1,
                ///  B1965
                B1965: u1,
                ///  B1966
                B1966: u1,
                ///  B1967
                B1967: u1,
                ///  B1968
                B1968: u1,
                ///  B1969
                B1969: u1,
                ///  B1970
                B1970: u1,
                ///  B1971
                B1971: u1,
                ///  B1972
                B1972: u1,
                ///  B1973
                B1973: u1,
                ///  B1974
                B1974: u1,
                ///  B1975
                B1975: u1,
                ///  B1976
                B1976: u1,
                ///  B1977
                B1977: u1,
                ///  B1978
                B1978: u1,
                ///  B1979
                B1979: u1,
                ///  B1980
                B1980: u1,
                ///  B1981
                B1981: u1,
                ///  B1982
                B1982: u1,
                ///  B1983
                B1983: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR62: mmio.Mmio(packed struct(u32) {
                ///  B1984
                B1984: u1,
                ///  B1985
                B1985: u1,
                ///  B1986
                B1986: u1,
                ///  B1987
                B1987: u1,
                ///  B1988
                B1988: u1,
                ///  B1989
                B1989: u1,
                ///  B1990
                B1990: u1,
                ///  B1991
                B1991: u1,
                ///  B1992
                B1992: u1,
                ///  B1993
                B1993: u1,
                ///  B1994
                B1994: u1,
                ///  B1995
                B1995: u1,
                ///  B1996
                B1996: u1,
                ///  B1997
                B1997: u1,
                ///  B1998
                B1998: u1,
                ///  B1999
                B1999: u1,
                ///  B2000
                B2000: u1,
                ///  B2001
                B2001: u1,
                ///  B2002
                B2002: u1,
                ///  B2003
                B2003: u1,
                ///  B2004
                B2004: u1,
                ///  B2005
                B2005: u1,
                ///  B2006
                B2006: u1,
                ///  B2007
                B2007: u1,
                ///  B2008
                B2008: u1,
                ///  B2009
                B2009: u1,
                ///  B2010
                B2010: u1,
                ///  B2011
                B2011: u1,
                ///  B2012
                B2012: u1,
                ///  B2013
                B2013: u1,
                ///  B2014
                B2014: u1,
                ///  B2015
                B2015: u1,
            }),
            ///  MPCBBx vector register
            MPCBB1_VCTR63: mmio.Mmio(packed struct(u32) {
                ///  B2016
                B2016: u1,
                ///  B2017
                B2017: u1,
                ///  B2018
                B2018: u1,
                ///  B2019
                B2019: u1,
                ///  B2020
                B2020: u1,
                ///  B2021
                B2021: u1,
                ///  B2022
                B2022: u1,
                ///  B2023
                B2023: u1,
                ///  B2024
                B2024: u1,
                ///  B2025
                B2025: u1,
                ///  B2026
                B2026: u1,
                ///  B2027
                B2027: u1,
                ///  B2028
                B2028: u1,
                ///  B2029
                B2029: u1,
                ///  B2030
                B2030: u1,
                ///  B2031
                B2031: u1,
                ///  B2032
                B2032: u1,
                ///  B2033
                B2033: u1,
                ///  B2034
                B2034: u1,
                ///  B2035
                B2035: u1,
                ///  B2036
                B2036: u1,
                ///  B2037
                B2037: u1,
                ///  B2038
                B2038: u1,
                ///  B2039
                B2039: u1,
                ///  B2040
                B2040: u1,
                ///  B2041
                B2041: u1,
                ///  B2042
                B2042: u1,
                ///  B2043
                B2043: u1,
                ///  B2044
                B2044: u1,
                ///  B2045
                B2045: u1,
                ///  B2046
                B2046: u1,
                ///  B2047
                B2047: u1,
            }),
        };

        ///  SEC_GTZC_MPCBB2
        pub const SEC_GTZC_MPCBB2 = extern struct {
            ///  MPCBB control register
            MPCBB2_CR: mmio.Mmio(packed struct(u32) {
                ///  LCK
                LCK: u1,
                reserved30: u29,
                ///  INVSECSTATE
                INVSECSTATE: u1,
                ///  SRWILADIS
                SRWILADIS: u1,
            }),
            reserved16: [12]u8,
            ///  MPCBB control register
            MPCBB2_LCKVTR1: mmio.Mmio(packed struct(u32) {
                ///  LCKSB0
                LCKSB0: u1,
                ///  LCKSB1
                LCKSB1: u1,
                ///  LCKSB2
                LCKSB2: u1,
                ///  LCKSB3
                LCKSB3: u1,
                ///  LCKSB4
                LCKSB4: u1,
                ///  LCKSB5
                LCKSB5: u1,
                ///  LCKSB6
                LCKSB6: u1,
                ///  LCKSB7
                LCKSB7: u1,
                ///  LCKSB8
                LCKSB8: u1,
                ///  LCKSB9
                LCKSB9: u1,
                ///  LCKSB10
                LCKSB10: u1,
                ///  LCKSB11
                LCKSB11: u1,
                ///  LCKSB12
                LCKSB12: u1,
                ///  LCKSB13
                LCKSB13: u1,
                ///  LCKSB14
                LCKSB14: u1,
                ///  LCKSB15
                LCKSB15: u1,
                ///  LCKSB16
                LCKSB16: u1,
                ///  LCKSB17
                LCKSB17: u1,
                ///  LCKSB18
                LCKSB18: u1,
                ///  LCKSB19
                LCKSB19: u1,
                ///  LCKSB20
                LCKSB20: u1,
                ///  LCKSB21
                LCKSB21: u1,
                ///  LCKSB22
                LCKSB22: u1,
                ///  LCKSB23
                LCKSB23: u1,
                ///  LCKSB24
                LCKSB24: u1,
                ///  LCKSB25
                LCKSB25: u1,
                ///  LCKSB26
                LCKSB26: u1,
                ///  LCKSB27
                LCKSB27: u1,
                ///  LCKSB28
                LCKSB28: u1,
                ///  LCKSB29
                LCKSB29: u1,
                ///  LCKSB30
                LCKSB30: u1,
                ///  LCKSB31
                LCKSB31: u1,
            }),
            ///  MPCBB control register
            MPCBB2_LCKVTR2: mmio.Mmio(packed struct(u32) {
                ///  LCKSB32
                LCKSB32: u1,
                ///  LCKSB33
                LCKSB33: u1,
                ///  LCKSB34
                LCKSB34: u1,
                ///  LCKSB35
                LCKSB35: u1,
                ///  LCKSB36
                LCKSB36: u1,
                ///  LCKSB37
                LCKSB37: u1,
                ///  LCKSB38
                LCKSB38: u1,
                ///  LCKSB39
                LCKSB39: u1,
                ///  LCKSB40
                LCKSB40: u1,
                ///  LCKSB41
                LCKSB41: u1,
                ///  LCKSB42
                LCKSB42: u1,
                ///  LCKSB43
                LCKSB43: u1,
                ///  LCKSB44
                LCKSB44: u1,
                ///  LCKSB45
                LCKSB45: u1,
                ///  LCKSB46
                LCKSB46: u1,
                ///  LCKSB47
                LCKSB47: u1,
                ///  LCKSB48
                LCKSB48: u1,
                ///  LCKSB49
                LCKSB49: u1,
                ///  LCKSB50
                LCKSB50: u1,
                ///  LCKSB51
                LCKSB51: u1,
                ///  LCKSB52
                LCKSB52: u1,
                ///  LCKSB53
                LCKSB53: u1,
                ///  LCKSB54
                LCKSB54: u1,
                ///  LCKSB55
                LCKSB55: u1,
                ///  LCKSB56
                LCKSB56: u1,
                ///  LCKSB57
                LCKSB57: u1,
                ///  LCKSB58
                LCKSB58: u1,
                ///  LCKSB59
                LCKSB59: u1,
                ///  LCKSB60
                LCKSB60: u1,
                ///  LCKSB61
                LCKSB61: u1,
                ///  LCKSB62
                LCKSB62: u1,
                ///  LCKSB63
                LCKSB63: u1,
            }),
            reserved256: [232]u8,
            ///  MPCBBx vector register
            MPCBB2_VCTR0: mmio.Mmio(packed struct(u32) {
                ///  B0
                B0: u1,
                ///  B1
                B1: u1,
                ///  B2
                B2: u1,
                ///  B3
                B3: u1,
                ///  B4
                B4: u1,
                ///  B5
                B5: u1,
                ///  B6
                B6: u1,
                ///  B7
                B7: u1,
                ///  B8
                B8: u1,
                ///  B9
                B9: u1,
                ///  B10
                B10: u1,
                ///  B11
                B11: u1,
                ///  B12
                B12: u1,
                ///  B13
                B13: u1,
                ///  B14
                B14: u1,
                ///  B15
                B15: u1,
                ///  B16
                B16: u1,
                ///  B17
                B17: u1,
                ///  B18
                B18: u1,
                ///  B19
                B19: u1,
                ///  B20
                B20: u1,
                ///  B21
                B21: u1,
                ///  B22
                B22: u1,
                ///  B23
                B23: u1,
                ///  B24
                B24: u1,
                ///  B25
                B25: u1,
                ///  B26
                B26: u1,
                ///  B27
                B27: u1,
                ///  B28
                B28: u1,
                ///  B29
                B29: u1,
                ///  B30
                B30: u1,
                ///  B31
                B31: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR1: mmio.Mmio(packed struct(u32) {
                ///  B32
                B32: u1,
                ///  B33
                B33: u1,
                ///  B34
                B34: u1,
                ///  B35
                B35: u1,
                ///  B36
                B36: u1,
                ///  B37
                B37: u1,
                ///  B38
                B38: u1,
                ///  B39
                B39: u1,
                ///  B40
                B40: u1,
                ///  B41
                B41: u1,
                ///  B42
                B42: u1,
                ///  B43
                B43: u1,
                ///  B44
                B44: u1,
                ///  B45
                B45: u1,
                ///  B46
                B46: u1,
                ///  B47
                B47: u1,
                ///  B48
                B48: u1,
                ///  B49
                B49: u1,
                ///  B50
                B50: u1,
                ///  B51
                B51: u1,
                ///  B52
                B52: u1,
                ///  B53
                B53: u1,
                ///  B54
                B54: u1,
                ///  B55
                B55: u1,
                ///  B56
                B56: u1,
                ///  B57
                B57: u1,
                ///  B58
                B58: u1,
                ///  B59
                B59: u1,
                ///  B60
                B60: u1,
                ///  B61
                B61: u1,
                ///  B62
                B62: u1,
                ///  B63
                B63: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR2: mmio.Mmio(packed struct(u32) {
                ///  B64
                B64: u1,
                ///  B65
                B65: u1,
                ///  B66
                B66: u1,
                ///  B67
                B67: u1,
                ///  B68
                B68: u1,
                ///  B69
                B69: u1,
                ///  B70
                B70: u1,
                ///  B71
                B71: u1,
                ///  B72
                B72: u1,
                ///  B73
                B73: u1,
                ///  B74
                B74: u1,
                ///  B75
                B75: u1,
                ///  B76
                B76: u1,
                ///  B77
                B77: u1,
                ///  B78
                B78: u1,
                ///  B79
                B79: u1,
                ///  B80
                B80: u1,
                ///  B81
                B81: u1,
                ///  B82
                B82: u1,
                ///  B83
                B83: u1,
                ///  B84
                B84: u1,
                ///  B85
                B85: u1,
                ///  B86
                B86: u1,
                ///  B87
                B87: u1,
                ///  B88
                B88: u1,
                ///  B89
                B89: u1,
                ///  B90
                B90: u1,
                ///  B91
                B91: u1,
                ///  B92
                B92: u1,
                ///  B93
                B93: u1,
                ///  B94
                B94: u1,
                ///  B95
                B95: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR3: mmio.Mmio(packed struct(u32) {
                ///  B96
                B96: u1,
                ///  B97
                B97: u1,
                ///  B98
                B98: u1,
                ///  B99
                B99: u1,
                ///  B100
                B100: u1,
                ///  B101
                B101: u1,
                ///  B102
                B102: u1,
                ///  B103
                B103: u1,
                ///  B104
                B104: u1,
                ///  B105
                B105: u1,
                ///  B106
                B106: u1,
                ///  B107
                B107: u1,
                ///  B108
                B108: u1,
                ///  B109
                B109: u1,
                ///  B110
                B110: u1,
                ///  B111
                B111: u1,
                ///  B112
                B112: u1,
                ///  B113
                B113: u1,
                ///  B114
                B114: u1,
                ///  B115
                B115: u1,
                ///  B116
                B116: u1,
                ///  B117
                B117: u1,
                ///  B118
                B118: u1,
                ///  B119
                B119: u1,
                ///  B120
                B120: u1,
                ///  B121
                B121: u1,
                ///  B122
                B122: u1,
                ///  B123
                B123: u1,
                ///  B124
                B124: u1,
                ///  B125
                B125: u1,
                ///  B126
                B126: u1,
                ///  B127
                B127: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR4: mmio.Mmio(packed struct(u32) {
                ///  B128
                B128: u1,
                ///  B129
                B129: u1,
                ///  B130
                B130: u1,
                ///  B131
                B131: u1,
                ///  B132
                B132: u1,
                ///  B133
                B133: u1,
                ///  B134
                B134: u1,
                ///  B135
                B135: u1,
                ///  B136
                B136: u1,
                ///  B137
                B137: u1,
                ///  B138
                B138: u1,
                ///  B139
                B139: u1,
                ///  B140
                B140: u1,
                ///  B141
                B141: u1,
                ///  B142
                B142: u1,
                ///  B143
                B143: u1,
                ///  B144
                B144: u1,
                ///  B145
                B145: u1,
                ///  B146
                B146: u1,
                ///  B147
                B147: u1,
                ///  B148
                B148: u1,
                ///  B149
                B149: u1,
                ///  B150
                B150: u1,
                ///  B151
                B151: u1,
                ///  B152
                B152: u1,
                ///  B153
                B153: u1,
                ///  B154
                B154: u1,
                ///  B155
                B155: u1,
                ///  B156
                B156: u1,
                ///  B157
                B157: u1,
                ///  B158
                B158: u1,
                ///  B159
                B159: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR5: mmio.Mmio(packed struct(u32) {
                ///  B160
                B160: u1,
                ///  B161
                B161: u1,
                ///  B162
                B162: u1,
                ///  B163
                B163: u1,
                ///  B164
                B164: u1,
                ///  B165
                B165: u1,
                ///  B166
                B166: u1,
                ///  B167
                B167: u1,
                ///  B168
                B168: u1,
                ///  B169
                B169: u1,
                ///  B170
                B170: u1,
                ///  B171
                B171: u1,
                ///  B172
                B172: u1,
                ///  B173
                B173: u1,
                ///  B174
                B174: u1,
                ///  B175
                B175: u1,
                ///  B176
                B176: u1,
                ///  B177
                B177: u1,
                ///  B178
                B178: u1,
                ///  B179
                B179: u1,
                ///  B180
                B180: u1,
                ///  B181
                B181: u1,
                ///  B182
                B182: u1,
                ///  B183
                B183: u1,
                ///  B184
                B184: u1,
                ///  B185
                B185: u1,
                ///  B186
                B186: u1,
                ///  B187
                B187: u1,
                ///  B188
                B188: u1,
                ///  B189
                B189: u1,
                ///  B190
                B190: u1,
                ///  B191
                B191: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR6: mmio.Mmio(packed struct(u32) {
                ///  B192
                B192: u1,
                ///  B193
                B193: u1,
                ///  B194
                B194: u1,
                ///  B195
                B195: u1,
                ///  B196
                B196: u1,
                ///  B197
                B197: u1,
                ///  B198
                B198: u1,
                ///  B199
                B199: u1,
                ///  B200
                B200: u1,
                ///  B201
                B201: u1,
                ///  B202
                B202: u1,
                ///  B203
                B203: u1,
                ///  B204
                B204: u1,
                ///  B205
                B205: u1,
                ///  B206
                B206: u1,
                ///  B207
                B207: u1,
                ///  B208
                B208: u1,
                ///  B209
                B209: u1,
                ///  B210
                B210: u1,
                ///  B211
                B211: u1,
                ///  B212
                B212: u1,
                ///  B213
                B213: u1,
                ///  B214
                B214: u1,
                ///  B215
                B215: u1,
                ///  B216
                B216: u1,
                ///  B217
                B217: u1,
                ///  B218
                B218: u1,
                ///  B219
                B219: u1,
                ///  B220
                B220: u1,
                ///  B221
                B221: u1,
                ///  B222
                B222: u1,
                ///  B223
                B223: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR7: mmio.Mmio(packed struct(u32) {
                ///  B224
                B224: u1,
                ///  B225
                B225: u1,
                ///  B226
                B226: u1,
                ///  B227
                B227: u1,
                ///  B228
                B228: u1,
                ///  B229
                B229: u1,
                ///  B230
                B230: u1,
                ///  B231
                B231: u1,
                ///  B232
                B232: u1,
                ///  B233
                B233: u1,
                ///  B234
                B234: u1,
                ///  B235
                B235: u1,
                ///  B236
                B236: u1,
                ///  B237
                B237: u1,
                ///  B238
                B238: u1,
                ///  B239
                B239: u1,
                ///  B240
                B240: u1,
                ///  B241
                B241: u1,
                ///  B242
                B242: u1,
                ///  B243
                B243: u1,
                ///  B244
                B244: u1,
                ///  B245
                B245: u1,
                ///  B246
                B246: u1,
                ///  B247
                B247: u1,
                ///  B248
                B248: u1,
                ///  B249
                B249: u1,
                ///  B250
                B250: u1,
                ///  B251
                B251: u1,
                ///  B252
                B252: u1,
                ///  B253
                B253: u1,
                ///  B254
                B254: u1,
                ///  B255
                B255: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR8: mmio.Mmio(packed struct(u32) {
                ///  B256
                B256: u1,
                ///  B257
                B257: u1,
                ///  B258
                B258: u1,
                ///  B259
                B259: u1,
                ///  B260
                B260: u1,
                ///  B261
                B261: u1,
                ///  B262
                B262: u1,
                ///  B263
                B263: u1,
                ///  B264
                B264: u1,
                ///  B265
                B265: u1,
                ///  B266
                B266: u1,
                ///  B267
                B267: u1,
                ///  B268
                B268: u1,
                ///  B269
                B269: u1,
                ///  B270
                B270: u1,
                ///  B271
                B271: u1,
                ///  B272
                B272: u1,
                ///  B273
                B273: u1,
                ///  B274
                B274: u1,
                ///  B275
                B275: u1,
                ///  B276
                B276: u1,
                ///  B277
                B277: u1,
                ///  B278
                B278: u1,
                ///  B279
                B279: u1,
                ///  B280
                B280: u1,
                ///  B281
                B281: u1,
                ///  B282
                B282: u1,
                ///  B283
                B283: u1,
                ///  B284
                B284: u1,
                ///  B285
                B285: u1,
                ///  B286
                B286: u1,
                ///  B287
                B287: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR9: mmio.Mmio(packed struct(u32) {
                ///  B288
                B288: u1,
                ///  B289
                B289: u1,
                ///  B290
                B290: u1,
                ///  B291
                B291: u1,
                ///  B292
                B292: u1,
                ///  B293
                B293: u1,
                ///  B294
                B294: u1,
                ///  B295
                B295: u1,
                ///  B296
                B296: u1,
                ///  B297
                B297: u1,
                ///  B298
                B298: u1,
                ///  B299
                B299: u1,
                ///  B300
                B300: u1,
                ///  B301
                B301: u1,
                ///  B302
                B302: u1,
                ///  B303
                B303: u1,
                ///  B304
                B304: u1,
                ///  B305
                B305: u1,
                ///  B306
                B306: u1,
                ///  B307
                B307: u1,
                ///  B308
                B308: u1,
                ///  B309
                B309: u1,
                ///  B310
                B310: u1,
                ///  B311
                B311: u1,
                ///  B312
                B312: u1,
                ///  B313
                B313: u1,
                ///  B314
                B314: u1,
                ///  B315
                B315: u1,
                ///  B316
                B316: u1,
                ///  B317
                B317: u1,
                ///  B318
                B318: u1,
                ///  B319
                B319: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR10: mmio.Mmio(packed struct(u32) {
                ///  B320
                B320: u1,
                ///  B321
                B321: u1,
                ///  B322
                B322: u1,
                ///  B323
                B323: u1,
                ///  B324
                B324: u1,
                ///  B325
                B325: u1,
                ///  B326
                B326: u1,
                ///  B327
                B327: u1,
                ///  B328
                B328: u1,
                ///  B329
                B329: u1,
                ///  B330
                B330: u1,
                ///  B331
                B331: u1,
                ///  B332
                B332: u1,
                ///  B333
                B333: u1,
                ///  B334
                B334: u1,
                ///  B335
                B335: u1,
                ///  B336
                B336: u1,
                ///  B337
                B337: u1,
                ///  B338
                B338: u1,
                ///  B339
                B339: u1,
                ///  B340
                B340: u1,
                ///  B341
                B341: u1,
                ///  B342
                B342: u1,
                ///  B343
                B343: u1,
                ///  B344
                B344: u1,
                ///  B345
                B345: u1,
                ///  B346
                B346: u1,
                ///  B347
                B347: u1,
                ///  B348
                B348: u1,
                ///  B349
                B349: u1,
                ///  B350
                B350: u1,
                ///  B351
                B351: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR11: mmio.Mmio(packed struct(u32) {
                ///  B352
                B352: u1,
                ///  B353
                B353: u1,
                ///  B354
                B354: u1,
                ///  B355
                B355: u1,
                ///  B356
                B356: u1,
                ///  B357
                B357: u1,
                ///  B358
                B358: u1,
                ///  B359
                B359: u1,
                ///  B360
                B360: u1,
                ///  B361
                B361: u1,
                ///  B362
                B362: u1,
                ///  B363
                B363: u1,
                ///  B364
                B364: u1,
                ///  B365
                B365: u1,
                ///  B366
                B366: u1,
                ///  B367
                B367: u1,
                ///  B368
                B368: u1,
                ///  B369
                B369: u1,
                ///  B370
                B370: u1,
                ///  B371
                B371: u1,
                ///  B372
                B372: u1,
                ///  B373
                B373: u1,
                ///  B374
                B374: u1,
                ///  B375
                B375: u1,
                ///  B376
                B376: u1,
                ///  B377
                B377: u1,
                ///  B378
                B378: u1,
                ///  B379
                B379: u1,
                ///  B380
                B380: u1,
                ///  B381
                B381: u1,
                ///  B382
                B382: u1,
                ///  B383
                B383: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR12: mmio.Mmio(packed struct(u32) {
                ///  B384
                B384: u1,
                ///  B385
                B385: u1,
                ///  B386
                B386: u1,
                ///  B387
                B387: u1,
                ///  B388
                B388: u1,
                ///  B389
                B389: u1,
                ///  B390
                B390: u1,
                ///  B391
                B391: u1,
                ///  B392
                B392: u1,
                ///  B393
                B393: u1,
                ///  B394
                B394: u1,
                ///  B395
                B395: u1,
                ///  B396
                B396: u1,
                ///  B397
                B397: u1,
                ///  B398
                B398: u1,
                ///  B399
                B399: u1,
                ///  B400
                B400: u1,
                ///  B401
                B401: u1,
                ///  B402
                B402: u1,
                ///  B403
                B403: u1,
                ///  B404
                B404: u1,
                ///  B405
                B405: u1,
                ///  B406
                B406: u1,
                ///  B407
                B407: u1,
                ///  B408
                B408: u1,
                ///  B409
                B409: u1,
                ///  B410
                B410: u1,
                ///  B411
                B411: u1,
                ///  B412
                B412: u1,
                ///  B413
                B413: u1,
                ///  B414
                B414: u1,
                ///  B415
                B415: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR13: mmio.Mmio(packed struct(u32) {
                ///  B416
                B416: u1,
                ///  B417
                B417: u1,
                ///  B418
                B418: u1,
                ///  B419
                B419: u1,
                ///  B420
                B420: u1,
                ///  B421
                B421: u1,
                ///  B422
                B422: u1,
                ///  B423
                B423: u1,
                ///  B424
                B424: u1,
                ///  B425
                B425: u1,
                ///  B426
                B426: u1,
                ///  B427
                B427: u1,
                ///  B428
                B428: u1,
                ///  B429
                B429: u1,
                ///  B430
                B430: u1,
                ///  B431
                B431: u1,
                ///  B432
                B432: u1,
                ///  B433
                B433: u1,
                ///  B434
                B434: u1,
                ///  B435
                B435: u1,
                ///  B436
                B436: u1,
                ///  B437
                B437: u1,
                ///  B438
                B438: u1,
                ///  B439
                B439: u1,
                ///  B440
                B440: u1,
                ///  B441
                B441: u1,
                ///  B442
                B442: u1,
                ///  B443
                B443: u1,
                ///  B444
                B444: u1,
                ///  B445
                B445: u1,
                ///  B446
                B446: u1,
                ///  B447
                B447: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR14: mmio.Mmio(packed struct(u32) {
                ///  B448
                B448: u1,
                ///  B449
                B449: u1,
                ///  B450
                B450: u1,
                ///  B451
                B451: u1,
                ///  B452
                B452: u1,
                ///  B453
                B453: u1,
                ///  B454
                B454: u1,
                ///  B455
                B455: u1,
                ///  B456
                B456: u1,
                ///  B457
                B457: u1,
                ///  B458
                B458: u1,
                ///  B459
                B459: u1,
                ///  B460
                B460: u1,
                ///  B461
                B461: u1,
                ///  B462
                B462: u1,
                ///  B463
                B463: u1,
                ///  B464
                B464: u1,
                ///  B465
                B465: u1,
                ///  B466
                B466: u1,
                ///  B467
                B467: u1,
                ///  B468
                B468: u1,
                ///  B469
                B469: u1,
                ///  B470
                B470: u1,
                ///  B471
                B471: u1,
                ///  B472
                B472: u1,
                ///  B473
                B473: u1,
                ///  B474
                B474: u1,
                ///  B475
                B475: u1,
                ///  B476
                B476: u1,
                ///  B477
                B477: u1,
                ///  B478
                B478: u1,
                ///  B479
                B479: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR15: mmio.Mmio(packed struct(u32) {
                ///  B480
                B480: u1,
                ///  B481
                B481: u1,
                ///  B482
                B482: u1,
                ///  B483
                B483: u1,
                ///  B484
                B484: u1,
                ///  B485
                B485: u1,
                ///  B486
                B486: u1,
                ///  B487
                B487: u1,
                ///  B488
                B488: u1,
                ///  B489
                B489: u1,
                ///  B490
                B490: u1,
                ///  B491
                B491: u1,
                ///  B492
                B492: u1,
                ///  B493
                B493: u1,
                ///  B494
                B494: u1,
                ///  B495
                B495: u1,
                ///  B496
                B496: u1,
                ///  B497
                B497: u1,
                ///  B498
                B498: u1,
                ///  B499
                B499: u1,
                ///  B500
                B500: u1,
                ///  B501
                B501: u1,
                ///  B502
                B502: u1,
                ///  B503
                B503: u1,
                ///  B504
                B504: u1,
                ///  B505
                B505: u1,
                ///  B506
                B506: u1,
                ///  B507
                B507: u1,
                ///  B508
                B508: u1,
                ///  B509
                B509: u1,
                ///  B510
                B510: u1,
                ///  B511
                B511: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR16: mmio.Mmio(packed struct(u32) {
                ///  B512
                B512: u1,
                ///  B513
                B513: u1,
                ///  B514
                B514: u1,
                ///  B515
                B515: u1,
                ///  B516
                B516: u1,
                ///  B517
                B517: u1,
                ///  B518
                B518: u1,
                ///  B519
                B519: u1,
                ///  B520
                B520: u1,
                ///  B521
                B521: u1,
                ///  B522
                B522: u1,
                ///  B523
                B523: u1,
                ///  B524
                B524: u1,
                ///  B525
                B525: u1,
                ///  B526
                B526: u1,
                ///  B527
                B527: u1,
                ///  B528
                B528: u1,
                ///  B529
                B529: u1,
                ///  B530
                B530: u1,
                ///  B531
                B531: u1,
                ///  B532
                B532: u1,
                ///  B533
                B533: u1,
                ///  B534
                B534: u1,
                ///  B535
                B535: u1,
                ///  B536
                B536: u1,
                ///  B537
                B537: u1,
                ///  B538
                B538: u1,
                ///  B539
                B539: u1,
                ///  B540
                B540: u1,
                ///  B541
                B541: u1,
                ///  B542
                B542: u1,
                ///  B543
                B543: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR17: mmio.Mmio(packed struct(u32) {
                ///  B544
                B544: u1,
                ///  B545
                B545: u1,
                ///  B546
                B546: u1,
                ///  B547
                B547: u1,
                ///  B548
                B548: u1,
                ///  B549
                B549: u1,
                ///  B550
                B550: u1,
                ///  B551
                B551: u1,
                ///  B552
                B552: u1,
                ///  B553
                B553: u1,
                ///  B554
                B554: u1,
                ///  B555
                B555: u1,
                ///  B556
                B556: u1,
                ///  B557
                B557: u1,
                ///  B558
                B558: u1,
                ///  B559
                B559: u1,
                ///  B560
                B560: u1,
                ///  B561
                B561: u1,
                ///  B562
                B562: u1,
                ///  B563
                B563: u1,
                ///  B564
                B564: u1,
                ///  B565
                B565: u1,
                ///  B566
                B566: u1,
                ///  B567
                B567: u1,
                ///  B568
                B568: u1,
                ///  B569
                B569: u1,
                ///  B570
                B570: u1,
                ///  B571
                B571: u1,
                ///  B572
                B572: u1,
                ///  B573
                B573: u1,
                ///  B574
                B574: u1,
                ///  B575
                B575: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR18: mmio.Mmio(packed struct(u32) {
                ///  B576
                B576: u1,
                ///  B577
                B577: u1,
                ///  B578
                B578: u1,
                ///  B579
                B579: u1,
                ///  B580
                B580: u1,
                ///  B581
                B581: u1,
                ///  B582
                B582: u1,
                ///  B583
                B583: u1,
                ///  B584
                B584: u1,
                ///  B585
                B585: u1,
                ///  B586
                B586: u1,
                ///  B587
                B587: u1,
                ///  B588
                B588: u1,
                ///  B589
                B589: u1,
                ///  B590
                B590: u1,
                ///  B591
                B591: u1,
                ///  B592
                B592: u1,
                ///  B593
                B593: u1,
                ///  B594
                B594: u1,
                ///  B595
                B595: u1,
                ///  B596
                B596: u1,
                ///  B597
                B597: u1,
                ///  B598
                B598: u1,
                ///  B599
                B599: u1,
                ///  B600
                B600: u1,
                ///  B601
                B601: u1,
                ///  B602
                B602: u1,
                ///  B603
                B603: u1,
                ///  B604
                B604: u1,
                ///  B605
                B605: u1,
                ///  B606
                B606: u1,
                ///  B607
                B607: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR19: mmio.Mmio(packed struct(u32) {
                ///  B608
                B608: u1,
                ///  B609
                B609: u1,
                ///  B610
                B610: u1,
                ///  B611
                B611: u1,
                ///  B612
                B612: u1,
                ///  B613
                B613: u1,
                ///  B614
                B614: u1,
                ///  B615
                B615: u1,
                ///  B616
                B616: u1,
                ///  B617
                B617: u1,
                ///  B618
                B618: u1,
                ///  B619
                B619: u1,
                ///  B620
                B620: u1,
                ///  B621
                B621: u1,
                ///  B622
                B622: u1,
                ///  B623
                B623: u1,
                ///  B624
                B624: u1,
                ///  B625
                B625: u1,
                ///  B626
                B626: u1,
                ///  B627
                B627: u1,
                ///  B628
                B628: u1,
                ///  B629
                B629: u1,
                ///  B630
                B630: u1,
                ///  B631
                B631: u1,
                ///  B632
                B632: u1,
                ///  B633
                B633: u1,
                ///  B634
                B634: u1,
                ///  B635
                B635: u1,
                ///  B636
                B636: u1,
                ///  B637
                B637: u1,
                ///  B638
                B638: u1,
                ///  B639
                B639: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR20: mmio.Mmio(packed struct(u32) {
                ///  B640
                B640: u1,
                ///  B641
                B641: u1,
                ///  B642
                B642: u1,
                ///  B643
                B643: u1,
                ///  B644
                B644: u1,
                ///  B645
                B645: u1,
                ///  B646
                B646: u1,
                ///  B647
                B647: u1,
                ///  B648
                B648: u1,
                ///  B649
                B649: u1,
                ///  B650
                B650: u1,
                ///  B651
                B651: u1,
                ///  B652
                B652: u1,
                ///  B653
                B653: u1,
                ///  B654
                B654: u1,
                ///  B655
                B655: u1,
                ///  B656
                B656: u1,
                ///  B657
                B657: u1,
                ///  B658
                B658: u1,
                ///  B659
                B659: u1,
                ///  B660
                B660: u1,
                ///  B661
                B661: u1,
                ///  B662
                B662: u1,
                ///  B663
                B663: u1,
                ///  B664
                B664: u1,
                ///  B665
                B665: u1,
                ///  B666
                B666: u1,
                ///  B667
                B667: u1,
                ///  B668
                B668: u1,
                ///  B669
                B669: u1,
                ///  B670
                B670: u1,
                ///  B671
                B671: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR21: mmio.Mmio(packed struct(u32) {
                ///  B672
                B672: u1,
                ///  B673
                B673: u1,
                ///  B674
                B674: u1,
                ///  B675
                B675: u1,
                ///  B676
                B676: u1,
                ///  B677
                B677: u1,
                ///  B678
                B678: u1,
                ///  B679
                B679: u1,
                ///  B680
                B680: u1,
                ///  B681
                B681: u1,
                ///  B682
                B682: u1,
                ///  B683
                B683: u1,
                ///  B684
                B684: u1,
                ///  B685
                B685: u1,
                ///  B686
                B686: u1,
                ///  B687
                B687: u1,
                ///  B688
                B688: u1,
                ///  B689
                B689: u1,
                ///  B690
                B690: u1,
                ///  B691
                B691: u1,
                ///  B692
                B692: u1,
                ///  B693
                B693: u1,
                ///  B694
                B694: u1,
                ///  B695
                B695: u1,
                ///  B696
                B696: u1,
                ///  B697
                B697: u1,
                ///  B698
                B698: u1,
                ///  B699
                B699: u1,
                ///  B700
                B700: u1,
                ///  B701
                B701: u1,
                ///  B702
                B702: u1,
                ///  B703
                B703: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR22: mmio.Mmio(packed struct(u32) {
                ///  B704
                B704: u1,
                ///  B705
                B705: u1,
                ///  B706
                B706: u1,
                ///  B707
                B707: u1,
                ///  B708
                B708: u1,
                ///  B709
                B709: u1,
                ///  B710
                B710: u1,
                ///  B711
                B711: u1,
                ///  B712
                B712: u1,
                ///  B713
                B713: u1,
                ///  B714
                B714: u1,
                ///  B715
                B715: u1,
                ///  B716
                B716: u1,
                ///  B717
                B717: u1,
                ///  B718
                B718: u1,
                ///  B719
                B719: u1,
                ///  B720
                B720: u1,
                ///  B721
                B721: u1,
                ///  B722
                B722: u1,
                ///  B723
                B723: u1,
                ///  B724
                B724: u1,
                ///  B725
                B725: u1,
                ///  B726
                B726: u1,
                ///  B727
                B727: u1,
                ///  B728
                B728: u1,
                ///  B729
                B729: u1,
                ///  B730
                B730: u1,
                ///  B731
                B731: u1,
                ///  B732
                B732: u1,
                ///  B733
                B733: u1,
                ///  B734
                B734: u1,
                ///  B735
                B735: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR23: mmio.Mmio(packed struct(u32) {
                ///  B736
                B736: u1,
                ///  B737
                B737: u1,
                ///  B738
                B738: u1,
                ///  B739
                B739: u1,
                ///  B740
                B740: u1,
                ///  B741
                B741: u1,
                ///  B742
                B742: u1,
                ///  B743
                B743: u1,
                ///  B744
                B744: u1,
                ///  B745
                B745: u1,
                ///  B746
                B746: u1,
                ///  B747
                B747: u1,
                ///  B748
                B748: u1,
                ///  B749
                B749: u1,
                ///  B750
                B750: u1,
                ///  B751
                B751: u1,
                ///  B752
                B752: u1,
                ///  B753
                B753: u1,
                ///  B754
                B754: u1,
                ///  B755
                B755: u1,
                ///  B756
                B756: u1,
                ///  B757
                B757: u1,
                ///  B758
                B758: u1,
                ///  B759
                B759: u1,
                ///  B760
                B760: u1,
                ///  B761
                B761: u1,
                ///  B762
                B762: u1,
                ///  B763
                B763: u1,
                ///  B764
                B764: u1,
                ///  B765
                B765: u1,
                ///  B766
                B766: u1,
                ///  B767
                B767: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR24: mmio.Mmio(packed struct(u32) {
                ///  B768
                B768: u1,
                ///  B769
                B769: u1,
                ///  B770
                B770: u1,
                ///  B771
                B771: u1,
                ///  B772
                B772: u1,
                ///  B773
                B773: u1,
                ///  B774
                B774: u1,
                ///  B775
                B775: u1,
                ///  B776
                B776: u1,
                ///  B777
                B777: u1,
                ///  B778
                B778: u1,
                ///  B779
                B779: u1,
                ///  B780
                B780: u1,
                ///  B781
                B781: u1,
                ///  B782
                B782: u1,
                ///  B783
                B783: u1,
                ///  B784
                B784: u1,
                ///  B785
                B785: u1,
                ///  B786
                B786: u1,
                ///  B787
                B787: u1,
                ///  B788
                B788: u1,
                ///  B789
                B789: u1,
                ///  B790
                B790: u1,
                ///  B791
                B791: u1,
                ///  B792
                B792: u1,
                ///  B793
                B793: u1,
                ///  B794
                B794: u1,
                ///  B795
                B795: u1,
                ///  B796
                B796: u1,
                ///  B797
                B797: u1,
                ///  B798
                B798: u1,
                ///  B799
                B799: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR25: mmio.Mmio(packed struct(u32) {
                ///  B800
                B800: u1,
                ///  B801
                B801: u1,
                ///  B802
                B802: u1,
                ///  B803
                B803: u1,
                ///  B804
                B804: u1,
                ///  B805
                B805: u1,
                ///  B806
                B806: u1,
                ///  B807
                B807: u1,
                ///  B808
                B808: u1,
                ///  B809
                B809: u1,
                ///  B810
                B810: u1,
                ///  B811
                B811: u1,
                ///  B812
                B812: u1,
                ///  B813
                B813: u1,
                ///  B814
                B814: u1,
                ///  B815
                B815: u1,
                ///  B816
                B816: u1,
                ///  B817
                B817: u1,
                ///  B818
                B818: u1,
                ///  B819
                B819: u1,
                ///  B820
                B820: u1,
                ///  B821
                B821: u1,
                ///  B822
                B822: u1,
                ///  B823
                B823: u1,
                ///  B824
                B824: u1,
                ///  B825
                B825: u1,
                ///  B826
                B826: u1,
                ///  B827
                B827: u1,
                ///  B828
                B828: u1,
                ///  B829
                B829: u1,
                ///  B830
                B830: u1,
                ///  B831
                B831: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR26: mmio.Mmio(packed struct(u32) {
                ///  B832
                B832: u1,
                ///  B833
                B833: u1,
                ///  B834
                B834: u1,
                ///  B835
                B835: u1,
                ///  B836
                B836: u1,
                ///  B837
                B837: u1,
                ///  B838
                B838: u1,
                ///  B839
                B839: u1,
                ///  B840
                B840: u1,
                ///  B841
                B841: u1,
                ///  B842
                B842: u1,
                ///  B843
                B843: u1,
                ///  B844
                B844: u1,
                ///  B845
                B845: u1,
                ///  B846
                B846: u1,
                ///  B847
                B847: u1,
                ///  B848
                B848: u1,
                ///  B849
                B849: u1,
                ///  B850
                B850: u1,
                ///  B851
                B851: u1,
                ///  B852
                B852: u1,
                ///  B853
                B853: u1,
                ///  B854
                B854: u1,
                ///  B855
                B855: u1,
                ///  B856
                B856: u1,
                ///  B857
                B857: u1,
                ///  B858
                B858: u1,
                ///  B859
                B859: u1,
                ///  B860
                B860: u1,
                ///  B861
                B861: u1,
                ///  B862
                B862: u1,
                ///  B863
                B863: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR27: mmio.Mmio(packed struct(u32) {
                ///  B864
                B864: u1,
                ///  B865
                B865: u1,
                ///  B866
                B866: u1,
                ///  B867
                B867: u1,
                ///  B868
                B868: u1,
                ///  B869
                B869: u1,
                ///  B870
                B870: u1,
                ///  B871
                B871: u1,
                ///  B872
                B872: u1,
                ///  B873
                B873: u1,
                ///  B874
                B874: u1,
                ///  B875
                B875: u1,
                ///  B876
                B876: u1,
                ///  B877
                B877: u1,
                ///  B878
                B878: u1,
                ///  B879
                B879: u1,
                ///  B880
                B880: u1,
                ///  B881
                B881: u1,
                ///  B882
                B882: u1,
                ///  B883
                B883: u1,
                ///  B884
                B884: u1,
                ///  B885
                B885: u1,
                ///  B886
                B886: u1,
                ///  B887
                B887: u1,
                ///  B888
                B888: u1,
                ///  B889
                B889: u1,
                ///  B890
                B890: u1,
                ///  B891
                B891: u1,
                ///  B892
                B892: u1,
                ///  B893
                B893: u1,
                ///  B894
                B894: u1,
                ///  B895
                B895: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR28: mmio.Mmio(packed struct(u32) {
                ///  B896
                B896: u1,
                ///  B897
                B897: u1,
                ///  B898
                B898: u1,
                ///  B899
                B899: u1,
                ///  B900
                B900: u1,
                ///  B901
                B901: u1,
                ///  B902
                B902: u1,
                ///  B903
                B903: u1,
                ///  B904
                B904: u1,
                ///  B905
                B905: u1,
                ///  B906
                B906: u1,
                ///  B907
                B907: u1,
                ///  B908
                B908: u1,
                ///  B909
                B909: u1,
                ///  B910
                B910: u1,
                ///  B911
                B911: u1,
                ///  B912
                B912: u1,
                ///  B913
                B913: u1,
                ///  B914
                B914: u1,
                ///  B915
                B915: u1,
                ///  B916
                B916: u1,
                ///  B917
                B917: u1,
                ///  B918
                B918: u1,
                ///  B919
                B919: u1,
                ///  B920
                B920: u1,
                ///  B921
                B921: u1,
                ///  B922
                B922: u1,
                ///  B923
                B923: u1,
                ///  B924
                B924: u1,
                ///  B925
                B925: u1,
                ///  B926
                B926: u1,
                ///  B927
                B927: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR29: mmio.Mmio(packed struct(u32) {
                ///  B928
                B928: u1,
                ///  B929
                B929: u1,
                ///  B930
                B930: u1,
                ///  B931
                B931: u1,
                ///  B932
                B932: u1,
                ///  B933
                B933: u1,
                ///  B934
                B934: u1,
                ///  B935
                B935: u1,
                ///  B936
                B936: u1,
                ///  B937
                B937: u1,
                ///  B938
                B938: u1,
                ///  B939
                B939: u1,
                ///  B940
                B940: u1,
                ///  B941
                B941: u1,
                ///  B942
                B942: u1,
                ///  B943
                B943: u1,
                ///  B944
                B944: u1,
                ///  B945
                B945: u1,
                ///  B946
                B946: u1,
                ///  B947
                B947: u1,
                ///  B948
                B948: u1,
                ///  B949
                B949: u1,
                ///  B950
                B950: u1,
                ///  B951
                B951: u1,
                ///  B952
                B952: u1,
                ///  B953
                B953: u1,
                ///  B954
                B954: u1,
                ///  B955
                B955: u1,
                ///  B956
                B956: u1,
                ///  B957
                B957: u1,
                ///  B958
                B958: u1,
                ///  B959
                B959: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR30: mmio.Mmio(packed struct(u32) {
                ///  B960
                B960: u1,
                ///  B961
                B961: u1,
                ///  B962
                B962: u1,
                ///  B963
                B963: u1,
                ///  B964
                B964: u1,
                ///  B965
                B965: u1,
                ///  B966
                B966: u1,
                ///  B967
                B967: u1,
                ///  B968
                B968: u1,
                ///  B969
                B969: u1,
                ///  B970
                B970: u1,
                ///  B971
                B971: u1,
                ///  B972
                B972: u1,
                ///  B973
                B973: u1,
                ///  B974
                B974: u1,
                ///  B975
                B975: u1,
                ///  B976
                B976: u1,
                ///  B977
                B977: u1,
                ///  B978
                B978: u1,
                ///  B979
                B979: u1,
                ///  B980
                B980: u1,
                ///  B981
                B981: u1,
                ///  B982
                B982: u1,
                ///  B983
                B983: u1,
                ///  B984
                B984: u1,
                ///  B985
                B985: u1,
                ///  B986
                B986: u1,
                ///  B987
                B987: u1,
                ///  B988
                B988: u1,
                ///  B989
                B989: u1,
                ///  B990
                B990: u1,
                ///  B991
                B991: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR31: mmio.Mmio(packed struct(u32) {
                ///  B992
                B992: u1,
                ///  B993
                B993: u1,
                ///  B994
                B994: u1,
                ///  B995
                B995: u1,
                ///  B996
                B996: u1,
                ///  B997
                B997: u1,
                ///  B998
                B998: u1,
                ///  B999
                B999: u1,
                ///  B1000
                B1000: u1,
                ///  B1001
                B1001: u1,
                ///  B1002
                B1002: u1,
                ///  B1003
                B1003: u1,
                ///  B1004
                B1004: u1,
                ///  B1005
                B1005: u1,
                ///  B1006
                B1006: u1,
                ///  B1007
                B1007: u1,
                ///  B1008
                B1008: u1,
                ///  B1009
                B1009: u1,
                ///  B1010
                B1010: u1,
                ///  B1011
                B1011: u1,
                ///  B1012
                B1012: u1,
                ///  B1013
                B1013: u1,
                ///  B1014
                B1014: u1,
                ///  B1015
                B1015: u1,
                ///  B1016
                B1016: u1,
                ///  B1017
                B1017: u1,
                ///  B1018
                B1018: u1,
                ///  B1019
                B1019: u1,
                ///  B1020
                B1020: u1,
                ///  B1021
                B1021: u1,
                ///  B1022
                B1022: u1,
                ///  B1023
                B1023: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR32: mmio.Mmio(packed struct(u32) {
                ///  B1024
                B1024: u1,
                ///  B1025
                B1025: u1,
                ///  B1026
                B1026: u1,
                ///  B1027
                B1027: u1,
                ///  B1028
                B1028: u1,
                ///  B1029
                B1029: u1,
                ///  B1030
                B1030: u1,
                ///  B1031
                B1031: u1,
                ///  B1032
                B1032: u1,
                ///  B1033
                B1033: u1,
                ///  B1034
                B1034: u1,
                ///  B1035
                B1035: u1,
                ///  B1036
                B1036: u1,
                ///  B1037
                B1037: u1,
                ///  B1038
                B1038: u1,
                ///  B1039
                B1039: u1,
                ///  B1040
                B1040: u1,
                ///  B1041
                B1041: u1,
                ///  B1042
                B1042: u1,
                ///  B1043
                B1043: u1,
                ///  B1044
                B1044: u1,
                ///  B1045
                B1045: u1,
                ///  B1046
                B1046: u1,
                ///  B1047
                B1047: u1,
                ///  B1048
                B1048: u1,
                ///  B1049
                B1049: u1,
                ///  B1050
                B1050: u1,
                ///  B1051
                B1051: u1,
                ///  B1052
                B1052: u1,
                ///  B1053
                B1053: u1,
                ///  B1054
                B1054: u1,
                ///  B1055
                B1055: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR33: mmio.Mmio(packed struct(u32) {
                ///  B1056
                B1056: u1,
                ///  B1057
                B1057: u1,
                ///  B1058
                B1058: u1,
                ///  B1059
                B1059: u1,
                ///  B1060
                B1060: u1,
                ///  B1061
                B1061: u1,
                ///  B1062
                B1062: u1,
                ///  B1063
                B1063: u1,
                ///  B1064
                B1064: u1,
                ///  B1065
                B1065: u1,
                ///  B1066
                B1066: u1,
                ///  B1067
                B1067: u1,
                ///  B1068
                B1068: u1,
                ///  B1069
                B1069: u1,
                ///  B1070
                B1070: u1,
                ///  B1071
                B1071: u1,
                ///  B1072
                B1072: u1,
                ///  B1073
                B1073: u1,
                ///  B1074
                B1074: u1,
                ///  B1075
                B1075: u1,
                ///  B1076
                B1076: u1,
                ///  B1077
                B1077: u1,
                ///  B1078
                B1078: u1,
                ///  B1079
                B1079: u1,
                ///  B1080
                B1080: u1,
                ///  B1081
                B1081: u1,
                ///  B1082
                B1082: u1,
                ///  B1083
                B1083: u1,
                ///  B1084
                B1084: u1,
                ///  B1085
                B1085: u1,
                ///  B1086
                B1086: u1,
                ///  B1087
                B1087: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR34: mmio.Mmio(packed struct(u32) {
                ///  B1088
                B1088: u1,
                ///  B1089
                B1089: u1,
                ///  B1090
                B1090: u1,
                ///  B1091
                B1091: u1,
                ///  B1092
                B1092: u1,
                ///  B1093
                B1093: u1,
                ///  B1094
                B1094: u1,
                ///  B1095
                B1095: u1,
                ///  B1096
                B1096: u1,
                ///  B1097
                B1097: u1,
                ///  B1098
                B1098: u1,
                ///  B1099
                B1099: u1,
                ///  B1100
                B1100: u1,
                ///  B1101
                B1101: u1,
                ///  B1102
                B1102: u1,
                ///  B1103
                B1103: u1,
                ///  B1104
                B1104: u1,
                ///  B1105
                B1105: u1,
                ///  B1106
                B1106: u1,
                ///  B1107
                B1107: u1,
                ///  B1108
                B1108: u1,
                ///  B1109
                B1109: u1,
                ///  B1110
                B1110: u1,
                ///  B1111
                B1111: u1,
                ///  B1112
                B1112: u1,
                ///  B1113
                B1113: u1,
                ///  B1114
                B1114: u1,
                ///  B1115
                B1115: u1,
                ///  B1116
                B1116: u1,
                ///  B1117
                B1117: u1,
                ///  B1118
                B1118: u1,
                ///  B1119
                B1119: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR35: mmio.Mmio(packed struct(u32) {
                ///  B1120
                B1120: u1,
                ///  B1121
                B1121: u1,
                ///  B1122
                B1122: u1,
                ///  B1123
                B1123: u1,
                ///  B1124
                B1124: u1,
                ///  B1125
                B1125: u1,
                ///  B1126
                B1126: u1,
                ///  B1127
                B1127: u1,
                ///  B1128
                B1128: u1,
                ///  B1129
                B1129: u1,
                ///  B1130
                B1130: u1,
                ///  B1131
                B1131: u1,
                ///  B1132
                B1132: u1,
                ///  B1133
                B1133: u1,
                ///  B1134
                B1134: u1,
                ///  B1135
                B1135: u1,
                ///  B1136
                B1136: u1,
                ///  B1137
                B1137: u1,
                ///  B1138
                B1138: u1,
                ///  B1139
                B1139: u1,
                ///  B1140
                B1140: u1,
                ///  B1141
                B1141: u1,
                ///  B1142
                B1142: u1,
                ///  B1143
                B1143: u1,
                ///  B1144
                B1144: u1,
                ///  B1145
                B1145: u1,
                ///  B1146
                B1146: u1,
                ///  B1147
                B1147: u1,
                ///  B1148
                B1148: u1,
                ///  B1149
                B1149: u1,
                ///  B1150
                B1150: u1,
                ///  B1151
                B1151: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR36: mmio.Mmio(packed struct(u32) {
                ///  B1152
                B1152: u1,
                ///  B1153
                B1153: u1,
                ///  B1154
                B1154: u1,
                ///  B1155
                B1155: u1,
                ///  B1156
                B1156: u1,
                ///  B1157
                B1157: u1,
                ///  B1158
                B1158: u1,
                ///  B1159
                B1159: u1,
                ///  B1160
                B1160: u1,
                ///  B1161
                B1161: u1,
                ///  B1162
                B1162: u1,
                ///  B1163
                B1163: u1,
                ///  B1164
                B1164: u1,
                ///  B1165
                B1165: u1,
                ///  B1166
                B1166: u1,
                ///  B1167
                B1167: u1,
                ///  B1168
                B1168: u1,
                ///  B1169
                B1169: u1,
                ///  B1170
                B1170: u1,
                ///  B1171
                B1171: u1,
                ///  B1172
                B1172: u1,
                ///  B1173
                B1173: u1,
                ///  B1174
                B1174: u1,
                ///  B1175
                B1175: u1,
                ///  B1176
                B1176: u1,
                ///  B1177
                B1177: u1,
                ///  B1178
                B1178: u1,
                ///  B1179
                B1179: u1,
                ///  B1180
                B1180: u1,
                ///  B1181
                B1181: u1,
                ///  B1182
                B1182: u1,
                ///  B1183
                B1183: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR37: mmio.Mmio(packed struct(u32) {
                ///  B1184
                B1184: u1,
                ///  B1185
                B1185: u1,
                ///  B1186
                B1186: u1,
                ///  B1187
                B1187: u1,
                ///  B1188
                B1188: u1,
                ///  B1189
                B1189: u1,
                ///  B1190
                B1190: u1,
                ///  B1191
                B1191: u1,
                ///  B1192
                B1192: u1,
                ///  B1193
                B1193: u1,
                ///  B1194
                B1194: u1,
                ///  B1195
                B1195: u1,
                ///  B1196
                B1196: u1,
                ///  B1197
                B1197: u1,
                ///  B1198
                B1198: u1,
                ///  B1199
                B1199: u1,
                ///  B1200
                B1200: u1,
                ///  B1201
                B1201: u1,
                ///  B1202
                B1202: u1,
                ///  B1203
                B1203: u1,
                ///  B1204
                B1204: u1,
                ///  B1205
                B1205: u1,
                ///  B1206
                B1206: u1,
                ///  B1207
                B1207: u1,
                ///  B1208
                B1208: u1,
                ///  B1209
                B1209: u1,
                ///  B1210
                B1210: u1,
                ///  B1211
                B1211: u1,
                ///  B1212
                B1212: u1,
                ///  B1213
                B1213: u1,
                ///  B1214
                B1214: u1,
                ///  B1215
                B1215: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR38: mmio.Mmio(packed struct(u32) {
                ///  B1216
                B1216: u1,
                ///  B1217
                B1217: u1,
                ///  B1218
                B1218: u1,
                ///  B1219
                B1219: u1,
                ///  B1220
                B1220: u1,
                ///  B1221
                B1221: u1,
                ///  B1222
                B1222: u1,
                ///  B1223
                B1223: u1,
                ///  B1224
                B1224: u1,
                ///  B1225
                B1225: u1,
                ///  B1226
                B1226: u1,
                ///  B1227
                B1227: u1,
                ///  B1228
                B1228: u1,
                ///  B1229
                B1229: u1,
                ///  B1230
                B1230: u1,
                ///  B1231
                B1231: u1,
                ///  B1232
                B1232: u1,
                ///  B1233
                B1233: u1,
                ///  B1234
                B1234: u1,
                ///  B1235
                B1235: u1,
                ///  B1236
                B1236: u1,
                ///  B1237
                B1237: u1,
                ///  B1238
                B1238: u1,
                ///  B1239
                B1239: u1,
                ///  B1240
                B1240: u1,
                ///  B1241
                B1241: u1,
                ///  B1242
                B1242: u1,
                ///  B1243
                B1243: u1,
                ///  B1244
                B1244: u1,
                ///  B1245
                B1245: u1,
                ///  B1246
                B1246: u1,
                ///  B1247
                B1247: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR39: mmio.Mmio(packed struct(u32) {
                ///  B1248
                B1248: u1,
                ///  B1249
                B1249: u1,
                ///  B1250
                B1250: u1,
                ///  B1251
                B1251: u1,
                ///  B1252
                B1252: u1,
                ///  B1253
                B1253: u1,
                ///  B1254
                B1254: u1,
                ///  B1255
                B1255: u1,
                ///  B1256
                B1256: u1,
                ///  B1257
                B1257: u1,
                ///  B1258
                B1258: u1,
                ///  B1259
                B1259: u1,
                ///  B1260
                B1260: u1,
                ///  B1261
                B1261: u1,
                ///  B1262
                B1262: u1,
                ///  B1263
                B1263: u1,
                ///  B1264
                B1264: u1,
                ///  B1265
                B1265: u1,
                ///  B1266
                B1266: u1,
                ///  B1267
                B1267: u1,
                ///  B1268
                B1268: u1,
                ///  B1269
                B1269: u1,
                ///  B1270
                B1270: u1,
                ///  B1271
                B1271: u1,
                ///  B1272
                B1272: u1,
                ///  B1273
                B1273: u1,
                ///  B1274
                B1274: u1,
                ///  B1275
                B1275: u1,
                ///  B1276
                B1276: u1,
                ///  B1277
                B1277: u1,
                ///  B1278
                B1278: u1,
                ///  B1279
                B1279: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR40: mmio.Mmio(packed struct(u32) {
                ///  B1280
                B1280: u1,
                ///  B1281
                B1281: u1,
                ///  B1282
                B1282: u1,
                ///  B1283
                B1283: u1,
                ///  B1284
                B1284: u1,
                ///  B1285
                B1285: u1,
                ///  B1286
                B1286: u1,
                ///  B1287
                B1287: u1,
                ///  B1288
                B1288: u1,
                ///  B1289
                B1289: u1,
                ///  B1290
                B1290: u1,
                ///  B1291
                B1291: u1,
                ///  B1292
                B1292: u1,
                ///  B1293
                B1293: u1,
                ///  B1294
                B1294: u1,
                ///  B1295
                B1295: u1,
                ///  B1296
                B1296: u1,
                ///  B1297
                B1297: u1,
                ///  B1298
                B1298: u1,
                ///  B1299
                B1299: u1,
                ///  B1300
                B1300: u1,
                ///  B1301
                B1301: u1,
                ///  B1302
                B1302: u1,
                ///  B1303
                B1303: u1,
                ///  B1304
                B1304: u1,
                ///  B1305
                B1305: u1,
                ///  B1306
                B1306: u1,
                ///  B1307
                B1307: u1,
                ///  B1308
                B1308: u1,
                ///  B1309
                B1309: u1,
                ///  B1310
                B1310: u1,
                ///  B1311
                B1311: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR41: mmio.Mmio(packed struct(u32) {
                ///  B1312
                B1312: u1,
                ///  B1313
                B1313: u1,
                ///  B1314
                B1314: u1,
                ///  B1315
                B1315: u1,
                ///  B1316
                B1316: u1,
                ///  B1317
                B1317: u1,
                ///  B1318
                B1318: u1,
                ///  B1319
                B1319: u1,
                ///  B1320
                B1320: u1,
                ///  B1321
                B1321: u1,
                ///  B1322
                B1322: u1,
                ///  B1323
                B1323: u1,
                ///  B1324
                B1324: u1,
                ///  B1325
                B1325: u1,
                ///  B1326
                B1326: u1,
                ///  B1327
                B1327: u1,
                ///  B1328
                B1328: u1,
                ///  B1329
                B1329: u1,
                ///  B1330
                B1330: u1,
                ///  B1331
                B1331: u1,
                ///  B1332
                B1332: u1,
                ///  B1333
                B1333: u1,
                ///  B1334
                B1334: u1,
                ///  B1335
                B1335: u1,
                ///  B1336
                B1336: u1,
                ///  B1337
                B1337: u1,
                ///  B1338
                B1338: u1,
                ///  B1339
                B1339: u1,
                ///  B1340
                B1340: u1,
                ///  B1341
                B1341: u1,
                ///  B1342
                B1342: u1,
                ///  B1343
                B1343: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR42: mmio.Mmio(packed struct(u32) {
                ///  B1344
                B1344: u1,
                ///  B1345
                B1345: u1,
                ///  B1346
                B1346: u1,
                ///  B1347
                B1347: u1,
                ///  B1348
                B1348: u1,
                ///  B1349
                B1349: u1,
                ///  B1350
                B1350: u1,
                ///  B1351
                B1351: u1,
                ///  B1352
                B1352: u1,
                ///  B1353
                B1353: u1,
                ///  B1354
                B1354: u1,
                ///  B1355
                B1355: u1,
                ///  B1356
                B1356: u1,
                ///  B1357
                B1357: u1,
                ///  B1358
                B1358: u1,
                ///  B1359
                B1359: u1,
                ///  B1360
                B1360: u1,
                ///  B1361
                B1361: u1,
                ///  B1362
                B1362: u1,
                ///  B1363
                B1363: u1,
                ///  B1364
                B1364: u1,
                ///  B1365
                B1365: u1,
                ///  B1366
                B1366: u1,
                ///  B1367
                B1367: u1,
                ///  B1368
                B1368: u1,
                ///  B1369
                B1369: u1,
                ///  B1370
                B1370: u1,
                ///  B1371
                B1371: u1,
                ///  B1372
                B1372: u1,
                ///  B1373
                B1373: u1,
                ///  B1374
                B1374: u1,
                ///  B1375
                B1375: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR43: mmio.Mmio(packed struct(u32) {
                ///  B1376
                B1376: u1,
                ///  B1377
                B1377: u1,
                ///  B1378
                B1378: u1,
                ///  B1379
                B1379: u1,
                ///  B1380
                B1380: u1,
                ///  B1381
                B1381: u1,
                ///  B1382
                B1382: u1,
                ///  B1383
                B1383: u1,
                ///  B1384
                B1384: u1,
                ///  B1385
                B1385: u1,
                ///  B1386
                B1386: u1,
                ///  B1387
                B1387: u1,
                ///  B1388
                B1388: u1,
                ///  B1389
                B1389: u1,
                ///  B1390
                B1390: u1,
                ///  B1391
                B1391: u1,
                ///  B1392
                B1392: u1,
                ///  B1393
                B1393: u1,
                ///  B1394
                B1394: u1,
                ///  B1395
                B1395: u1,
                ///  B1396
                B1396: u1,
                ///  B1397
                B1397: u1,
                ///  B1398
                B1398: u1,
                ///  B1399
                B1399: u1,
                ///  B1400
                B1400: u1,
                ///  B1401
                B1401: u1,
                ///  B1402
                B1402: u1,
                ///  B1403
                B1403: u1,
                ///  B1404
                B1404: u1,
                ///  B1405
                B1405: u1,
                ///  B1406
                B1406: u1,
                ///  B1407
                B1407: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR44: mmio.Mmio(packed struct(u32) {
                ///  B1408
                B1408: u1,
                ///  B1409
                B1409: u1,
                ///  B1410
                B1410: u1,
                ///  B1411
                B1411: u1,
                ///  B1412
                B1412: u1,
                ///  B1413
                B1413: u1,
                ///  B1414
                B1414: u1,
                ///  B1415
                B1415: u1,
                ///  B1416
                B1416: u1,
                ///  B1417
                B1417: u1,
                ///  B1418
                B1418: u1,
                ///  B1419
                B1419: u1,
                ///  B1420
                B1420: u1,
                ///  B1421
                B1421: u1,
                ///  B1422
                B1422: u1,
                ///  B1423
                B1423: u1,
                ///  B1424
                B1424: u1,
                ///  B1425
                B1425: u1,
                ///  B1426
                B1426: u1,
                ///  B1427
                B1427: u1,
                ///  B1428
                B1428: u1,
                ///  B1429
                B1429: u1,
                ///  B1430
                B1430: u1,
                ///  B1431
                B1431: u1,
                ///  B1432
                B1432: u1,
                ///  B1433
                B1433: u1,
                ///  B1434
                B1434: u1,
                ///  B1435
                B1435: u1,
                ///  B1436
                B1436: u1,
                ///  B1437
                B1437: u1,
                ///  B1438
                B1438: u1,
                ///  B1439
                B1439: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR45: mmio.Mmio(packed struct(u32) {
                ///  B1440
                B1440: u1,
                ///  B1441
                B1441: u1,
                ///  B1442
                B1442: u1,
                ///  B1443
                B1443: u1,
                ///  B1444
                B1444: u1,
                ///  B1445
                B1445: u1,
                ///  B1446
                B1446: u1,
                ///  B1447
                B1447: u1,
                ///  B1448
                B1448: u1,
                ///  B1449
                B1449: u1,
                ///  B1450
                B1450: u1,
                ///  B1451
                B1451: u1,
                ///  B1452
                B1452: u1,
                ///  B1453
                B1453: u1,
                ///  B1454
                B1454: u1,
                ///  B1455
                B1455: u1,
                ///  B1456
                B1456: u1,
                ///  B1457
                B1457: u1,
                ///  B1458
                B1458: u1,
                ///  B1459
                B1459: u1,
                ///  B1460
                B1460: u1,
                ///  B1461
                B1461: u1,
                ///  B1462
                B1462: u1,
                ///  B1463
                B1463: u1,
                ///  B1464
                B1464: u1,
                ///  B1465
                B1465: u1,
                ///  B1466
                B1466: u1,
                ///  B1467
                B1467: u1,
                ///  B1468
                B1468: u1,
                ///  B1469
                B1469: u1,
                ///  B1470
                B1470: u1,
                ///  B1471
                B1471: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR46: mmio.Mmio(packed struct(u32) {
                ///  B1472
                B1472: u1,
                ///  B1473
                B1473: u1,
                ///  B1474
                B1474: u1,
                ///  B1475
                B1475: u1,
                ///  B1476
                B1476: u1,
                ///  B1477
                B1477: u1,
                ///  B1478
                B1478: u1,
                ///  B1479
                B1479: u1,
                ///  B1480
                B1480: u1,
                ///  B1481
                B1481: u1,
                ///  B1482
                B1482: u1,
                ///  B1483
                B1483: u1,
                ///  B1484
                B1484: u1,
                ///  B1485
                B1485: u1,
                ///  B1486
                B1486: u1,
                ///  B1487
                B1487: u1,
                ///  B1488
                B1488: u1,
                ///  B1489
                B1489: u1,
                ///  B1490
                B1490: u1,
                ///  B1491
                B1491: u1,
                ///  B1492
                B1492: u1,
                ///  B1493
                B1493: u1,
                ///  B1494
                B1494: u1,
                ///  B1495
                B1495: u1,
                ///  B1496
                B1496: u1,
                ///  B1497
                B1497: u1,
                ///  B1498
                B1498: u1,
                ///  B1499
                B1499: u1,
                ///  B1500
                B1500: u1,
                ///  B1501
                B1501: u1,
                ///  B1502
                B1502: u1,
                ///  B1503
                B1503: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR47: mmio.Mmio(packed struct(u32) {
                ///  B1504
                B1504: u1,
                ///  B1505
                B1505: u1,
                ///  B1506
                B1506: u1,
                ///  B1507
                B1507: u1,
                ///  B1508
                B1508: u1,
                ///  B1509
                B1509: u1,
                ///  B1510
                B1510: u1,
                ///  B1511
                B1511: u1,
                ///  B1512
                B1512: u1,
                ///  B1513
                B1513: u1,
                ///  B1514
                B1514: u1,
                ///  B1515
                B1515: u1,
                ///  B1516
                B1516: u1,
                ///  B1517
                B1517: u1,
                ///  B1518
                B1518: u1,
                ///  B1519
                B1519: u1,
                ///  B1520
                B1520: u1,
                ///  B1521
                B1521: u1,
                ///  B1522
                B1522: u1,
                ///  B1523
                B1523: u1,
                ///  B1524
                B1524: u1,
                ///  B1525
                B1525: u1,
                ///  B1526
                B1526: u1,
                ///  B1527
                B1527: u1,
                ///  B1528
                B1528: u1,
                ///  B1529
                B1529: u1,
                ///  B1530
                B1530: u1,
                ///  B1531
                B1531: u1,
                ///  B1532
                B1532: u1,
                ///  B1533
                B1533: u1,
                ///  B1534
                B1534: u1,
                ///  B1535
                B1535: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR48: mmio.Mmio(packed struct(u32) {
                ///  B1536
                B1536: u1,
                ///  B1537
                B1537: u1,
                ///  B1538
                B1538: u1,
                ///  B1539
                B1539: u1,
                ///  B1540
                B1540: u1,
                ///  B1541
                B1541: u1,
                ///  B1542
                B1542: u1,
                ///  B1543
                B1543: u1,
                ///  B1544
                B1544: u1,
                ///  B1545
                B1545: u1,
                ///  B1546
                B1546: u1,
                ///  B1547
                B1547: u1,
                ///  B1548
                B1548: u1,
                ///  B1549
                B1549: u1,
                ///  B1550
                B1550: u1,
                ///  B1551
                B1551: u1,
                ///  B1552
                B1552: u1,
                ///  B1553
                B1553: u1,
                ///  B1554
                B1554: u1,
                ///  B1555
                B1555: u1,
                ///  B1556
                B1556: u1,
                ///  B1557
                B1557: u1,
                ///  B1558
                B1558: u1,
                ///  B1559
                B1559: u1,
                ///  B1560
                B1560: u1,
                ///  B1561
                B1561: u1,
                ///  B1562
                B1562: u1,
                ///  B1563
                B1563: u1,
                ///  B1564
                B1564: u1,
                ///  B1565
                B1565: u1,
                ///  B1566
                B1566: u1,
                ///  B1567
                B1567: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR49: mmio.Mmio(packed struct(u32) {
                ///  B1568
                B1568: u1,
                ///  B1569
                B1569: u1,
                ///  B1570
                B1570: u1,
                ///  B1571
                B1571: u1,
                ///  B1572
                B1572: u1,
                ///  B1573
                B1573: u1,
                ///  B1574
                B1574: u1,
                ///  B1575
                B1575: u1,
                ///  B1576
                B1576: u1,
                ///  B1577
                B1577: u1,
                ///  B1578
                B1578: u1,
                ///  B1579
                B1579: u1,
                ///  B1580
                B1580: u1,
                ///  B1581
                B1581: u1,
                ///  B1582
                B1582: u1,
                ///  B1583
                B1583: u1,
                ///  B1584
                B1584: u1,
                ///  B1585
                B1585: u1,
                ///  B1586
                B1586: u1,
                ///  B1587
                B1587: u1,
                ///  B1588
                B1588: u1,
                ///  B1589
                B1589: u1,
                ///  B1590
                B1590: u1,
                ///  B1591
                B1591: u1,
                ///  B1592
                B1592: u1,
                ///  B1593
                B1593: u1,
                ///  B1594
                B1594: u1,
                ///  B1595
                B1595: u1,
                ///  B1596
                B1596: u1,
                ///  B1597
                B1597: u1,
                ///  B1598
                B1598: u1,
                ///  B1599
                B1599: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR50: mmio.Mmio(packed struct(u32) {
                ///  B1600
                B1600: u1,
                ///  B1601
                B1601: u1,
                ///  B1602
                B1602: u1,
                ///  B1603
                B1603: u1,
                ///  B1604
                B1604: u1,
                ///  B1605
                B1605: u1,
                ///  B1606
                B1606: u1,
                ///  B1607
                B1607: u1,
                ///  B1608
                B1608: u1,
                ///  B1609
                B1609: u1,
                ///  B1610
                B1610: u1,
                ///  B1611
                B1611: u1,
                ///  B1612
                B1612: u1,
                ///  B1613
                B1613: u1,
                ///  B1614
                B1614: u1,
                ///  B1615
                B1615: u1,
                ///  B1616
                B1616: u1,
                ///  B1617
                B1617: u1,
                ///  B1618
                B1618: u1,
                ///  B1619
                B1619: u1,
                ///  B1620
                B1620: u1,
                ///  B1621
                B1621: u1,
                ///  B1622
                B1622: u1,
                ///  B1623
                B1623: u1,
                ///  B1624
                B1624: u1,
                ///  B1625
                B1625: u1,
                ///  B1626
                B1626: u1,
                ///  B1627
                B1627: u1,
                ///  B1628
                B1628: u1,
                ///  B1629
                B1629: u1,
                ///  B1630
                B1630: u1,
                ///  B1631
                B1631: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR51: mmio.Mmio(packed struct(u32) {
                ///  B1632
                B1632: u1,
                ///  B1633
                B1633: u1,
                ///  B1634
                B1634: u1,
                ///  B1635
                B1635: u1,
                ///  B1636
                B1636: u1,
                ///  B1637
                B1637: u1,
                ///  B1638
                B1638: u1,
                ///  B1639
                B1639: u1,
                ///  B1640
                B1640: u1,
                ///  B1641
                B1641: u1,
                ///  B1642
                B1642: u1,
                ///  B1643
                B1643: u1,
                ///  B1644
                B1644: u1,
                ///  B1645
                B1645: u1,
                ///  B1646
                B1646: u1,
                ///  B1647
                B1647: u1,
                ///  B1648
                B1648: u1,
                ///  B1649
                B1649: u1,
                ///  B1650
                B1650: u1,
                ///  B1651
                B1651: u1,
                ///  B1652
                B1652: u1,
                ///  B1653
                B1653: u1,
                ///  B1654
                B1654: u1,
                ///  B1655
                B1655: u1,
                ///  B1656
                B1656: u1,
                ///  B1657
                B1657: u1,
                ///  B1658
                B1658: u1,
                ///  B1659
                B1659: u1,
                ///  B1660
                B1660: u1,
                ///  B1661
                B1661: u1,
                ///  B1662
                B1662: u1,
                ///  B1663
                B1663: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR52: mmio.Mmio(packed struct(u32) {
                ///  B1664
                B1664: u1,
                ///  B1665
                B1665: u1,
                ///  B1666
                B1666: u1,
                ///  B1667
                B1667: u1,
                ///  B1668
                B1668: u1,
                ///  B1669
                B1669: u1,
                ///  B1670
                B1670: u1,
                ///  B1671
                B1671: u1,
                ///  B1672
                B1672: u1,
                ///  B1673
                B1673: u1,
                ///  B1674
                B1674: u1,
                ///  B1675
                B1675: u1,
                ///  B1676
                B1676: u1,
                ///  B1677
                B1677: u1,
                ///  B1678
                B1678: u1,
                ///  B1679
                B1679: u1,
                ///  B1680
                B1680: u1,
                ///  B1681
                B1681: u1,
                ///  B1682
                B1682: u1,
                ///  B1683
                B1683: u1,
                ///  B1684
                B1684: u1,
                ///  B1685
                B1685: u1,
                ///  B1686
                B1686: u1,
                ///  B1687
                B1687: u1,
                ///  B1688
                B1688: u1,
                ///  B1689
                B1689: u1,
                ///  B1690
                B1690: u1,
                ///  B1691
                B1691: u1,
                ///  B1692
                B1692: u1,
                ///  B1693
                B1693: u1,
                ///  B1694
                B1694: u1,
                ///  B1695
                B1695: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR53: mmio.Mmio(packed struct(u32) {
                ///  B1696
                B1696: u1,
                ///  B1697
                B1697: u1,
                ///  B1698
                B1698: u1,
                ///  B1699
                B1699: u1,
                ///  B1700
                B1700: u1,
                ///  B1701
                B1701: u1,
                ///  B1702
                B1702: u1,
                ///  B1703
                B1703: u1,
                ///  B1704
                B1704: u1,
                ///  B1705
                B1705: u1,
                ///  B1706
                B1706: u1,
                ///  B1707
                B1707: u1,
                ///  B1708
                B1708: u1,
                ///  B1709
                B1709: u1,
                ///  B1710
                B1710: u1,
                ///  B1711
                B1711: u1,
                ///  B1712
                B1712: u1,
                ///  B1713
                B1713: u1,
                ///  B1714
                B1714: u1,
                ///  B1715
                B1715: u1,
                ///  B1716
                B1716: u1,
                ///  B1717
                B1717: u1,
                ///  B1718
                B1718: u1,
                ///  B1719
                B1719: u1,
                ///  B1720
                B1720: u1,
                ///  B1721
                B1721: u1,
                ///  B1722
                B1722: u1,
                ///  B1723
                B1723: u1,
                ///  B1724
                B1724: u1,
                ///  B1725
                B1725: u1,
                ///  B1726
                B1726: u1,
                ///  B1727
                B1727: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR54: mmio.Mmio(packed struct(u32) {
                ///  B1728
                B1728: u1,
                ///  B1729
                B1729: u1,
                ///  B1730
                B1730: u1,
                ///  B1731
                B1731: u1,
                ///  B1732
                B1732: u1,
                ///  B1733
                B1733: u1,
                ///  B1734
                B1734: u1,
                ///  B1735
                B1735: u1,
                ///  B1736
                B1736: u1,
                ///  B1737
                B1737: u1,
                ///  B1738
                B1738: u1,
                ///  B1739
                B1739: u1,
                ///  B1740
                B1740: u1,
                ///  B1741
                B1741: u1,
                ///  B1742
                B1742: u1,
                ///  B1743
                B1743: u1,
                ///  B1744
                B1744: u1,
                ///  B1745
                B1745: u1,
                ///  B1746
                B1746: u1,
                ///  B1747
                B1747: u1,
                ///  B1748
                B1748: u1,
                ///  B1749
                B1749: u1,
                ///  B1750
                B1750: u1,
                ///  B1751
                B1751: u1,
                ///  B1752
                B1752: u1,
                ///  B1753
                B1753: u1,
                ///  B1754
                B1754: u1,
                ///  B1755
                B1755: u1,
                ///  B1756
                B1756: u1,
                ///  B1757
                B1757: u1,
                ///  B1758
                B1758: u1,
                ///  B1759
                B1759: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR55: mmio.Mmio(packed struct(u32) {
                ///  B1760
                B1760: u1,
                ///  B1761
                B1761: u1,
                ///  B1762
                B1762: u1,
                ///  B1763
                B1763: u1,
                ///  B1764
                B1764: u1,
                ///  B1765
                B1765: u1,
                ///  B1766
                B1766: u1,
                ///  B1767
                B1767: u1,
                ///  B1768
                B1768: u1,
                ///  B1769
                B1769: u1,
                ///  B1770
                B1770: u1,
                ///  B1771
                B1771: u1,
                ///  B1772
                B1772: u1,
                ///  B1773
                B1773: u1,
                ///  B1774
                B1774: u1,
                ///  B1775
                B1775: u1,
                ///  B1776
                B1776: u1,
                ///  B1777
                B1777: u1,
                ///  B1778
                B1778: u1,
                ///  B1779
                B1779: u1,
                ///  B1780
                B1780: u1,
                ///  B1781
                B1781: u1,
                ///  B1782
                B1782: u1,
                ///  B1783
                B1783: u1,
                ///  B1784
                B1784: u1,
                ///  B1785
                B1785: u1,
                ///  B1786
                B1786: u1,
                ///  B1787
                B1787: u1,
                ///  B1788
                B1788: u1,
                ///  B1789
                B1789: u1,
                ///  B1790
                B1790: u1,
                ///  B1791
                B1791: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR56: mmio.Mmio(packed struct(u32) {
                ///  B1792
                B1792: u1,
                ///  B1793
                B1793: u1,
                ///  B1794
                B1794: u1,
                ///  B1795
                B1795: u1,
                ///  B1796
                B1796: u1,
                ///  B1797
                B1797: u1,
                ///  B1798
                B1798: u1,
                ///  B1799
                B1799: u1,
                ///  B1800
                B1800: u1,
                ///  B1801
                B1801: u1,
                ///  B1802
                B1802: u1,
                ///  B1803
                B1803: u1,
                ///  B1804
                B1804: u1,
                ///  B1805
                B1805: u1,
                ///  B1806
                B1806: u1,
                ///  B1807
                B1807: u1,
                ///  B1808
                B1808: u1,
                ///  B1809
                B1809: u1,
                ///  B1810
                B1810: u1,
                ///  B1811
                B1811: u1,
                ///  B1812
                B1812: u1,
                ///  B1813
                B1813: u1,
                ///  B1814
                B1814: u1,
                ///  B1815
                B1815: u1,
                ///  B1816
                B1816: u1,
                ///  B1817
                B1817: u1,
                ///  B1818
                B1818: u1,
                ///  B1819
                B1819: u1,
                ///  B1820
                B1820: u1,
                ///  B1821
                B1821: u1,
                ///  B1822
                B1822: u1,
                ///  B1823
                B1823: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR57: mmio.Mmio(packed struct(u32) {
                ///  B1824
                B1824: u1,
                ///  B1825
                B1825: u1,
                ///  B1826
                B1826: u1,
                ///  B1827
                B1827: u1,
                ///  B1828
                B1828: u1,
                ///  B1829
                B1829: u1,
                ///  B1830
                B1830: u1,
                ///  B1831
                B1831: u1,
                ///  B1832
                B1832: u1,
                ///  B1833
                B1833: u1,
                ///  B1834
                B1834: u1,
                ///  B1835
                B1835: u1,
                ///  B1836
                B1836: u1,
                ///  B1837
                B1837: u1,
                ///  B1838
                B1838: u1,
                ///  B1839
                B1839: u1,
                ///  B1840
                B1840: u1,
                ///  B1841
                B1841: u1,
                ///  B1842
                B1842: u1,
                ///  B1843
                B1843: u1,
                ///  B1844
                B1844: u1,
                ///  B1845
                B1845: u1,
                ///  B1846
                B1846: u1,
                ///  B1847
                B1847: u1,
                ///  B1848
                B1848: u1,
                ///  B1849
                B1849: u1,
                ///  B1850
                B1850: u1,
                ///  B1851
                B1851: u1,
                ///  B1852
                B1852: u1,
                ///  B1853
                B1853: u1,
                ///  B1854
                B1854: u1,
                ///  B1855
                B1855: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR58: mmio.Mmio(packed struct(u32) {
                ///  B1856
                B1856: u1,
                ///  B1857
                B1857: u1,
                ///  B1858
                B1858: u1,
                ///  B1859
                B1859: u1,
                ///  B1860
                B1860: u1,
                ///  B1861
                B1861: u1,
                ///  B1862
                B1862: u1,
                ///  B1863
                B1863: u1,
                ///  B1864
                B1864: u1,
                ///  B1865
                B1865: u1,
                ///  B1866
                B1866: u1,
                ///  B1867
                B1867: u1,
                ///  B1868
                B1868: u1,
                ///  B1869
                B1869: u1,
                ///  B1870
                B1870: u1,
                ///  B1871
                B1871: u1,
                ///  B1872
                B1872: u1,
                ///  B1873
                B1873: u1,
                ///  B1874
                B1874: u1,
                ///  B1875
                B1875: u1,
                ///  B1876
                B1876: u1,
                ///  B1877
                B1877: u1,
                ///  B1878
                B1878: u1,
                ///  B1879
                B1879: u1,
                ///  B1880
                B1880: u1,
                ///  B1881
                B1881: u1,
                ///  B1882
                B1882: u1,
                ///  B1883
                B1883: u1,
                ///  B1884
                B1884: u1,
                ///  B1885
                B1885: u1,
                ///  B1886
                B1886: u1,
                ///  B1887
                B1887: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR59: mmio.Mmio(packed struct(u32) {
                ///  B1888
                B1888: u1,
                ///  B1889
                B1889: u1,
                ///  B1890
                B1890: u1,
                ///  B1891
                B1891: u1,
                ///  B1892
                B1892: u1,
                ///  B1893
                B1893: u1,
                ///  B1894
                B1894: u1,
                ///  B1895
                B1895: u1,
                ///  B1896
                B1896: u1,
                ///  B1897
                B1897: u1,
                ///  B1898
                B1898: u1,
                ///  B1899
                B1899: u1,
                ///  B1900
                B1900: u1,
                ///  B1901
                B1901: u1,
                ///  B1902
                B1902: u1,
                ///  B1903
                B1903: u1,
                ///  B1904
                B1904: u1,
                ///  B1905
                B1905: u1,
                ///  B1906
                B1906: u1,
                ///  B1907
                B1907: u1,
                ///  B1908
                B1908: u1,
                ///  B1909
                B1909: u1,
                ///  B1910
                B1910: u1,
                ///  B1911
                B1911: u1,
                ///  B1912
                B1912: u1,
                ///  B1913
                B1913: u1,
                ///  B1914
                B1914: u1,
                ///  B1915
                B1915: u1,
                ///  B1916
                B1916: u1,
                ///  B1917
                B1917: u1,
                ///  B1918
                B1918: u1,
                ///  B1919
                B1919: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR60: mmio.Mmio(packed struct(u32) {
                ///  B1920
                B1920: u1,
                ///  B1921
                B1921: u1,
                ///  B1922
                B1922: u1,
                ///  B1923
                B1923: u1,
                ///  B1924
                B1924: u1,
                ///  B1925
                B1925: u1,
                ///  B1926
                B1926: u1,
                ///  B1927
                B1927: u1,
                ///  B1928
                B1928: u1,
                ///  B1929
                B1929: u1,
                ///  B1930
                B1930: u1,
                ///  B1931
                B1931: u1,
                ///  B1932
                B1932: u1,
                ///  B1933
                B1933: u1,
                ///  B1934
                B1934: u1,
                ///  B1935
                B1935: u1,
                ///  B1936
                B1936: u1,
                ///  B1937
                B1937: u1,
                ///  B1938
                B1938: u1,
                ///  B1939
                B1939: u1,
                ///  B1940
                B1940: u1,
                ///  B1941
                B1941: u1,
                ///  B1942
                B1942: u1,
                ///  B1943
                B1943: u1,
                ///  B1944
                B1944: u1,
                ///  B1945
                B1945: u1,
                ///  B1946
                B1946: u1,
                ///  B1947
                B1947: u1,
                ///  B1948
                B1948: u1,
                ///  B1949
                B1949: u1,
                ///  B1950
                B1950: u1,
                ///  B1951
                B1951: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR61: mmio.Mmio(packed struct(u32) {
                ///  B1952
                B1952: u1,
                ///  B1953
                B1953: u1,
                ///  B1954
                B1954: u1,
                ///  B1955
                B1955: u1,
                ///  B1956
                B1956: u1,
                ///  B1957
                B1957: u1,
                ///  B1958
                B1958: u1,
                ///  B1959
                B1959: u1,
                ///  B1960
                B1960: u1,
                ///  B1961
                B1961: u1,
                ///  B1962
                B1962: u1,
                ///  B1963
                B1963: u1,
                ///  B1964
                B1964: u1,
                ///  B1965
                B1965: u1,
                ///  B1966
                B1966: u1,
                ///  B1967
                B1967: u1,
                ///  B1968
                B1968: u1,
                ///  B1969
                B1969: u1,
                ///  B1970
                B1970: u1,
                ///  B1971
                B1971: u1,
                ///  B1972
                B1972: u1,
                ///  B1973
                B1973: u1,
                ///  B1974
                B1974: u1,
                ///  B1975
                B1975: u1,
                ///  B1976
                B1976: u1,
                ///  B1977
                B1977: u1,
                ///  B1978
                B1978: u1,
                ///  B1979
                B1979: u1,
                ///  B1980
                B1980: u1,
                ///  B1981
                B1981: u1,
                ///  B1982
                B1982: u1,
                ///  B1983
                B1983: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR62: mmio.Mmio(packed struct(u32) {
                ///  B1984
                B1984: u1,
                ///  B1985
                B1985: u1,
                ///  B1986
                B1986: u1,
                ///  B1987
                B1987: u1,
                ///  B1988
                B1988: u1,
                ///  B1989
                B1989: u1,
                ///  B1990
                B1990: u1,
                ///  B1991
                B1991: u1,
                ///  B1992
                B1992: u1,
                ///  B1993
                B1993: u1,
                ///  B1994
                B1994: u1,
                ///  B1995
                B1995: u1,
                ///  B1996
                B1996: u1,
                ///  B1997
                B1997: u1,
                ///  B1998
                B1998: u1,
                ///  B1999
                B1999: u1,
                ///  B2000
                B2000: u1,
                ///  B2001
                B2001: u1,
                ///  B2002
                B2002: u1,
                ///  B2003
                B2003: u1,
                ///  B2004
                B2004: u1,
                ///  B2005
                B2005: u1,
                ///  B2006
                B2006: u1,
                ///  B2007
                B2007: u1,
                ///  B2008
                B2008: u1,
                ///  B2009
                B2009: u1,
                ///  B2010
                B2010: u1,
                ///  B2011
                B2011: u1,
                ///  B2012
                B2012: u1,
                ///  B2013
                B2013: u1,
                ///  B2014
                B2014: u1,
                ///  B2015
                B2015: u1,
            }),
            ///  MPCBBx vector register
            MPCBB2_VCTR63: mmio.Mmio(packed struct(u32) {
                ///  B2016
                B2016: u1,
                ///  B2017
                B2017: u1,
                ///  B2018
                B2018: u1,
                ///  B2019
                B2019: u1,
                ///  B2020
                B2020: u1,
                ///  B2021
                B2021: u1,
                ///  B2022
                B2022: u1,
                ///  B2023
                B2023: u1,
                ///  B2024
                B2024: u1,
                ///  B2025
                B2025: u1,
                ///  B2026
                B2026: u1,
                ///  B2027
                B2027: u1,
                ///  B2028
                B2028: u1,
                ///  B2029
                B2029: u1,
                ///  B2030
                B2030: u1,
                ///  B2031
                B2031: u1,
                ///  B2032
                B2032: u1,
                ///  B2033
                B2033: u1,
                ///  B2034
                B2034: u1,
                ///  B2035
                B2035: u1,
                ///  B2036
                B2036: u1,
                ///  B2037
                B2037: u1,
                ///  B2038
                B2038: u1,
                ///  B2039
                B2039: u1,
                ///  B2040
                B2040: u1,
                ///  B2041
                B2041: u1,
                ///  B2042
                B2042: u1,
                ///  B2043
                B2043: u1,
                ///  B2044
                B2044: u1,
                ///  B2045
                B2045: u1,
                ///  B2046
                B2046: u1,
                ///  B2047
                B2047: u1,
            }),
        };

        ///  Serial peripheral interface
        pub const SPI1 = extern struct {
            ///  control register 1
            CR1: mmio.Mmio(packed struct(u32) {
                ///  Clock phase
                CPHA: u1,
                ///  Clock polarity
                CPOL: u1,
                ///  Master selection
                MSTR: u1,
                ///  Baud rate control
                BR: u3,
                ///  SPI enable
                SPE: u1,
                ///  Frame format
                LSBFIRST: u1,
                ///  Internal slave select
                SSI: u1,
                ///  Software slave management
                SSM: u1,
                ///  Receive only
                RXONLY: u1,
                ///  CRC length
                CRCL: u1,
                ///  CRC transfer next
                CRCNEXT: u1,
                ///  Hardware CRC calculation enable
                CRCEN: u1,
                ///  Output enable in bidirectional mode
                BIDIOE: u1,
                ///  Bidirectional data mode enable
                BIDIMODE: u1,
                padding: u16,
            }),
            ///  control register 2
            CR2: mmio.Mmio(packed struct(u32) {
                ///  Rx buffer DMA enable
                RXDMAEN: u1,
                ///  Tx buffer DMA enable
                TXDMAEN: u1,
                ///  SS output enable
                SSOE: u1,
                ///  NSS pulse management
                NSSP: u1,
                ///  Frame format
                FRF: u1,
                ///  Error interrupt enable
                ERRIE: u1,
                ///  RX buffer not empty interrupt enable
                RXNEIE: u1,
                ///  Tx buffer empty interrupt enable
                TXEIE: u1,
                ///  Data size
                DS: u4,
                ///  FIFO reception threshold
                FRXTH: u1,
                ///  Last DMA transfer for reception
                LDMA_RX: u1,
                ///  Last DMA transfer for transmission
                LDMA_TX: u1,
                padding: u17,
            }),
            ///  status register
            SR: mmio.Mmio(packed struct(u32) {
                ///  Receive buffer not empty
                RXNE: u1,
                ///  Transmit buffer empty
                TXE: u1,
                reserved4: u2,
                ///  CRC error flag
                CRCERR: u1,
                ///  Mode fault
                MODF: u1,
                ///  Overrun flag
                OVR: u1,
                ///  Busy flag
                BSY: u1,
                ///  TI frame format error
                TIFRFE: u1,
                ///  FIFO reception level
                FRLVL: u2,
                ///  FIFO transmission level
                FTLVL: u2,
                padding: u19,
            }),
            ///  data register
            DR: mmio.Mmio(packed struct(u32) {
                ///  Data register
                DR: u16,
                padding: u16,
            }),
            ///  CRC polynomial register
            CRCPR: mmio.Mmio(packed struct(u32) {
                ///  CRC polynomial register
                CRCPOLY: u16,
                padding: u16,
            }),
            ///  RX CRC register
            RXCRCR: mmio.Mmio(packed struct(u32) {
                ///  Rx CRC register
                RxCRC: u16,
                padding: u16,
            }),
            ///  TX CRC register
            TXCRCR: mmio.Mmio(packed struct(u32) {
                ///  Tx CRC register
                TxCRC: u16,
                padding: u16,
            }),
        };

        ///  Comparator
        pub const COMP = extern struct {
            ///  Comparator 1 control and status register
            COMP1_CSR: mmio.Mmio(packed struct(u32) {
                ///  Comparator 1 enable bit
                COMP1_EN: u1,
                reserved2: u1,
                ///  Power Mode of the comparator 1
                COMP1_PWRMODE: u2,
                ///  Comparator 1 Input Minus connection configuration bit
                COMP1_INMSEL: u3,
                ///  Comparator1 input plus selection bit
                COMP1_INPSEL: u1,
                reserved15: u7,
                ///  Comparator 1 polarity selection bit
                COMP1_POLARITY: u1,
                ///  Comparator 1 hysteresis selection bits
                COMP1_HYST: u2,
                ///  Comparator 1 blanking source selection bits
                COMP1_BLANKING: u3,
                reserved22: u1,
                ///  Scaler bridge enable
                COMP1_BRGEN: u1,
                ///  Voltage scaler enable bit
                COMP1_SCALEN: u1,
                reserved30: u6,
                ///  Comparator 1 output status bit
                COMP1_VALUE: u1,
                ///  COMP1_CSR register lock bit
                COMP1_LOCK: u1,
            }),
            ///  Comparator 2 control and status register
            COMP2_CSR: mmio.Mmio(packed struct(u32) {
                ///  Comparator 2 enable bit
                COMP2_EN: u1,
                reserved2: u1,
                ///  Power Mode of the comparator 2
                COMP2_PWRMODE: u2,
                ///  Comparator 2 Input Minus connection configuration bit
                COMP2_INMSEL: u3,
                ///  Comparator 2 Input Plus connection configuration bit
                COMP2_INPSEL: u1,
                reserved9: u1,
                ///  Windows mode selection bit
                COMP2_WINMODE: u1,
                reserved15: u5,
                ///  Comparator 2 polarity selection bit
                COMP2_POLARITY: u1,
                ///  Comparator 2 hysteresis selection bits
                COMP2_HYST: u2,
                ///  Comparator 2 blanking source selection bits
                COMP2_BLANKING: u3,
                reserved22: u1,
                ///  Scaler bridge enable
                COMP2_BRGEN: u1,
                ///  Voltage scaler enable bit
                COMP2_SCALEN: u1,
                reserved30: u6,
                ///  Comparator 2 output status bit
                COMP2_VALUE: u1,
                ///  COMP2_CSR register lock bit
                COMP2_LOCK: u1,
            }),
        };
    };
};
